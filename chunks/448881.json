{
    "exports": {
        "fetchCurrentQuests": "async function o(){if(!a.default.isFetchingCurrentQuests){i.default.dispatch({type:\"QUESTS_FETCH_CURRENT_QUESTS_BEGIN\"});try{let e=await s.default.get({url:l.Endpoints.QUESTS_CURRENT_QUESTS}),t=e.body.quests.map(e=>(0,u.questWithUserStatusFromServer)(e)),n=t.filter(e=>{var t;return(null===(t=e.userStatus)||void 0===t?void 0:t.claimedAt)!=null||e.config.rewardCodePlatforms.length>0});i.default.dispatch({type:\"QUESTS_FETCH_CURRENT_QUESTS_SUCCESS\",quests:n})}catch(e){i.default.dispatch({type:\"QUESTS_FETCH_CURRENT_QUESTS_FAILURE\",error:new r.default(e)})}}}",
        "sendHeartbeat": "async function d(e){let{questId:t,streamKey:n,applicationId:a}=e;try{let e=await s.default.post({url:l.Endpoints.QUESTS_HEARTBEAT(t),body:{stream_key:n,application_id:a}});i.default.dispatch({type:\"QUESTS_SEND_HEARTBEAT_SUCCESS\",userStatus:(0,u.questUserStatusFromServer)(e.body),applicationId:a,questId:t,streamKey:n})}catch(e){i.default.dispatch({type:\"QUESTS_SEND_HEARTBEAT_FAILURE\",error:new r.default(e),questId:t,streamKey:n})}}",
        "enrollInQuest": "async function c(e,t){let n=a.default.isEnrolling(e);if(!n){i.default.dispatch({type:\"QUESTS_ENROLL_BEGIN\",questId:e});try{let n=await s.default.post({url:l.Endpoints.QUESTS_ENROLL(e),body:{location:t}});i.default.dispatch({type:\"QUESTS_ENROLL_SUCCESS\",enrolledQuestUserStatus:(0,u.questUserStatusFromServer)(n.body)})}catch(t){i.default.dispatch({type:\"QUESTS_ENROLL_FAILURE\",questId:e})}}}",
        "claimQuestRewardCode": "async function E(e,t,n){let o=a.default.isClaimingRewardCode(e);if(!o){i.default.dispatch({type:\"QUESTS_CLAIM_REWARD_CODE_BEGIN\",questId:e});try{let r=await s.default.post({url:l.Endpoints.QUESTS_REWARD_CODE(e),body:{platform:t,location:n}});i.default.dispatch({type:\"QUESTS_CLAIM_REWARD_CODE_SUCCESS\",questId:e,rewardCode:(0,u.questsRewardCodeFromServer)(r.body)})}catch(t){throw i.default.dispatch({type:\"QUESTS_CLAIM_REWARD_CODE_FAILURE\",error:new r.default(t),questId:e}),t}}}",
        "fetchQuestRewardCode": "async function S(e){let t=a.default.isFetchingRewardCode(e);if(!t){i.default.dispatch({type:\"QUESTS_FETCH_REWARD_CODE_BEGIN\",questId:e});try{let t=await s.default.get({url:l.Endpoints.QUESTS_REWARD_CODE(e)});i.default.dispatch({type:\"QUESTS_FETCH_REWARD_CODE_SUCCESS\",questId:e,rewardCode:(0,u.questsRewardCodeFromServer)(t.body)})}catch(t){throw i.default.dispatch({type:\"QUESTS_FETCH_REWARD_CODE_FAILURE\",error:new r.default(t),questId:e}),t}}}",
        "dismissQuestContent": "async function _(e,t){let n=a.default.isDismissingContent(e);if(!n){i.default.dispatch({type:\"QUESTS_DISMISS_CONTENT_BEGIN\",questId:e,content:t});try{let n=await s.default.post({url:l.Endpoints.QUESTS_DISMISS_CONTENT(e,t),body:{}});i.default.dispatch({type:\"QUESTS_DISMISS_CONTENT_SUCCESS\",dismissedQuestUserStatus:(0,u.questUserStatusFromServer)(n.body)})}catch(t){i.default.dispatch({type:\"QUESTS_DISMISS_CONTENT_FAILURE\",error:new r.default(t),questId:e})}}}",
        "dismissProgressTrackingFailureNotice": "function f(e){i.default.dispatch({type:\"QUESTS_DISMISS_PROGRESS_TRACKING_FAILURE_NOTICE\",streamKey:e})}",
        "completeQuestPreview": "async function T(e){try{let t=await s.default.post({url:l.Endpoints.QUESTS_PREVIEW_COMPLETE(e),body:{}});i.default.dispatch({type:\"QUESTS_PREVIEW_UPDATE_SUCCESS\",previewQuestUserStatus:(0,u.questUserStatusFromServer)(t.body)})}catch(t){i.default.dispatch({type:\"QUESTS_PREVIEW_UPDATE_FAILURE\",error:new r.default(t),questId:e})}}",
        "resetQuestPreviewStatus": "async function C(e){try{let t=await s.default.delete({url:l.Endpoints.QUESTS_PREVIEW_STATUS(e),body:{}});i.default.dispatch({type:\"QUESTS_PREVIEW_UPDATE_SUCCESS\",previewQuestUserStatus:(0,u.questUserStatusFromServer)(t.body)})}catch(t){i.default.dispatch({type:\"QUESTS_PREVIEW_UPDATE_FAILURE\",error:new r.default(t),questId:e})}}",
        "resetQuestDismissibilityStatus": "async function p(e){try{let t=await s.default.delete({url:l.Endpoints.QUESTS_PREVIEW_DISMISSIBILITY(e),body:{}});i.default.dispatch({type:\"QUESTS_PREVIEW_UPDATE_SUCCESS\",previewQuestUserStatus:(0,u.questUserStatusFromServer)(t.body)})}catch(t){i.default.dispatch({type:\"QUESTS_PREVIEW_UPDATE_FAILURE\",error:new r.default(t),questId:e})}}"
    }
}