{
    "exports": {
        "Directions": {
            "SENDRECV": "sendrecv",
            "SENDONLY": "sendonly",
            "RECVONLY": "recvonly",
            "INACTIVE": "inactive"
        },
        "extractSDP": "function D(e){let t=u.parse(e).media.reduce((e,t)=>{let n,{type:i,rtp:r,ssrcs:o,fmtp:a,direction:s,mid:E}=t;switch(e.outboundStreams.push({type:i,direction:s,mid:E}),i){case\"audio\":[T.Codecs.OPUS].forEach((t,n)=>{let o=L(r,a,i,t,n);null!=o&&e.codecs.push(o)}),\"sendrecv\"===s&&null!=(n=_().find(o,{attribute:\"cname\"}))&&(e.audioSSRC=n.id);break;case\"video\":[T.Codecs.H264,T.Codecs.VP8,T.Codecs.VP9].forEach((t,n)=>{let o=L(r,a,i,t,n);null!=o&&e.codecs.push(o)}),\"sendrecv\"===s&&(null!=(n=_().find(o,{attribute:\"cname\"}))&&(e.videoSSRC=n.id),null!=(n=_().findLast(o,{attribute:\"cname\"}))&&(n.id===e.videoSSRC&&d.warn(\"Unable to find a unique rtx SSRC!\"),e.rtxSSRC=n.id))}return e},{outboundStreams:[],codecs:[],audioSSRC:0,videoSSRC:0,rtxSSRC:0});return t.codecs=_().uniqWith(t.codecs,_().isEqual),t}",
        "generateSessionDescription": "function C(e){let{type:t,baseSDP:n,direction:i,audioCodec:r,audioPayloadType:o,audioBitRate:a,videoCodec:s,videoPayloadType:E,videoBitRate:u,rtxPayloadType:I,ssrcs:T,extensions:c}=e,S=[];if(d.info(`generateSessionDescription: ${JSON.stringify(T)}`),\"Firefox\"===l().name){let e=\"answer\"===t?\"passive\":\"active\";T.forEach(t=>{let[i,_,l,T,d]=t;if(\"video\"!==l||0!==E&&0!==I)S.push(R({mid:d,type:l,setup:e,direction:T,baseSDP:n,codec:\"audio\"===l?r:s,payload:\"audio\"===l?o:E,bitrate:\"audio\"===l?a:u,ssrcs:N(_,i,\"audio\"===l?\"a\":\"v\"),extensions:c}))})}else{let e=\"answer\"===t?\"passive\":\"actpass\",l=_()(T).filter(e=>{let[t,n,i,r,o]=e;return\"inactive\"!==r&&\"audio\"===i}).map(e=>{let[t,n]=e;return N(n,t,\"a\")}).value();if(S.push(R({mid:\"audio\",type:\"audio\",setup:e,direction:i,baseSDP:n,codec:r,payload:o,bitrate:a,ssrcs:_().flatten(l),extensions:c})),E>0){let t=_()(T).filter(e=>{let[t,n,i,r,o]=e;return\"inactive\"!==r&&\"video\"===i}).map(e=>{let[t,n]=e;return N(n,t,\"v\")}).value();S.push(R({mid:\"video\",type:\"video\",setup:e,direction:i,baseSDP:n,codec:s,payload:E,bitrate:u,ssrcs:_().flatten(t),extensions:c,rtxPayload:I}))}}let A=O(S);return new RTCSessionDescription({type:t,sdp:A})}",
        "generateUnifiedSessionDescription": "function h(e){let{type:t,baseSDP:n,audioCodec:i,audioPayloadType:r,audioBitRate:o,videoCodec:a,videoPayloadType:s,videoBitRate:_,sendingVideo:E,rtxPayloadType:l,ssrcs:u,extensions:I}=e,T=[],c=\"answer\"===t?\"passive\":\"actpass\";u.forEach(e=>{let t,{ssrc:u,cname:d,type:S,direction:A,mid:O}=e;\"\"!==d?t=N(d,u,\"audio\"===S?\"a\":\"v\"):(t=[],\"sendonly\"===A?A=\"inactive\":\"sendrecv\"===A&&(A=\"recvonly\"));T.push(R({mid:O,type:S,setup:c,direction:A,baseSDP:n,codec:\"audio\"===S?i:a,payload:\"audio\"===S?r:s,bitrate:\"audio\"===S?o:_,ssrcs:t,extensions:I,rtxPayload:\"audio\"===S?null:l,sendingVideo:E}))});let d=O(T);return new RTCSessionDescription({type:t,sdp:d})}",
        "getDirection": "function A(e){switch(e){case\"recvonly\":return\"sendonly\";case\"sendonly\":return\"recvonly\";case\"sendrecv\":return\"sendrecv\";default:return\"inactive\"}}",
        "getExtensions": "function f(e){return _()(e).split(/\\r\\n/).filter(e=>e.startsWith(\"a=extmap:\")).uniq().map(e=>{let t=e.split(\" \");return{value:parseInt(t[0].split(\"/\")[0].substr(9),10),uri:t[1]}}).value()}",
        "truncateSDP": "function m(e){let{codecs:t}=D(e),n=t.find(e=>e.name===T.Codecs.VP8),i=RegExp(`^a=ice|a=extmap|a=fingerprint|opus|VP8|${n?.rtxPayloadType??0} rtx`,\"i\");return{sdp:_()(e).split(/\\r\\n/).filter(e=>i.test(e)).uniq().join(\"\\n\"),codecs:t}}",
        "validateSdp": "function p(e){if(!e.includes(\"a=fingerprint\"))return d.error(\"Remote SDP does not include fingerprint!\"),!1;if(!e.includes(\"a=ice-ufrag\"))return d.error(\"Remote SDP does not include ICE user name!\"),!1;if(!e.includes(\"a=ice-pwd\"))return d.error(\"Remote SDP does not include ICE password!\"),!1;if(!e.includes(\"a=candidate\"))return d.error(\"Remote SDP does not include ICE candidate!\"),!1;if(!e.includes(\"c=\"))return d.error(\"Remote SDP does not include c-line!\"),!1;let t=e.split(\"\\n\").filter(e=>e.startsWith(\"c=\")).join().trim();return!(t.split(\" \").length<3)||(d.error(`Incorrect c-line: ${t}`),!1)}"
    }
}