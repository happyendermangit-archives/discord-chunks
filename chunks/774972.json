{
    "exports": {
        "default": "function(e,t,n){return null!=n&&n.forwardRef?function(e,t){return n=>{let s=`FluxContainer(${_(n)})`;class l extends r.Component{static #e=this.displayName=s;componentDidMount(){this.listener.attach(s)}componentWillUnmount(){this.listener.detach(),this.memoizedGetStateFromStores.clear()}render(){let{forwardedConnectStoresRef:e,childProps:t}=this.props,r=this.memoizedGetStateFromStores(t);return(0,i.jsx)(n,{ref:e,...t,...r})}constructor(...n){super(...n),this.memoizedGetStateFromStores=E(t),this.listener=new a.default(e,()=>{let e=this.memoizedGetStateFromStores.getCachedResult(this.props.childProps);if(!(null!=e&&(this.memoizedGetStateFromStores.clear(),(0,o.default)(this.memoizedGetStateFromStores(this.props.childProps),e))))this.forceUpdate()})}}let u=r.forwardRef((e,t)=>(0,i.jsx)(l,{childProps:e,forwardedConnectStoresRef:t}));return u.displayName=`ForwardRef(${s})`,u}}(e,t):function(e,t){return n=>{let s=`FluxContainer(${_(n)})`;class l extends r.Component{static #e=this.displayName=s;componentDidMount(){this.listener.attach(s)}componentWillUnmount(){this.listener.detach(),this.memoizedGetStateFromStores.clear()}render(){let e=this.memoizedGetStateFromStores(this.props);return(0,i.jsx)(n,{...this.props,...e})}constructor(...n){super(...n),this.memoizedGetStateFromStores=E(t),this.listener=new a.default(e,()=>{let e=this.memoizedGetStateFromStores.getCachedResult(this.props);if(!(null!=e&&(this.memoizedGetStateFromStores.clear(),(0,o.default)(this.memoizedGetStateFromStores(this.props),e))))this.forceUpdate()})}}return l}}(e,t)}"
    }
}