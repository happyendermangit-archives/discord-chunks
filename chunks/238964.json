{
    "exports": {
        "default": "class p extends o.default{_fileSize(){return this.files.reduce((e,t)=>e+=t.currentSize??0,0)}async compressAndCheckFileSize(){let e=(0,l.getUploadTarget)(this.files[0]?.item?.target);return this.files.length>e.getMaxAttachmentsCount()?(f.log(`Too many attachments for ${this.id}`),this._handleError({code:u.AbortCodes.TOO_MANY_ATTACHMENTS}),!1):!(this._fileSize()>e.getMaxTotalAttachmentSize())||(this._handleError({code:u.AbortCodes.ENTITY_TOO_LARGE,reason:{type:d.FileUploadErrorTypes.POSTCOMPRESSION_SUM_TOO_LARGE}}),!1)}_filesTooLarge(){return this.files.some(e=>e.error===u.AbortCodes.ENTITY_TOO_LARGE)}setUploadingTextForUI(){let e=1===this.files.length&&null!=this.files[0].filename?this.files[0].filename:c.default.Messages.UPLOADING_FILES.format({count:this.files.length}),t=this.files.some(e=>e.isImage),n=this.files.some(e=>e.isVideo),i=this._fileSize();f.log(`setUploadingTextForUI - total content: ${i} bytes and ${this.files.length} attachments for ${this.id}`),this._file={...this._file,totalPostCompressionSize:i,currentSize:i,name:e,hasVideo:n,hasImage:t,attachmentsCount:this.files.length,items:this.files}}_recomputeProgress(){let{loaded:e,total:t}=this._recomputeProgressTotal(),n=this._recomputeProgressByFile();this._handleProgress(e,t,n)}_recomputeProgressTotal(){let e=this._fileSize();return{loaded:this.files.reduce((e,t)=>e+=t.loaded??0,0),total:e}}_recomputeProgressByFile(){let e={};return this.files.forEach(t=>{e[t.id]=(0,r.calculateProgress)(t.loaded,t.currentSize)}),e}cancel(){f.log(`Cancel called for ${this.id}`),!this._aborted&&(this._aborted=!0,null!=this._cancel&&this._cancel(),this.files.forEach(e=>e.cancel()),this._handleComplete())}async cancelItem(e){f.log(`Cancel called for ${this.id} for item ${e}`);let t=this.files.find(t=>t.id===e);if(null==t||t.status===s.CloudUploadStatus.CANCELED)return;let n=this.files.indexOf(t);this.files=[...this.files.slice(0,n),...this.files.slice(n+1)],this._file={...this._file,items:this.files},await (0,a.cancelGetAttachmentFile)(t),t.cancel(),this.emit(\"cancel-upload-item\",this._file),0===this.files.length&&this.cancel()}failed(){return this.files.some(e=>e.status===s.CloudUploadStatus.ERROR)}_remainingUploadCount(){let e=this.files;return e.length-e.filter(e=>e.status===s.CloudUploadStatus.COMPLETED).length}clear(){this.cancel(),this.files=[]}constructor(...e){super(...e),this.files=[]}}",
        "stageAttachmentFiles": "async function m(e){let t=arguments.length>1&&void 0!==arguments[1]&&arguments[1],n=arguments.length>2?arguments[2]:void 0,i=e.map(e=>new Promise((i,a)=>{switch(e.status){case s.CloudUploadStatus.NOT_STARTED:e.upload();break;case s.CloudUploadStatus.COMPLETED:i(\"complete\");break;case s.CloudUploadStatus.ERROR:t&&e.error!==u.AbortCodes.ENTITY_TOO_LARGE?e.upload():a(Error(\"File failed to upload\"));break;case s.CloudUploadStatus.CANCELED:a(Error(\"Upload is canceled\"))}e.on(\"complete\",()=>{i(\"complete\")}),e.on(\"error\",()=>{a(Error(`File ${e.id} failed to upload`))}),e.on(\"progress\",(e,t)=>{n?.(e,t)})}));await Promise.all(i)}"
    }
}