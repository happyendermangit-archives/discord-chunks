{
    "exports": {
        "default": {
            "initializedCount": 0,
            "actions": {
                "POST_CONNECTION_OPEN": "()=>this._handleConnectionOpen()"
            },
            "stores": {
                "toJSON": "function(){return Array.from(this)}",
                "get": "function get() { [native code] }",
                "set": "function set() { [native code] }",
                "has": "function has() { [native code] }",
                "delete": "function delete() { [native code] }",
                "clear": "function clear() { [native code] }",
                "entries": "function entries() { [native code] }",
                "forEach": "function forEach() { [native code] }",
                "keys": "function keys() { [native code] }",
                "size": 0,
                "values": "function values() { [native code] }"
            },
            "_handleTestRegionsResponse": "e=>{let _=e.map(e=>e.region);if(i.default.shouldPerformLatencyTest(_)){let E=r.default.getMediaEngine();E.rankRtcRegions(e).then(e=>{S.verbose(\"RTC region latency test completed: \",e),(0,t.completeRTCLatencyTest)(e,_)}).catch(e=>S.warn(e))}else S.verbose(\"RTC cached preferred region is \".concat(i.default.getPreferredRegion()))}",
            "_fetchAndScheduleRefetch": "()=>{(0,t.fetchRTCLatencyTestRegions)().then(e=>this._handleTestRegionsResponse(e.body)).catch(e=>S.warn(e)),this.refetchTimeout=setTimeout(this._fetchAndScheduleRefetch,360*a.default.Millis.MINUTE)}",
            "_handleConnectionOpen": "()=>{I.isPlatformEmbedded&&!__OVERLAY__&&(null!=this.refetchTimeout&&clearTimeout(this.refetchTimeout),this.refetchTimeout=setTimeout(this._fetchAndScheduleRefetch,Math.floor(s+Math.random()*T)))}",
            "_terminate": "_terminate(){null!=this.refetchTimeout&&clearTimeout(this.refetchTimeout)}"
        }
    }
}