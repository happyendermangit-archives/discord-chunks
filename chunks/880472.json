{
    "exports": {
        "DeviceSettingsStore": "class I extends u{}",
        "OfflineCacheStore": "class T extends u{}",
        "default": "class l extends s.default{static #e=this.allPersistKeys=new Set;static #t=this.userAgnosticPersistKeys=new Set;static #n=this._writePromises=new Map;static #i=this._writeResolvers=new Map;static #r=this.disableWrites=!1;static #o=this.disableWrite=!1;static #a=this.throttleDelay=0;getClass(){return this.constructor}static clearAll(e){return E=e,null==l._clearAllPromise&&(l._clearAllPromise=new Promise(t=>{requestIdleCallback(()=>{l.clearPersistQueue(e),l.allPersistKeys.forEach(t=>{l.shouldClear(e,t)&&a.default.remove(t)}),s.default.getAll().forEach(t=>{t instanceof l&&l.shouldClear(e,t.getClass().persistKey)&&(t._isInitialized=!1,t.initializeIfNeeded())}),l._clearAllPromise=null,t()},{timeout:500})})),l._clearAllPromise}static shouldClear(e,t){return!e.omit?.includes(t)&&(\"all\"===e.type||\"user-data-only\"===e.type&&!l.userAgnosticPersistKeys.has(t))}static clearPersistQueue(e){l._writeResolvers.forEach((t,n)=>{let[i,r]=t;l.shouldClear(e,n)&&(l._writePromises.delete(n),l._writeResolvers.delete(n),cancelIdleCallback(r),i(!1))}),l._writePromises.clear(),l._writeResolvers.clear()}static getAllStates(){return Promise.all(Array.from(l._writePromises.values())).then(()=>{let e={};return l.allPersistKeys.forEach(t=>{e[t]=(a.default.get(t)??_)._state}),e})}static initializeAll(e){s.default.getAll().forEach(t=>{if(t instanceof l){let n=t.getClass().persistKey;e.hasOwnProperty(n)&&t.initializeFromState(e[n])}})}initializeFromState(e){this.initialize(e)&&this.asyncPersist(),this._isInitialized?this.emitChange():(l.allPersistKeys.add(this.getClass().persistKey),this._isInitialized=!0)}static destroy(){E=null,s.default.destroy(),l.clearPersistQueue({type:\"all\"}),l.allPersistKeys.clear(),l.userAgnosticPersistKeys.clear()}constructor(e,t){if(super(e,t),this._version=null==this.getClass().migrations?0:this.getClass().migrations.length,this.callback=e=>{let{persistKey:t}=this.getClass();this.persist(),l._writePromises.delete(t),l._writeResolvers.delete(t),e()},this.throttledCallback=r().throttle(e=>this.callback(e),this.getClass().throttleDelay,{leading:!1}),\"string\"!=typeof this.getClass().persistKey)throw Error(`${this.getClass().name} initialized without a \\`persistKey\\`. Add one so we know where to save your stuff!`);if(\"function\"!=typeof this.initialize)throw Error(`${this.getClass().name} initialized without an \\`initialize\\` method. Add one that accepts the initial cached state.`);if(\"function\"!=typeof this.getState)throw Error(`${this.getClass().name} initialized without a \\`getState\\` method. Add one that returns the full state of the store for persistance to work.`);this.addChangeListener(()=>this.asyncPersist())}initializeIfNeeded(){if(!this._isInitialized){let e=Date.now();l.allPersistKeys.add(this.getClass().persistKey);let{state:t,requiresPersist:n}=l.migrateAndReadStoreState(this.getClass().persistKey,this.getClass().migrations);this.initialize(t)&&this.asyncPersist(),n&&this.asyncPersist(),this._isInitialized=!0;let i=Date.now()-e;i>5&&o.default.mark(\"\\uD83E\\uDDA5\",this.getName()+\".initialize()\",i)}}static migrateAndReadStoreState(e,t){if(null!=E&&l.shouldClear(E,e))return a.default.remove(e),{state:void 0,requiresPersist:!1};let{_state:n,_version:i,...r}=(null!=l._clearAllPromise?null:a.default.get(e))??_,o=null==t?0:t.length;if(0!==o&&i!==o&&null!=t){let e=i??0,a=n;for(null==i&&(a=r);e<o;)a=(0,t[e])(a),e++;return{state:a,requiresPersist:!0}}if(Object.values(r).length>0)return{state:r,requiresPersist:!0};return{state:n,requiresPersist:!1}}asyncPersist(){let{persistKey:e,disableWrite:t,throttleDelay:n}=this.getClass();if(l.disableWrites||t)return Promise.resolve(!1);let i=l._writePromises.get(e);return null!=i?i:(i=new Promise(t=>{let i=n>0?()=>this.throttledCallback(t):()=>this.callback(t);l._writeResolvers.set(e,[t,requestIdleCallback(i,{timeout:500})])}),l._writePromises.set(e,i),i)}persist(){let{persistKey:e}=this.getClass(),t=this.getState(),n=this._version;a.default.set(e,{_state:t,_version:n})}clear(){let{persistKey:e}=this.getClass();a.default.remove(e)}}"
    }
}