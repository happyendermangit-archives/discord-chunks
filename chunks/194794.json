{
    "exports": {
        "CloudUpload": "class S extends p.default{static fromJson(e){let{item:t,channelId:n,showLargeMessageDialog:s,reactNativeFileIndex:i}=e,r=new S(t,n,s,i);return\"COMPLETED\"!==r.status&&(r.status=\"NOT_STARTED\"),Object.entries(e).forEach(e=>{let[t,n]=e;!t.startsWith(\"_\")&&(r[t]=n)}),r}constructor(e,t,n,s){super(e,n),this.RESUME_INCOMPLETE_CODES=[308],this.status=\"NOT_STARTED\",this.loaded=0,this.reactNativeFilePrepped=!1,this._aborted=!1,this.channelId=t,this.preCompressionSize=e.file?.size??0,this.currentSize=e.file?.size??0,this.reactNativeFileIndex=s,this._abortController=new AbortController}retryOpts(){return this.item.platform===p.UploadPlatform.REACT_NATIVE?{timeout:1*m.default.Millis.HOUR,backoff:new o.default(.5*m.default.Millis.SECOND,30*m.default.Millis.MINUTE),retries:12}:{timeout:1*m.default.Millis.HOUR,retries:12,backoff:new o.default}}async uploadFileToCloudAsChunks(e){if(null==this.responseUrl||\"\"===this.responseUrl)throw Error(\"_uploadFileToCloudAsChunks - responseUrl is not set\");let{contentType:t,fileSize:n,bufferedFileData:s}=await this.prepareChunkUploadItem(),i=Math.ceil(n/e);this.uploadStats={numChunks:i,totalRequestCount:0};for(let r=0;r<i;r++){I.info(`Uploading chunk ${r+1} of ${i} for file id ${this.id}`);let a=r*e,o=Math.min(a+e,n),u=await this.getChunk(a,o,s);try{await this.uploadChunk({chunk:u,start:a,end:o,totalSize:n,sessionUrl:this.responseUrl,contentType:t})}catch(e){throw I.error(`Error uploading chunk ${r+1} for file id ${this.id}: ${e}`),e}}I.log(`Upload complete for file id ${this.id}`)}async prepareChunkUploadItem(){let e,t,n;if(this.item.platform===p.UploadPlatform.REACT_NATIVE){let s=this.item;if(e=null!=s.mimeType&&\"\"!==s.mimeType?s.mimeType:\"application/octet-stream\",null==s.size||0===s.size||isNaN(s.size))try{t=await (0,E.getFileContentLength)(s.uri)}catch(e){I.warn(`Failed to peek content length for file id ${this.id}, reading whole file instead: ${e}`),t=(n=await (0,E.getFileData)(s.uri)).size}else t=s.size}else e=\"application/octet-stream\",t=this.item.file.size;return{contentType:e,fileSize:t,bufferedFileData:n}}async getChunk(e,t,n){return this.item.platform!==p.UploadPlatform.REACT_NATIVE?this.item.file.slice(e,t):null!=n?n.slice(e,t):await (0,E.getFileChunk)(this.item.uri,e,t)}async uploadChunk(e){let t={\"Content-Type\":e.contentType,\"Content-Range\":`bytes ${e.start}-${e.end-1}/${e.totalSize}`};for(let n=1;n<=3;n++){null!=this.uploadStats&&(this.uploadStats.totalRequestCount+=1),I.log(`Attempt ${n} for file id ${this.id} : Uploading chunk ${e.start}-${e.end-1} of ${e.totalSize} bytes`);let s=a().throttle(t=>{let n=e.start+t.loaded;this.emit(\"progress\",n,e.totalSize,n-this.loaded),this.loaded=n},50);try{if((await u.default.put({url:e.sessionUrl,body:e.chunk,headers:t,signal:this._abortController.signal,onRequestProgress:s,...this.retryOpts()})).ok)return}catch(t){if(!this.RESUME_INCOMPLETE_CODES.includes(t.status))throw t;if(this.isUnsuccessfulChunkUpload(t,e.end-1)){I.error(`Incomplete chunk upload for file id ${this.id}: ${t.status}`);continue}return}}throw Error(\"Failed to upload chunk\")}isUnsuccessfulChunkUpload(e,t){if(null==e.headers.range||\"\"===e.headers.range)return!0;let n=e.headers.range.match(/bytes=(\\d+)-(\\d+)/);return null!==n&&parseInt(n[2],10)!==t}uploadFileToCloud(){let e,t;if(null==this.responseUrl)throw Error(\"_uploadFileToCloud - responseUrl is not set\");I.log(`Uploading ${this.id}`),this.item.platform===p.UploadPlatform.REACT_NATIVE?t=null!=(e={type:this.item.mimeType,uri:this.item.uri,name:this.item.filename}).type&&\"application/json\"!==e.type?e.type:\"application/octet-stream\":(e=this.item.file,t=\"application/octet-stream\");let n=a().throttle(e=>{this.emit(\"progress\",e.loaded,e.total,e.loaded-this.loaded),this.loaded=e.loaded},50),s={\"Content-Type\":t};return u.default.put({url:this.responseUrl,body:e,headers:s,signal:this._abortController.signal,onRequestProgress:n,...this.retryOpts()})}async getSize(){return this.currentSize??0}async upload(){if(\"COMPLETED\"===this.status)return;if(this.setStatus(\"STARTED\"),this.startTime=new Date,this.trackUploadStart(),\"CANCELED\"===this.status){this.handleComplete(this.id);return}let e=await T.getUploadPayload(this),t=(0,v.getUploadTarget)(this.item.target);if(null==e.filename||\"\"===e.filename||0===this.currentSize){I.error(\"File does not have a filename or size is 0.\",JSON.stringify(e)),this.handleError(y.AbortCodes.INVALID_FILE_ASSET);return}if((this.currentSize??0)>t.getMaxFileSize(this.channelId)){this.handleError(y.AbortCodes.ENTITY_TOO_LARGE);return}if(l.default.get(\"upload_fail_50\")&&.5>Math.random()){setTimeout(()=>{this.handleError(500)},1e3);return}try{I.log(`Requesting upload url for ${this.id}`);let n=await u.default.post({url:t.getCreateAttachmentURL(this.channelId),body:{files:[e]},...this.retryOpts()});this.setResponseUrl(n.body.attachments[0].upload_url),this.setUploadedFilename(n.body.attachments[0].upload_filename)}catch(t){let e=t?.body?.code??t.status;e!==y.AbortCodes.ENTITY_TOO_LARGE&&(I.error(`Requesting upload url failed with code ${e??JSON.stringify(t.body)} for ${this.id}`),h.default.captureException(t)),this.handleError(e);return}try{let e;let t=f.default.getCurrentConfig({location:\"CloudUpload\"},{autoTrackExposure:!0});e=t.enabled&&t.chunkSize>0?await this.uploadFileToCloudAsChunks(t.chunkSize):await this.uploadFileToCloud(),this.trackUploadFinished(\"COMPLETED\"),this.handleComplete(e)}catch(e){\"CANCELED\"===this.status?this.handleComplete(e):(I.info(`Error: status ${e.status} for ${this.id}`),this.handleError(e))}}async reactNativeCompressAndExtractData(){if(!(0,v.getUploadTarget)(this.item.target).shouldReactNativeCompressUploads){I.log(\"reactNativeCompressAndExtractData() disabled by upload target\");return}if(!0===this.reactNativeFilePrepped){I.log(`reactNativeCompressAndExtractData() file already prepped - ${this.id}`);return}I.log(`Starting compression/conversion for ${this.id}`);let e=await (0,g.getAttachmentFile)(this,this.reactNativeFileIndex??0);if(null==e||null==e.file)return;let t=e.uri,n=e.file.name,s=e.file.type;if(this.filename=n,null==n||null==t||null==s)throw I.error(`Insufficient file data: [object Object] for ${this.id}`),Error(\"Insufficient file data: [object Object]\");let i=e.fileSize??(await (0,E.getFileData)(t)).size;if(this.postCompressionSize=i,this.currentSize=i,null==i)throw I.error(`Size missing from file data for ${this.id}`),Error(\"Size missing from file data\");I.log(`Completed compression and conversion. Output size=${i} bytes; filename=${n} for ${this.id}`);this.item={...this.item,uri:t,filename:n,mimeType:s},this.reactNativeFilePrepped=!0}handleError(e){this.setStatus(\"ERROR\"),this.error=e,this.trackUploadFinished(\"ERROR\");try{this.emit(\"error\",e)}catch{}this.removeAllListeners()}handleComplete(e){this.setStatus(\"COMPLETED\"),I.log(`Upload complete for ${this.id}`),this.emit(\"complete\",e),this.removeAllListeners()}cancel(){I.log(`Cancelled called for ${this.id}`),this._abortController.abort(),this.trackUploadFinished(\"CANCELED\"),\"COMPLETED\"===this.status&&this.delete(),this.setStatus(\"CANCELED\"),this.emit(\"complete\"),this.removeAllListeners()}resetState(){return this.status=\"NOT_STARTED\",this.uploadedFilename=void 0,this.responseUrl=void 0,this.error=void 0,this.startTime=void 0,this.uploadStats=void 0,this._abortController=new AbortController,super.resetState()}async delete(){if(null==this.uploadedFilename)return;let e=(0,v.getUploadTarget)(this.item.target).getDeleteUploadURL(this.uploadedFilename);try{await u.default.delete(e)}catch{}}setResponseUrl(e){this.responseUrl=e}setStatus(e){this.status=e}setFilename(e){this.filename=e}setUploadedFilename(e){this.uploadedFilename=e}trackUploadStart(){c.default.track(y.AnalyticEvents.ATTACHMENT_UPLOAD_STARTED,{file_size:this.currentSize,mime_type:this.mimeType??\"unknown\",video_upload_quality:_.default.videoUploadQuality,data_saving_mode:_.default.dataSavingMode,low_quality_image_mode:_.default.lowQualityImageMode})}trackUploadFinished(e){let t=null!=this.startTime?Date.now()-this.startTime.getTime():-1,n=null,s=1;null!=this.uploadStats&&(n=this.uploadStats.numChunks,s=this.uploadStats.totalRequestCount),c.default.track(y.AnalyticEvents.ATTACHMENT_UPLOAD_FINISHED,{duration_ms:t,file_size:this.currentSize,pre_compression_file_size:this.preCompressionSize,final_state:e,mime_type:this.mimeType??\"unknown\",num_chunks:n,num_upload_attempts:s,error_code:this.error,video_upload_quality:_.default.videoUploadQuality,data_saving_mode:_.default.dataSavingMode,low_quality_image_mode:_.default.lowQualityImageMode})}}",
        "CloudUploadStatus": {
            "NOT_STARTED": "NOT_STARTED",
            "STARTED": "STARTED",
            "UPLOADING": "UPLOADING",
            "ERROR": "ERROR",
            "COMPLETED": "COMPLETED",
            "CANCELED": "CANCELED"
        }
    }
}