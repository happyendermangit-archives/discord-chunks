{
    "exports": {
        "default": {
            "initializedCount": 0,
            "actions": {
                "QUESTS_ENROLL_SUCCESS": "e=>{let{enrolledQuestUserStatus:{questId:_}}=e,E=c();if(null==E||E.id!==_)return;let t=n.default.getCurrentUserActiveStream();null!=t&&this.initiateHeartbeat({streamKey:(0,o.encodeStreamKey)(t),applicationId:E.config.applicationId,questId:E.id})}",
                "QUESTS_SEND_HEARTBEAT_SUCCESS": "e=>{let{streamKey:_,userStatus:E}=e;null!=E.completedAt&&this.terminateHeartbeat(_)}",
                "POST_CONNECTION_OPEN": "()=>{if(0===O.default.lastFetchedCurrentQuests)window.setTimeout(this.maybeFetchCurrentQuests,Math.floor(Math.random()*u))}",
                "RUNNING_GAMES_CHANGE": "()=>{!(this.instantiatedAt+L>Date.now()||O.default.lastFetchedCurrentQuests+L>Date.now())&&this.maybeFetchCurrentQuests()}",
                "STREAM_START": "e=>{var _;let{streamType:E,guildId:t,channelId:a}=e,s=c();if(null==s)return;(0,T.trackQuestEvent)(s.id,l.AnalyticEvents.QUEST_STREAMING_STARTED,{media_session_id:I.default.getMediaSessionId(),channel_type:null===(_=i.default.getChannel(a))||void 0===_?void 0:_.type,guild_id:t});let S=(0,o.encodeStreamKey)({streamType:E,guildId:t,channelId:a,ownerId:r.default.getId()});0!==n.default.getViewerIds(S).length&&this.initiateHeartbeat({streamKey:S,applicationId:s.config.applicationId,questId:s.id})}",
                "STREAM_CLOSE": "e=>{let{streamKey:_}=e;this.terminateHeartbeat(_)}",
                "STREAM_UPDATE": "e=>{let{streamKey:_,viewerIds:E}=e,t=c();if(null!=t){if(0===E.length){this.sendHeartbeatTimeoutIds.has(_)&&((0,S.sendHeartbeat)({questId:t.id,streamKey:_,applicationId:t.config.applicationId}),this.terminateHeartbeat(_));return}this.initiateHeartbeat({streamKey:_,applicationId:t.config.applicationId,questId:t.id})}}"
            },
            "stores": {
                "toJSON": "function(){return Array.from(this)}",
                "get": "function get() { [native code] }",
                "set": "function set() { [native code] }",
                "has": "function has() { [native code] }",
                "delete": "function delete() { [native code] }",
                "clear": "function clear() { [native code] }",
                "entries": "function entries() { [native code] }",
                "forEach": "function forEach() { [native code] }",
                "keys": "function keys() { [native code] }",
                "size": 0,
                "values": "function values() { [native code] }"
            },
            "instantiatedAt": 1709316457574,
            "sendHeartbeatTimeoutIds": {
                "toJSON": "function(){return Array.from(this)}",
                "get": "function get() { [native code] }",
                "set": "function set() { [native code] }",
                "has": "function has() { [native code] }",
                "delete": "function delete() { [native code] }",
                "clear": "function clear() { [native code] }",
                "entries": "function entries() { [native code] }",
                "forEach": "function forEach() { [native code] }",
                "keys": "function keys() { [native code] }",
                "size": 0,
                "values": "function values() { [native code] }"
            },
            "initiateHeartbeat": "e=>{let{questId:_,streamKey:E,applicationId:t}=e;window.clearTimeout(this.sendHeartbeatTimeoutIds.get(E));let o=()=>{(null!=n.default.getRTCStream(E)||n.default.getViewerIds(E).length>0)&&(0,S.sendHeartbeat)({questId:_,streamKey:E,applicationId:t});let e=this.calculateHeartbeatDurationMs(t);this.sendHeartbeatTimeoutIds.set(E,window.setTimeout(o,e))};o()}",
            "calculateHeartbeatDurationMs": "e=>{let _=O.default.quests.get(e);if(null==_||null==_.config||null==_.userStatus)return C;let{streamProgressSeconds:E}=_.userStatus,t=60*_.config.streamDurationRequirementMinutes;return t-E<=.1*t?D:C}",
            "terminateHeartbeat": "e=>{window.clearTimeout(this.sendHeartbeatTimeoutIds.get(e)),this.sendHeartbeatTimeoutIds.delete(e)}",
            "handleEnrollmentSuccess": "e=>{let{enrolledQuestUserStatus:{questId:_}}=e,E=c();if(null==E||E.id!==_)return;let t=n.default.getCurrentUserActiveStream();null!=t&&this.initiateHeartbeat({streamKey:(0,o.encodeStreamKey)(t),applicationId:E.config.applicationId,questId:E.id})}",
            "handlePostConnectionOpen": "()=>{if(0===O.default.lastFetchedCurrentQuests)window.setTimeout(this.maybeFetchCurrentQuests,Math.floor(Math.random()*u))}",
            "handleSendHeartbeatSuccess": "e=>{let{streamKey:_,userStatus:E}=e;null!=E.completedAt&&this.terminateHeartbeat(_)}",
            "handleRunningGamesChange": "()=>{!(this.instantiatedAt+L>Date.now()||O.default.lastFetchedCurrentQuests+L>Date.now())&&this.maybeFetchCurrentQuests()}",
            "handleStreamUpdate": "e=>{let{streamKey:_,viewerIds:E}=e,t=c();if(null!=t){if(0===E.length){this.sendHeartbeatTimeoutIds.has(_)&&((0,S.sendHeartbeat)({questId:t.id,streamKey:_,applicationId:t.config.applicationId}),this.terminateHeartbeat(_));return}this.initiateHeartbeat({streamKey:_,applicationId:t.config.applicationId,questId:t.id})}}",
            "handleStreamStart": "e=>{var _;let{streamType:E,guildId:t,channelId:a}=e,s=c();if(null==s)return;(0,T.trackQuestEvent)(s.id,l.AnalyticEvents.QUEST_STREAMING_STARTED,{media_session_id:I.default.getMediaSessionId(),channel_type:null===(_=i.default.getChannel(a))||void 0===_?void 0:_.type,guild_id:t});let S=(0,o.encodeStreamKey)({streamType:E,guildId:t,channelId:a,ownerId:r.default.getId()});0!==n.default.getViewerIds(S).length&&this.initiateHeartbeat({streamKey:S,applicationId:s.config.applicationId,questId:s.id})}",
            "handleStreamClose": "e=>{let{streamKey:_}=e;this.terminateHeartbeat(_)}",
            "maybeFetchCurrentQuests": "maybeFetchCurrentQuests(){(0,N.getIsEligibleForQuests)({location:R.QuestsExperimentLocations.QUESTS_MANAGER,autoTrackExposure:!1})&&!O.default.isFetchingCurrentQuests&&(0,S.fetchCurrentQuests)()}"
        }
    }
}