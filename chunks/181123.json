{
    "exports": {
        "default": {
            "joinGuild": "async function k(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},{source:s,loadId:i,lurkLocation:o}=t,u=t.lurker??!1,d=C.default.getCurrentUser();if(d?.hasFlag(P.UserFlags.QUARANTINED))return(0,g.default)(),new Promise((e,t)=>t(Error()));a.default.wait(()=>a.default.dispatch({type:\"GUILD_JOIN\",guildId:e,lurker:u,source:s,loadId:i}));try{let t=S.default.getGuildId(),d=e===t&&null!=I.default.getGuild(e)?T.default.getChannelId(e):null,l=await r.default.put({url:P.Endpoints.GUILD_JOIN(e),query:{lurker:u,session_id:u?E.default.getSessionId():null,recommendation_load_id:i,location:u&&null!=o?o:null},context:{source:s},oldFormErrors:!0,body:{}});if(null!=l.body.join_request&&a.default.dispatch({type:\"USER_GUILD_JOIN_REQUEST_UPDATE\",guildId:e,request:l.body.join_request}),null==I.default.getGuild(e)&&l.body.show_verification_form)return(0,m.transitionTo)(P.Routes.GUILD_MEMBER_VERIFICATION(e)),l;if(null!=l.body.welcome_screen&&a.default.dispatch({type:\"WELCOME_SCREEN_UPDATE\",guildId:l.body.id,welcomeScreen:l.body.welcome_screen}),null!=l.body.approximate_presence_count&&a.default.dispatch({type:\"ONLINE_GUILD_MEMBER_COUNT_UPDATE\",guildId:l.body.id,count:l.body.approximate_presence_count}),!u){let{default:t}=await n.el(\"181123@5157:5214\").then(n.bind(n,\"329547\"));await t({guildId:e,returnChannelId:d})}return l}catch(t){if(t.body?.code===P.AbortCodes.TOO_MANY_USER_GUILDS){let e=C.default.getCurrentUser();D.default.canUseIncreasedGuildCap(e)||e?.isStaff()?M(P.MAX_USER_GUILDS_PREMIUM):M(P.MAX_USER_GUILDS)}throw t.body?.code===P.AbortCodes.GUILD_AT_CAPACITY&&L(),u&&t.body?.code===P.AbortCodes.UNKNOWN_GUILD&&V(e),t}}",
            "waitForGuild": "function w(e){return new Promise(t=>I.default.addConditionalChangeListener(()=>{let n=I.default.getGuild(e);return null==n||(t(n),!1)}))}",
            "transitionToGuildSync": "async transitionToGuildSync(e,t,n,s){var i,r;let a=(i=(await w(e)).id,null!=(r=n)?r:!(0,l.isInMainTabsExperiment)()||(0,c.isOnNewPanels)()?(0,h.getChannelIdForGuildTransition)(i):void 0),o=t;t?.hasOwnProperty(\"welcomeModalChannelId\")&&null==t.welcomeModalChannelId&&(o={...t,welcomeModalChannelId:a}),(0,m.transitionTo)(P.Routes.CHANNEL(e,a),o,void 0,s),await new Promise(setImmediate)}",
            "deleteGuild": "e=>{a.default.dispatch({type:\"GUILD_DELETE\",guild:{id:e}})}",
            "selectGuild": "selectGuild(e){(0,d.stopLurking)(e)}",
            "createGuild": "createGuild(e){a.default.dispatch({type:\"GUILD_CREATE\",guild:e})}",
            "setServerMute": "(e,t,n)=>r.default.patch({url:P.Endpoints.GUILD_MEMBER(e,t),body:{mute:n},oldFormErrors:!0})",
            "setServerDeaf": "(e,t,n)=>r.default.patch({url:P.Endpoints.GUILD_MEMBER(e,t),body:{deaf:n},oldFormErrors:!0})",
            "setChannel": "setChannel(e,t,n){r.default.patch({url:P.Endpoints.GUILD_MEMBER(e,t),body:{channel_id:n},oldFormErrors:!0})}",
            "setMemberFlags": "setMemberFlags(e,t,n){r.default.patch({url:P.Endpoints.GUILD_MEMBER(e,t),body:{flags:n},oldFormErrors:!0})}",
            "kickUser": "(e,t,n)=>r.default.delete({url:P.Endpoints.GUILD_MEMBER(e,t),reason:n,oldFormErrors:!0})",
            "setCommunicationDisabledUntil": "setCommunicationDisabledUntil(e){let{guildId:t,userId:n,communicationDisabledUntilTimestamp:i,duration:r,reason:a,location:o}=e;return O.default.patch({url:P.Endpoints.GUILD_MEMBER(t,n),reason:a,body:{communication_disabled_until:i},oldFormErrors:!0,trackedActionData:{event:s.NetworkActionNames.USER_COMMUNICATION_DISABLED_UPDATE,properties:{guild_id:t,target_user_id:n,duration:null!=r?r:null,reason:null!=a?a:null,communication_disabled_until:i,location:null!=o?o:null}}})}",
            "banUser": "(e,t,n,s)=>r.default.put({url:P.Endpoints.GUILD_BAN(e,t),reason:s,body:{delete_message_seconds:n},oldFormErrors:!0})",
            "unbanUser": "(e,t)=>r.default.delete({url:P.Endpoints.GUILD_BAN(e,t),oldFormErrors:!0})",
            "banMultipleUsers": "(e,t,n,s)=>r.default.post({url:P.Endpoints.BULK_GUILD_BAN(e),body:{user_ids:t,delete_message_seconds:n,reason:s},oldFormErrors:!0})",
            "createRole": "async createRole(e,t,n){let s={name:null!=t&&\"\"!==t?t:b.default.Messages.NEW_ROLE,color:n??0,permissions:N.default.NONE};try{let t=await r.default.post({url:P.Endpoints.GUILD_ROLES(e),oldFormErrors:!0,body:s}),n=t.body;return n.permissions=i.default.deserialize(n.permissions),a.default.dispatch({type:\"GUILD_SETTINGS_ROLE_SELECT\",roleId:t.body.id,role:n}),u.default.checkGuildTemplateDirty(e),n}catch(e){throw new o.default(e)}}",
            "updateRole": "async updateRole(e,t,n){let{icon:s,unicodeEmoji:i,...a}=n,o=null===s||s?.startsWith(\"data:\")?s:void 0,d=await r.default.patch({url:P.Endpoints.GUILD_ROLE(e,t),body:{...a,icon:o,unicode_emoji:i},oldFormErrors:!0});return u.default.checkGuildTemplateDirty(e),d}",
            "updateRolePermissions": "(e,t,n)=>r.default.patch({url:P.Endpoints.GUILD_ROLE(e,t),body:{permissions:n},oldFormErrors:!0})",
            "deleteRole": "deleteRole(e,t){r.default.delete({url:P.Endpoints.GUILD_ROLE(e,t),oldFormErrors:!0}).then(()=>{u.default.checkGuildTemplateDirty(e)})}",
            "batchChannelUpdate": "async batchChannelUpdate(e,t){let n=await r.default.patch({url:P.Endpoints.GUILD_CHANNELS(e),body:t,oldFormErrors:!0});return u.default.checkGuildTemplateDirty(e),n}",
            "batchRoleUpdate": "async batchRoleUpdate(e,t){let n=await r.default.patch({url:P.Endpoints.GUILD_ROLES(e),body:t,oldFormErrors:!0});return u.default.checkGuildTemplateDirty(e),n}",
            "requestMembers": "requestMembers(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:\"\",n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:10,s=!(arguments.length>3)||void 0===arguments[3]||arguments[3];return a.default.dispatch({type:\"GUILD_MEMBERS_REQUEST\",guildIds:Array.isArray(e)?e:[e],query:t,limit:n,presences:s})}",
            "searchRecentMembers": "searchRecentMembers(e,t){let{query:n,continuationToken:s}=t??{};return a.default.dispatch({type:\"GUILD_SEARCH_RECENT_MEMBERS\",guildId:e,query:n,continuationToken:s})}",
            "requestMembersById": "requestMembersById(e,t){let n=!(arguments.length>2)||void 0===arguments[2]||arguments[2];return a.default.dispatch({type:\"GUILD_MEMBERS_REQUEST\",guildIds:Array.isArray(e)?e:[e],userIds:Array.isArray(t)?t:[t],presences:n})}",
            "move": "move(e,t,n,s){a.default.dispatch({type:\"GUILD_MOVE\",fromIndex:e,toIndex:t,fromFolderIndex:n,toFolderIndex:s})}",
            "moveById": "moveById(e,t){let n=arguments.length>2&&void 0!==arguments[2]&&arguments[2],s=arguments.length>3&&void 0!==arguments[3]&&arguments[3];a.default.dispatch({type:\"GUILD_MOVE_BY_ID\",sourceId:e,targetId:t,moveToBelow:n,combine:s})}",
            "createGuildFolderLocal": "createGuildFolderLocal(e,t){A.default.track(P.AnalyticEvents.GUILD_FOLDER_CREATED),a.default.dispatch({type:\"GUILD_FOLDER_CREATE_LOCAL\",sourceIds:e,name:t})}",
            "editGuildFolderLocal": "editGuildFolderLocal(e,t,n){a.default.dispatch({type:\"GUILD_FOLDER_EDIT_LOCAL\",targetId:e,sourceIds:t,name:n})}",
            "deleteGuildFolderLocal": "deleteGuildFolderLocal(e){a.default.dispatch({type:\"GUILD_FOLDER_DELETE_LOCAL\",targetId:e})}",
            "toggleGuildFolderExpand": "toggleGuildFolderExpand(e){let t=v.default.isFolderExpanded(e);A.default.track(P.AnalyticEvents.GUILD_FOLDER_CLICKED,{source:\"sidebar\",action:t?\"collapsed\":\"expanded\"}),a.default.dispatch({type:\"TOGGLE_GUILD_FOLDER_EXPAND\",folderId:e})}",
            "setGuildFolderExpanded": "setGuildFolderExpanded(e,t){a.default.dispatch({type:\"SET_GUILD_FOLDER_EXPANDED\",folderId:e,expanded:t})}",
            "collapseAllFolders": "collapseAllFolders(){a.default.dispatch({type:\"GUILD_FOLDER_COLLAPSE\"})}",
            "nsfwAgree": "nsfwAgree(e){a.default.dispatch({type:\"GUILD_NSFW_AGREE\",guildId:e})}",
            "nsfwReturnToSafety": "nsfwReturnToSafety(e){if((0,l.isInMainTabsExperiment)()&&!(0,c.isOnNewPanels)()){let e=(0,f.getRootNavigationRef)();if(e?.isReady()!==!0)return;for(null!=(0,_.coerceModalRoute)(e.getCurrentRoute())&&e.goBack();;){let t=(0,_.coerceChannelRoute)(e.getCurrentRoute());if(null==t)break;let n=p.default.getChannel(t.params.channelId);if(null==n||!n.isNSFW())break;e.goBack()}return}if(null==e){(0,m.transitionTo)(P.Routes.FRIENDS);return}let t=y.default.getDefaultChannel(e);null==t||t.isNSFW()?(0,m.transitionTo)(P.Routes.FRIENDS):(0,m.transitionTo)(P.Routes.CHANNEL(e,t.id))}",
            "escapeToDefaultChannel": "escapeToDefaultChannel(e){let t=y.default.getDefaultChannel(e);null!=t?(0,m.transitionTo)(P.Routes.CHANNEL(e,t.id)):(0,m.transitionTo)(P.Routes.FRIENDS)}",
            "fetchApplications": "async fetchApplications(e,t){let n={url:P.Endpoints.GUILD_APPLICATIONS(e),oldFormErrors:!0};null!=t&&(n.query={channel_id:t});let s=(await r.default.get(n)).body;a.default.dispatch({type:\"GUILD_APPLICATIONS_FETCH_SUCCESS\",guildId:e,applications:s})}",
            "fetchGuildBansBatch": "async fetchGuildBansBatch(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:1e3,n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:null,s={limit:t};null!=n&&(s.after=n),await r.default.get({url:P.Endpoints.GUILD_BANS(e),oldFormErrors:!0,query:s}).then(t=>{a.default.dispatch({type:\"GUILD_SETTINGS_LOADED_BANS_BATCH\",bans:t.body,guildId:e})})}",
            "searchGuildBans": "async searchGuildBans(e,t,n){let s=arguments.length>3&&void 0!==arguments[3]?arguments[3]:10,i={limit:s};null!=n&&n.length>0&&(i.user_ids=n),null!=t&&t.trim().length>0&&(i.query=t),await r.default.get({url:P.Endpoints.GUILD_BANS_SEARCH(e),oldFormErrors:!0,query:i}).then(t=>{a.default.dispatch({type:\"GUILD_SETTINGS_LOADED_BANS_BATCH\",bans:t.body,guildId:e})})}",
            "fetchGuildBans": "async fetchGuildBans(e){await r.default.get({url:P.Endpoints.GUILD_BANS(e),oldFormErrors:!0}).then(e=>{a.default.dispatch({type:\"GUILD_SETTINGS_LOADED_BANS\",bans:e.body})})}",
            "fetchGuildRoleConnectionsEligibility": "(e,t)=>r.default.get({url:P.Endpoints.GUILD_ROLE_CONNECTIONS_ELIGIBILITY(e,t),oldFormErrors:!0}).then(e=>{let{body:n}=e;return a.default.dispatch({type:\"GUILD_ROLE_CONNECTION_ELIGIBILITY_FETCH_SUCCESS\",roleId:t,roleConnectionEligibility:n}),n})",
            "assignGuildRoleConnection": "async assignGuildRoleConnection(e,t){await r.default.post({url:P.Endpoints.GUILD_ROLE_CONNECTIONS_ASSIGN(e,t),oldFormErrors:!0})}",
            "unassignGuildRoleConnection": "async unassignGuildRoleConnection(e,t){await r.default.post({url:P.Endpoints.GUILD_ROLE_CONNECTIONS_UNASSIGN(e,t),oldFormErrors:!0})}",
            "getGuildRoleConnectionsConfigurations": "async e=>(await r.default.get({url:P.Endpoints.GUILD_ROLE_CONNECTIONS_CONFIGURATIONS(e),oldFormErrors:!0})).body"
        },
        "waitForGuild": "function w(e){return new Promise(t=>I.default.addConditionalChangeListener(()=>{let n=I.default.getGuild(e);return null==n||(t(n),!1)}))}"
    }
}