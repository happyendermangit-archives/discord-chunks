{
    "exports": {
        "Replay": "class e${static __initStatic(){this.id=\"Replay\"}__init(){this.name=e$.id}get _isInitialized(){return eX}set _isInitialized(t){eX=t}setupOnce(){eV()&&(this._setup(),setTimeout(()=>this._initialize()))}start(){this._replay&&this._replay.start()}startBuffering(){this._replay&&this._replay.startBuffering()}stop(){return this._replay?this._replay.stop():Promise.resolve()}flush(t){return this._replay&&this._replay.isEnabled()?this._replay.sendBufferedReplayOrFlush(t):Promise.resolve()}getReplayId(){if(this._replay&&this._replay.isEnabled())return this._replay.getSessionId()}_initialize(){this._replay&&this._replay.initializeSampling()}_setup(){let t=function(t){let e=(0,T.getCurrentHub)().getClient(),n=e&&e.getOptions(),r={sessionSampleRate:0,errorSampleRate:0,...(0,k.dropUndefinedKeys)(t)};return n?(null==t.sessionSampleRate&&null==t.errorSampleRate&&null==n.replaysSessionSampleRate&&null==n.replaysOnErrorSampleRate&&console.warn(\"Replay is disabled because neither `replaysSessionSampleRate` nor `replaysOnErrorSampleRate` are set.\"),\"number\"==typeof n.replaysSessionSampleRate&&(r.sessionSampleRate=n.replaysSessionSampleRate),\"number\"==typeof n.replaysOnErrorSampleRate&&(r.errorSampleRate=n.replaysOnErrorSampleRate),r):(console.warn(\"SDK client is not available.\"),r)}(this._initialOptions);this._replay=new eq({options:t,recordingOptions:this._recordingOptions})}constructor({flushMinDelay:t=5e3,flushMaxDelay:e=5500,minReplayDuration:n=4999,stickySession:r=!0,useCompression:i=!0,_experiments:a={},sessionSampleRate:s,errorSampleRate:o,maskAllText:c=!0,maskAllInputs:l=!0,blockAllMedia:u=!0,mutationBreadcrumbLimit:d=750,mutationLimit:h=1e4,slowClickTimeout:f=7e3,slowClickIgnoreSelectors:p=[],networkDetailAllowUrls:_=[],networkDetailDenyUrls:g=[],networkCaptureBodies:m=!0,networkRequestHeaders:y=[],networkResponseHeaders:v=[],mask:E=[],unmask:b=[],block:S=[],unblock:w=[],ignore:T=[],maskFn:k,beforeAddRecordingEvent:R,blockClass:x,blockSelector:D,maskInputOptions:N,maskTextClass:I,maskTextSelector:C,ignoreClass:O}={}){if(e$.prototype.__init.call(this),this._recordingOptions={maskAllInputs:l,maskAllText:c,maskInputOptions:{...N||{},password:!0},maskTextFn:k,maskInputFn:k,...function(t){let{mask:e,unmask:n,block:r,unblock:i,ignore:a,blockClass:s,blockSelector:o,maskTextClass:c,maskTextSelector:l,ignoreClass:u}=t,d=eZ(e,[\".sentry-mask\",\"[data-sentry-mask]\"],c,l),h=eZ(n,[\".sentry-unmask\",\"[data-sentry-unmask]\"]),f={maskTextSelector:d,unmaskTextSelector:h,maskInputSelector:d,unmaskInputSelector:h,blockSelector:eZ(r,[\".sentry-block\",\"[data-sentry-block]\",'base[href=\"/\"]'],s,o),unblockSelector:eZ(i,[\".sentry-unblock\",\"[data-sentry-unblock]\"]),ignoreSelector:eZ(a,[\".sentry-ignore\",\"[data-sentry-ignore]\",'input[type=\"file\"]'],u)};return s instanceof RegExp&&(f.blockClass=s),c instanceof RegExp&&(f.maskTextClass=c),f}({mask:E,unmask:b,block:S,unblock:w,ignore:T,blockClass:x,blockSelector:D,maskTextClass:I,maskTextSelector:C,ignoreClass:O}),slimDOMOptions:\"all\",inlineStylesheet:!0,inlineImages:!1,collectFonts:!0},this._initialOptions={flushMinDelay:t,flushMaxDelay:e,minReplayDuration:Math.min(n,15e3),stickySession:r,sessionSampleRate:s,errorSampleRate:o,useCompression:i,blockAllMedia:u,maskAllInputs:l,maskAllText:c,mutationBreadcrumbLimit:d,mutationLimit:h,slowClickTimeout:f,slowClickIgnoreSelectors:p,networkDetailAllowUrls:_,networkDetailDenyUrls:g,networkCaptureBodies:m,networkRequestHeaders:eQ(y),networkResponseHeaders:eQ(v),beforeAddRecordingEvent:R,_experiments:a},\"number\"==typeof s&&(console.warn(\"[Replay] You are passing `sessionSampleRate` to the Replay integration.\\nThis option is deprecated and will be removed soon.\\nInstead, configure `replaysSessionSampleRate` directly in the SDK init options, e.g.:\\nSentry.init({ replaysSessionSampleRate: \".concat(s,\" })\")),this._initialOptions.sessionSampleRate=s),\"number\"==typeof o&&(console.warn(\"[Replay] You are passing `errorSampleRate` to the Replay integration.\\nThis option is deprecated and will be removed soon.\\nInstead, configure `replaysOnErrorSampleRate` directly in the SDK init options, e.g.:\\nSentry.init({ replaysOnErrorSampleRate: \".concat(o,\" })\")),this._initialOptions.errorSampleRate=o),this._initialOptions.blockAllMedia&&(this._recordingOptions.blockSelector=this._recordingOptions.blockSelector?\"\".concat(this._recordingOptions.blockSelector,\",\").concat(eK):eK),this._isInitialized&&eV())throw Error(\"Multiple Sentry Session Replay instances are not supported\");this._isInitialized=!0}}"
    }
}