{
    "exports": {
        "reactParserFor": "reactParserFor(e){let t=l.parserFor(e),r=l.reactFor(l.ruleOutput(e,\"react\"));return function(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:\"\",n=!(arguments.length>1)||void 0===arguments[1]||arguments[1],l=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},i=arguments.length>3&&void 0!==arguments[3]?arguments[3]:null;return r(a(t,e,n,l,i),l)}}",
        "astParserFor": "astParserFor(e){let t=l.parserFor(e);return function(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:\"\",r=!(arguments.length>1)||void 0===arguments[1]||arguments[1],n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},l=arguments.length>3&&void 0!==arguments[3]?arguments[3]:null;return a(t,e,r,n,l)}}",
        "astToString": "function l(e){return(function e(t){let r=arguments.length>1&&void 0!==arguments[1]?arguments[1]:[];return Array.isArray(t)?t.forEach(t=>e(t,r)):\"string\"==typeof t.content?r.push(t.content):null!=t.content&&e(t.content,r),r})(e).join(\"\")}",
        "flattenAst": "function e(t){let r=arguments.length>1&&void 0!==arguments[1]?arguments[1]:null;if(Array.isArray(t)){let n=t.length,l=[];for(let i=0;i<n;i++)!function(e,t){if(Array.isArray(t)){let{length:r}=t;for(let n=0;n<r;n++)e.push(t[n]);return}e.push(t)}(l,e(t[i],r));return l}return(null!=t.content&&(t.content=e(t.content,t)),null!=r&&t.type===r.type)?t.content:t}",
        "constrainAst": "function e(t){let r=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{limit:200};if(Array.isArray(t)){let l=t.length;for(let i=0;i<l;i++){let l=e(t[i],r);if(l===n){t.length=i;break}t[i]=l}}else if(\"text\"!==t.type){if(r.limit-=1,r.limit<=0)return n;Array.isArray(t.content)&&(t.content=e(t.content,r))}return t}"
    }
}