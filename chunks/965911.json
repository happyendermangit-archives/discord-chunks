{
    "exports": {
        "init": "async function m(){if(null==i){if(!(c.isPlatformEmbedded&&((0,c.isMac)()||(0,c.isWindows)()))){new l.default(\"CloudSyncUtils\").warn(\"CloudSync is not supported on this platform\");return}await f.default.ensureModule(\"discord_cloudsync\"),(i=new(f.default.getCloudSync())).on(\"state\",e=>s.default.dispatch({type:\"GAME_CLOUD_SYNC_UPDATE\",state:e}))}}",
        "syncApplication": "function h(e,t){let n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:null;if(!u.default.supportsCloudSync(e,t))return Promise.resolve({type:p.CloudSyncResultTypes.NONE});let s=function(){if(null==i)throw Error(\"Initialize cloud sync module before syncing.\");return i}(),l=u.default.getState(e,t);if(null==l)throw Error(`No dispatch state for ${e}:${t}`);let c=l.storage??{},f=(0,d.getComboId)(e,t),m=o.default.getToken();if(null==m)throw Error(\"Cannot use cloud sync when not authenticated.\");let h=null!=l.installPath?(0,r.default)(l.installPath):null;if(null==h)throw Error(`No install path for ${e}:${t}`);let E=o.default.getId(),_={forceHash:n,manifestPath:p.DefaultCloudSyncConfiguration.STORAGE_MANIFEST(h,E),roots:null!=c.roots?c.roots:[{id:p.DefaultCloudSyncConfiguration.ROOT_ID,paths:Object.keys(p.DefaultCloudSyncConfiguration.ROOT_PLATFORMS).map(e=>({platform:e,path:p.DefaultCloudSyncConfiguration.ROOT_STORAGE_PATH(h,E)})),patterns:p.DefaultCloudSyncConfiguration.ROOT_PATTERN}],storage:{baseURL:`${a.default.getAPIBaseURL()}${p.Endpoints.APPLICATION_STORAGE(e,t)}`,token:m},replacements:{INSTALLDIR:p.DefaultCloudSyncConfiguration.INSTALL_DIR(h),USERID:E,BRANCHID:t}};return s.sync(f,_)}"
    }
}