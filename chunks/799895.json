{
    "exports": {
        "default": {
            "hasPermission": "function c(){return null!=Notification&&\"granted\"===Notification.permission}",
            "requestPermission": "function(e){null!=Notification&&Notification.requestPermission(()=>{null!=e&&e(c())})}",
            "showNotification": "function(e,_,E,t,o){var r,i,a,s;let N;if(U(o)){null!=o.sound&&!1!==o.playSoundIfDisabled&&d(o.sound,null!==(i=o.volume)&&void 0!==i?i:1);return}null!=o.sound&&d(o.sound,null!==(a=o.volume)&&void 0!==a?a:1);let l=null!==(s=null==o?void 0:o.tag)&&void 0!==s?s:null;(0,S.isLinux)()&&(E=n.escape(E));let C={icon:e,body:E,tag:l,silent:!0};R&&I.default.taskbarFlash&&O.default.flashFrame(!0);try{N=new Notification(_,C)}catch(e){return null}return(null===(r=o.onShown)||void 0===r||r.call(o),!o.omitViewTracking&&T.default.track(A.AnalyticEvents.NOTIFICATION_VIEWED,t),N.onclick=()=>{var e;S.isPlatformEmbedded?O.default.focus():(window.focus(),N.close()),!o.omitClickTracking&&T.default.track(A.AnalyticEvents.NOTIFICATION_CLICKED,t),null===(e=o.onClick)||void 0===e||e.call(o)},L&&setTimeout(()=>N.close(),5e3),u)?N:{close(){var e;null==N||null===(e=N.onclose)||void 0===e||e.call(N)}}}",
            "disabled": "function U(e){return s.default.disableNotifications&&null==e.overrideStreamerMode||!c()||S.isPlatformEmbedded&&!O.default.shouldDisplayNotifications()}"
        }
    }
}