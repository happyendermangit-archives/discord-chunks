{
    "exports": {
        "hydrateInitialGuild": "function O(e,t){let n=E.default.getGuild(e.id),s=M(e,null==n?void 0:{properties:v.toServer(n),roles:n.roles,emojis:g.default.getGuilds()[n.id]?.rawEmojis??null,stickers:m.default.getRawStickersByGuild().get(n.id)??null,readStates:{}});return T={guild:e,identifyTime:t},s}",
        "hydratePreviouslyUnavailableGuild": "function M(e,t){if(null==t&&(t=P(e.id)),\"partial\"!==e.data_mode)return{id:e.id,emojis:e.emojis,guild_scheduled_events:e.guild_scheduled_events,joined_at:e.joined_at,lastMessages:e.last_messages,member_count:e.member_count,members:e.members,premium_subscription_count:e.premium_subscription_count,properties:e.properties,roles:e.roles,stage_instances:e.stage_instances,stickers:e.stickers,threads:e.threads?.map(t=>h.createChannelRecordFromServer(t,e.id))??[],threadMessages:L(e.threads),channels:e.channels.map(t=>(t.guild_id=e.id,(0,h.createChannelRecordFromServer)(t,e.id))),presences:e.presences,embedded_activities:e.embedded_activities,voice_states:e.voice_states,version:e.version,hasThreadsSubscription:e.has_threads_subscription};if(null==t)throw y.log(`no cache entry for partial guild (guild: ${e.id}, type: post_ready)`),Error(\"Guild data was missing from store, but hash was still available.\");return{id:e.id,channels:null,channelUpdates:{writes:e.partial_updates.channels?.map(t=>h.createChannelRecordFromServer(t,e.id))??[],deletes:e.partial_updates.deleted_channel_ids??[]},channelTimestampUpdates:e.channel_updates,embedded_activities:e.embedded_activities,emojis:null==t.emojis?null:V(t.emojis,e.partial_updates.emojis,e.partial_updates.deleted_emoji_ids),emojiUpdates:{writes:e.partial_updates.emojis??[],deletes:e.partial_updates.deleted_emoji_ids??[]},guild_scheduled_events:e.guild_scheduled_events,joined_at:e.joined_at,lastMessages:e.last_messages,member_count:e.member_count,members:e.members,premium_subscription_count:e.premium_subscription_count,presences:e.presences,properties:e.properties??t.properties,roles:v.filterRoleDeletes(e.id,t.roles,e.partial_updates.roles,e.partial_updates.deleted_role_ids),stage_instances:e.stage_instances,stickers:null==t.stickers?null:V(t.stickers,e.partial_updates.stickers,e.partial_updates.deleted_sticker_ids),stickerUpdates:{writes:e.partial_updates.stickers??[],deletes:e.partial_updates.deleted_sticker_ids??[]},unableToSyncDeletes:e.unable_to_sync_deletes,threads:e.threads?.map(t=>h.createChannelRecordFromServer(t,e.id))??[],threadMessages:L(e.threads),voice_states:e.voice_states,version:e.version,hasThreadsSubscription:e.has_threads_subscription}}",
        "hydrateReadyPayloadPrioritized": "function N(e,t,n){let{users:s,relationships:r,private_channels:u,merged_members:d,guilds:l,..._}=e;(function(e){null!=o.default.database()&&!1===e.databaseOk&&f.default.replaceDisableAllDatabases(\"ReadyPayloadUtils: database was not ok\"),I={};let t=Object.values(E.default.getGuilds()),n=g.default.getGuilds(),s=m.default.getRawStickersByGuild(),i=p.default.getReadStatesByChannel();for(let r of t)r.id in e.guildVersions&&e.guildChannels.has(r.id)&&(I[r.id]={properties:v.toServer(r),roles:r.roles,emojis:n[r.id]?.rawEmojis??null,stickers:s.get(r.id)??null,readStates:i})})(n);let c=R(S=a().keyBy(s,e=>e.id),r);u?.forEach(e=>{let t=e.recipient_ids;null!=t&&(e.recipients=t.map(e=>(i()(null!=S[e],\"Missing user in compressed ready payload\"),S[e]))),delete e.recipient_ids});let h=l?.map((e,t)=>!0===e.unavailable?e:(e.members=R(S,d?.[t]),b(e)))??[],y=D(t,l,e=>b(e));return null!=y&&h.push(y),{..._,users:s,presences:[],relationships:c,guilds:h,private_channels:u??[]}}",
        "hydrateReadySupplementalPayload": "function C(e,t){let{guilds:n,merged_members:s,merged_presences:i,...r}=e,a=R(S,i?.friends),o=n?.map((e,t)=>{let n=R(S,i?.guilds[t]),r=R(S,s?.[t]);return{...e,unavailable:void 0===e.voice_states,presences:n,members:r}})??[],u=D(t,n,e=>({id:e.id,members:e.members,presences:e.presences,embedded_activities:e.embedded_activities,voice_states:e.voice_states,unavailable:!1}));return null!=u&&o.push(u),S={},{...r,presences:a,guilds:o}}",
        "preloadReadyPayloadData": "function A(){let e=o.default.database(),t=(0,_.isCacheEnabled)()?u.default.getCommittedVersions():Promise.resolve({}),n=(0,_.isCacheEnabled)()?l.default.getGuildIds():Promise.resolve(new Set);return Promise.all([t,n,null!=e?d.default.okAsync(e):Promise.resolve(!1)]).then(e=>{let[t,n,s]=e;return{guildVersions:t,guildChannels:n,databaseOk:s}})}"
    }
}