{
    "exports": {
        "Editor": {
            "above": "above(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},{voids:r=!1,mode:n=\"lowest\",at:u=e.selection,match:a}=t;if(u){var o=Y.path(e,u);for(var[i,s]of Y.levels(e,{at:o,voids:r,match:a,reverse:\"lowest\"===n}))if(!Text.isText(i)){if(Range.isRange(u)){if(ea.isAncestor(s,u.anchor.path)&&ea.isAncestor(s,u.focus.path))return[i,s]}else if(!ea.equals(o,s))return[i,s]}}}",
            "addMark": "addMark(e,t,r){e.addMark(t,r)}",
            "after": "after(e,t){var r,n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},u=Y.point(e,t,{edge:\"end\"}),a=Y.end(e,[]),{distance:o=1}=n,i=0;for(var s of Y.positions(e,J(J({},n),{},{at:{anchor:u,focus:a}}))){if(i>o)break;0!==i&&(r=s),i++}return r}",
            "before": "before(e,t){var r,n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},u=Y.start(e,[]),a=Y.point(e,t,{edge:\"start\"}),{distance:o=1}=n,i=0;for(var s of Y.positions(e,J(J({},n),{},{at:{anchor:u,focus:a},reverse:!0}))){if(i>o)break;0!==i&&(r=s),i++}return r}",
            "deleteBackward": "deleteBackward(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},{unit:r=\"character\"}=t;e.deleteBackward(r)}",
            "deleteForward": "deleteForward(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},{unit:r=\"character\"}=t;e.deleteForward(r)}",
            "deleteFragment": "deleteFragment(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},{direction:r=\"forward\"}=t;e.deleteFragment(r)}",
            "edges": "(e,t)=>[Y.start(e,t),Y.end(e,t)]",
            "end": "(e,t)=>Y.point(e,t,{edge:\"end\"})",
            "first": "first(e,t){var r=Y.path(e,t,{edge:\"start\"});return Y.node(e,r)}",
            "fragment": "fragment(e,t){var r=Y.range(e,t);return Node.fragment(e,r)}",
            "hasBlocks": "(e,t)=>t.children.some(t=>Element.isElement(t)&&Y.isBlock(e,t))",
            "hasInlines": "(e,t)=>t.children.some(t=>Text.isText(t)||Y.isInline(e,t))",
            "hasTexts": "(e,t)=>t.children.every(e=>Text.isText(e))",
            "insertBreak": "insertBreak(e){e.insertBreak()}",
            "insertSoftBreak": "insertSoftBreak(e){e.insertSoftBreak()}",
            "insertFragment": "insertFragment(e,t){e.insertFragment(t)}",
            "insertNode": "insertNode(e,t){e.insertNode(t)}",
            "insertText": "insertText(e,t){e.insertText(t)}",
            "isBlock": "(e,t)=>!e.isInline(t)",
            "isEditor": "isEditor(e){var t=Q.get(e);if(void 0!==t)return t;if(!(0,a.isPlainObject)(e))return!1;var r=\"function\"==typeof e.addMark&&\"function\"==typeof e.apply&&\"function\"==typeof e.deleteBackward&&\"function\"==typeof e.deleteForward&&\"function\"==typeof e.deleteFragment&&\"function\"==typeof e.insertBreak&&\"function\"==typeof e.insertSoftBreak&&\"function\"==typeof e.insertFragment&&\"function\"==typeof e.insertNode&&\"function\"==typeof e.insertText&&\"function\"==typeof e.isInline&&\"function\"==typeof e.isVoid&&\"function\"==typeof e.normalizeNode&&\"function\"==typeof e.onChange&&\"function\"==typeof e.removeMark&&\"function\"==typeof e.getDirtyPaths&&(null===e.marks||(0,a.isPlainObject)(e.marks))&&(null===e.selection||Range.isRange(e.selection))&&Node.isNodeList(e.children)&&eu.isOperationList(e.operations);return Q.set(e,r),r}",
            "isEnd": "isEnd(e,t,r){var n=Y.end(e,r);return el.equals(t,n)}",
            "isEdge": "(e,t,r)=>Y.isStart(e,t,r)||Y.isEnd(e,t,r)",
            "isEmpty": "isEmpty(e,t){var{children:r}=t,[n]=r;return 0===r.length||1===r.length&&Text.isText(n)&&\"\"===n.text&&!e.isVoid(t)}",
            "isInline": "(e,t)=>e.isInline(t)",
            "isNormalizing": "isNormalizing(e){var t=f.get(e);return void 0===t||t}",
            "isStart": "isStart(e,t,r){if(0!==t.offset)return!1;var n=Y.start(e,r);return el.equals(t,n)}",
            "isVoid": "(e,t)=>e.isVoid(t)",
            "last": "last(e,t){var r=Y.path(e,t,{edge:\"end\"});return Y.node(e,r)}",
            "leaf": "leaf(e,t){var r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},n=Y.path(e,t,r);return[Node.leaf(e,n),n]}",
            "levels": "*levels(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},{at:r=e.selection,reverse:n=!1,voids:u=!1}=t,{match:a}=t;if(null==a&&(a=()=>!0),r){var o=[],i=Y.path(e,r);for(var[s,l]of Node.levels(e,i))if(a(s,l)&&(o.push([s,l]),!u&&Element.isElement(s)&&Y.isVoid(e,s)))break;n&&o.reverse(),yield*o}}",
            "marks": "marks(e){var{marks:t,selection:r}=e;if(!r)return null;if(t)return t;if(Range.isExpanded(r)){var[n]=Y.nodes(e,{match:Text.isText});if(!n)return{};var[u]=n;return g(u,K)}var{anchor:a}=r,{path:o}=a,[i]=Y.leaf(e,o);if(0===a.offset){var s=Y.previous(e,{at:o,match:Text.isText});if(!Y.above(e,{match:t=>Element.isElement(t)&&Y.isVoid(e,t)&&e.markableVoid(t)})){var l=Y.above(e,{match:t=>Element.isElement(t)&&Y.isBlock(e,t)});if(s&&l){var[c,f]=s,[,d]=l;ea.isAncestor(d,f)&&(i=c)}}}return g(i,$)}",
            "next": "next(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},{mode:r=\"lowest\",voids:n=!1}=t,{match:u,at:a=e.selection}=t;if(!!a){var o=Y.after(e,a,{voids:n});if(o){var[,i]=Y.last(e,[]),s=[o.path,i];if(ea.isPath(a)&&0===a.length)throw Error(\"Cannot get the next node from the root node!\");if(null==u){if(ea.isPath(a)){var[l]=Y.parent(e,a);u=e=>l.children.includes(e)}else u=()=>!0}var[c]=Y.nodes(e,{at:s,match:u,mode:r,voids:n});return c}}}",
            "node": "node(e,t){var r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},n=Y.path(e,t,r);return[Node.get(e,n),n]}",
            "nodes": "*nodes(e){var t,r,n,u=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},{at:a=e.selection,mode:o=\"all\",universal:i=!1,reverse:s=!1,voids:l=!1}=u,{match:c}=u;if(!c&&(c=()=>!0),a){if(G.isSpan(a))t=a[0],r=a[1];else{var f=Y.path(e,a,{edge:\"start\"}),d=Y.path(e,a,{edge:\"end\"});t=s?d:f,r=s?f:d}var D=Node.nodes(e,{reverse:s,from:t,to:r,pass:t=>{var[r]=t;return!l&&Element.isElement(r)&&Y.isVoid(e,r)}}),h=[];for(var[v,p]of D){var C=n&&0===ea.compare(p,n[1]);if(\"highest\"!==o||!C){if(!c(v,p)){if(i&&!C&&Text.isText(v))return;continue}if(\"lowest\"===o&&C){n=[v,p];continue}var g=\"lowest\"===o?n:[v,p];g&&(i?h.push(g):yield g),n=[v,p]}}\"lowest\"===o&&n&&(i?h.push(n):yield n),i&&(yield*h)}}",
            "normalize": "normalize(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},{force:r=!1,operation:n}=t,u=e=>s.get(e)||[],a=e=>l.get(e)||new Set,o=e=>{var t=u(e).pop(),r=t.join(\",\");return a(e).delete(r),t};if(!!Y.isNormalizing(e)){if(r){var i=Array.from(Node.nodes(e),e=>{var[,t]=e;return t}),c=new Set(i.map(e=>e.join(\",\")));s.set(e,i),l.set(e,c)}0!==u(e).length&&Y.withoutNormalizing(e,()=>{for(var t of u(e))if(Node.has(e,t)){var r=Y.node(e,t),[a,i]=r;Element.isElement(a)&&0===a.children.length&&e.normalizeNode(r,{operation:n})}for(var s=u(e),l=s.length,c=0;0!==s.length;){if(!e.shouldNormalize({dirtyPaths:s,iteration:c,initialDirtyPathsLength:l,operation:n}))return;var f=o(e);if(Node.has(e,f)){var d=Y.node(e,f);e.normalizeNode(d,{operation:n})}c++,s=u(e)}})}}",
            "parent": "parent(e,t){var r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},n=Y.path(e,t,r),u=ea.parent(n);return Y.node(e,u)}",
            "path": "path(e,t){var r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},{depth:n,edge:u}=r;if(ea.isPath(t)){if(\"start\"===u){var[,a]=Node.first(e,t);t=a}else if(\"end\"===u){var[,o]=Node.last(e,t);t=o}}return Range.isRange(t)&&(t=\"start\"===u?Range.start(t):\"end\"===u?Range.end(t):ea.common(t.anchor.path,t.focus.path)),el.isPoint(t)&&(t=t.path),null!=n&&(t=t.slice(0,n)),t}",
            "hasPath": "(e,t)=>Node.has(e,t)",
            "pathRef": "pathRef(e,t){var r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},{affinity:n=\"forward\"}=r,u={current:t,affinity:n,unref(){var{current:t}=u;return Y.pathRefs(e).delete(u),u.current=null,t}};return Y.pathRefs(e).add(u),u}",
            "pathRefs": "pathRefs(e){var t=d.get(e);return!t&&(t=new Set,d.set(e,t)),t}",
            "point": "point(e,t){var r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},{edge:n=\"start\"}=r;if(ea.isPath(t)){if(\"end\"===n){var u,[,a]=Node.last(e,t);u=a}else{var[,o]=Node.first(e,t);u=o}var i=Node.get(e,u);if(!Text.isText(i))throw Error(\"Cannot get the \".concat(n,\" point in the node at path [\").concat(t,\"] because it has no \").concat(n,\" text node.\"));return{path:u,offset:\"end\"===n?i.text.length:0}}if(Range.isRange(t)){var[s,l]=Range.edges(t);return\"start\"===n?s:l}return t}",
            "pointRef": "pointRef(e,t){var r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},{affinity:n=\"forward\"}=r,u={current:t,affinity:n,unref(){var{current:t}=u;return Y.pointRefs(e).delete(u),u.current=null,t}};return Y.pointRefs(e).add(u),u}",
            "pointRefs": "pointRefs(e){var t=D.get(e);return!t&&(t=new Set,D.set(e,t)),t}",
            "positions": "*positions(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},{at:r=e.selection,unit:n=\"offset\",reverse:u=!1,voids:a=!1}=t;if(r){var o=Y.range(e,r),[i,s]=Range.edges(o),l=u?s:i,c=!1,f=\"\",d=0,D=0,h=0;for(var[v,p]of Y.nodes(e,{at:r,reverse:u,voids:a})){if(Element.isElement(v)){if(!a&&e.isVoid(v)){yield Y.start(e,p);continue}if(e.isInline(v))continue;if(Y.hasInlines(e,v)){var C=ea.isAncestor(p,s.path)?s:Y.end(e,p),g=ea.isAncestor(p,i.path)?i:Y.start(e,p);f=Y.string(e,{anchor:g,focus:C},{voids:a}),c=!0}}if(Text.isText(v)){var E=ea.equals(p,l.path);for(E?(D=u?l.offset:v.text.length-l.offset,h=l.offset):(D=v.text.length,h=u?D:0),(E||c||\"offset\"===n)&&(yield{path:p,offset:h},c=!1);;){if(0===d){if(\"\"===f)break;d=function(e,t,r){if(\"character\"===t)return B(e,r);if(\"word\"===t)return F(e,r);if(\"line\"===t||\"block\"===t)return e.length;return 1}(f,n,u),f=b(f,d,u)[1]}if(h=u?h-d:h+d,(D-=d)<0){d=-D;break}d=0,yield{path:p,offset:h}}}}}}",
            "previous": "previous(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},{mode:r=\"lowest\",voids:n=!1}=t,{match:u,at:a=e.selection}=t;if(!!a){var o=Y.before(e,a,{voids:n});if(o){var[,i]=Y.first(e,[]),s=[o.path,i];if(ea.isPath(a)&&0===a.length)throw Error(\"Cannot get the previous node from the root node!\");if(null==u){if(ea.isPath(a)){var[l]=Y.parent(e,a);u=e=>l.children.includes(e)}else u=()=>!0}var[c]=Y.nodes(e,{reverse:!0,at:s,match:u,mode:r,voids:n});return c}}}",
            "range": "(e,t,r)=>Range.isRange(t)&&!r?t:{anchor:Y.start(e,t),focus:Y.end(e,r||t)}",
            "rangeRef": "rangeRef(e,t){var r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},{affinity:n=\"forward\"}=r,u={current:t,affinity:n,unref(){var{current:t}=u;return Y.rangeRefs(e).delete(u),u.current=null,t}};return Y.rangeRefs(e).add(u),u}",
            "rangeRefs": "rangeRefs(e){var t=h.get(e);return!t&&(t=new Set,h.set(e,t)),t}",
            "removeMark": "removeMark(e,t){e.removeMark(t)}",
            "setNormalizing": "setNormalizing(e,t){f.set(e,t)}",
            "start": "(e,t)=>Y.point(e,t,{edge:\"start\"})",
            "string": "string(e,t){var r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},{voids:n=!1}=r,u=Y.range(e,t),[a,o]=Range.edges(u),i=\"\";for(var[s,l]of Y.nodes(e,{at:u,match:Text.isText,voids:n})){var c=s.text;ea.equals(l,o.path)&&(c=c.slice(0,o.offset)),ea.equals(l,a.path)&&(c=c.slice(a.offset)),i+=c}return i}",
            "unhangRange": "unhangRange(e,t){var r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},{voids:n=!1}=r,[u,a]=Range.edges(t);if(0!==u.offset||0!==a.offset||Range.isCollapsed(t)||ea.hasPrevious(a.path))return t;var o=Y.above(e,{at:a,match:t=>Element.isElement(t)&&Y.isBlock(e,t),voids:n}),i=o?o[1]:[],s={anchor:Y.start(e,u),focus:a},l=!0;for(var[c,f]of Y.nodes(e,{at:s,match:Text.isText,reverse:!0,voids:n})){if(l){l=!1;continue}if(\"\"!==c.text||ea.isBefore(f,i)){a={path:f,offset:c.text.length};break}}return{anchor:u,focus:a}}",
            "void": "void(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};return Y.above(e,J(J({},t),{},{match:t=>Element.isElement(t)&&Y.isVoid(e,t)}))}",
            "withoutNormalizing": "withoutNormalizing(e,t){var r=Y.isNormalizing(e);Y.setNormalizing(e,!1);try{t()}finally{Y.setNormalizing(e,r)}Y.normalize(e)}"
        },
        "Element": {
            "isAncestor": "e=>(0,a.isPlainObject)(e)&&Node.isNodeList(e.children)",
            "isElement": "e=>(0,a.isPlainObject)(e)&&Node.isNodeList(e.children)&&!Y.isEditor(e)",
            "isElementList": "e=>Array.isArray(e)&&e.every(e=>Element.isElement(e))",
            "isElementProps": "e=>void 0!==e.children",
            "isElementType": "function(e,t){var r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:\"type\";return H(e)&&e[r]===t}",
            "matches": "matches(e,t){for(var r in t)if(\"children\"!==r&&e[r]!==t[r])return!1;return!0}"
        },
        "Node": {
            "ancestor": "ancestor(e,t){var r=Node.get(e,t);if(Text.isText(r))throw Error(\"Cannot get the ancestor node at path [\".concat(t,\"] because it refers to a text node instead: \").concat(ev.stringify(r)));return r}",
            "ancestors": "*ancestors(e,t){var r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};for(var n of ea.ancestors(t,r)){var u=[Node.ancestor(e,n),n];yield u}}",
            "child": "child(e,t){if(Text.isText(e))throw Error(\"Cannot get the child of a text node: \".concat(ev.stringify(e)));var r=e.children[t];if(null==r)throw Error(\"Cannot get child at index `\".concat(t,\"` in node: \").concat(ev.stringify(e)));return r}",
            "children": "*children(e,t){for(var r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},{reverse:n=!1}=r,u=Node.ancestor(e,t),{children:a}=u,o=n?a.length-1:0;n?o>=0:o<a.length;){var i=Node.child(u,o),s=t.concat(o);yield[i,s],o=n?o-1:o+1}}",
            "common": "common(e,t,r){var n=ea.common(t,r);return[Node.get(e,n),n]}",
            "descendant": "descendant(e,t){var r=Node.get(e,t);if(Y.isEditor(r))throw Error(\"Cannot get the descendant node at path [\".concat(t,\"] because it refers to the root editor node instead: \").concat(ev.stringify(r)));return r}",
            "descendants": "*descendants(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};for(var[r,n]of Node.nodes(e,t))0!==n.length&&(yield[r,n])}",
            "elements": "*elements(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};for(var[r,n]of Node.nodes(e,t))Element.isElement(r)&&(yield[r,n])}",
            "extractProps": "extractProps(e){if(Element.isAncestor(e)){var t=g(e,Z);return t}var t=g(e,ee);return t}",
            "first": "first(e,t){for(var r=t.slice(),n=Node.get(e,r);n&&!Text.isText(n)&&0!==n.children.length;){;n=n.children[0],r.push(0)}return[n,r]}",
            "fragment": "fragment(e,t){if(Text.isText(e))throw Error(\"Cannot get a fragment starting from a root text node: \".concat(ev.stringify(e)));return(0,o.produce)({children:e.children},e=>{var[r,n]=Range.edges(t);for(var[,u]of Node.nodes(e,{reverse:!0,pass:e=>{var[,r]=e;return!Range.includes(t,r)}})){if(!Range.includes(t,u)){var a=Node.parent(e,u),o=u[u.length-1];a.children.splice(o,1)}if(ea.equals(u,n.path)){var i=Node.leaf(e,u);i.text=i.text.slice(0,n.offset)}if(ea.equals(u,r.path)){var s=Node.leaf(e,u);s.text=s.text.slice(r.offset)}}Y.isEditor(e)&&(e.selection=null)}).children}",
            "get": "get(e,t){for(var r=e,n=0;n<t.length;n++){var u=t[n];if(Text.isText(r)||!r.children[u])throw Error(\"Cannot find a descendant at path [\".concat(t,\"] in node: \").concat(ev.stringify(e)));r=r.children[u]}return r}",
            "has": "has(e,t){for(var r=e,n=0;n<t.length;n++){var u=t[n];if(Text.isText(r)||!r.children[u])return!1;r=r.children[u]}return!0}",
            "isNode": "e=>Text.isText(e)||Element.isElement(e)||Y.isEditor(e)",
            "isNodeList": "isNodeList(e){if(!Array.isArray(e))return!1;var t=et.get(e);if(void 0!==t)return t;var r=e.every(e=>Node.isNode(e));return et.set(e,r),r}",
            "last": "last(e,t){for(var r=t.slice(),n=Node.get(e,r);n&&!Text.isText(n)&&0!==n.children.length;){;var u=n.children.length-1;n=n.children[u],r.push(u)}return[n,r]}",
            "leaf": "leaf(e,t){var r=Node.get(e,t);if(!Text.isText(r))throw Error(\"Cannot get the leaf node at path [\".concat(t,\"] because it refers to a non-leaf node: \").concat(ev.stringify(r)));return r}",
            "levels": "*levels(e,t){var r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};for(var n of ea.levels(t,r)){var u=Node.get(e,n);yield[u,n]}}",
            "matches": "(e,t)=>Element.isElement(e)&&Element.isElementProps(t)&&Element.matches(e,t)||Text.isText(e)&&Text.isTextProps(t)&&Text.matches(e,t)",
            "nodes": "*nodes(e){for(var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},{pass:r,reverse:n=!1}=t,{from:u=[],to:a}=t,o=new Set,i=[],s=e;!(a&&(n?ea.isBefore(i,a):ea.isAfter(i,a)));){;if(!o.has(s)&&(yield[s,i]),!o.has(s)&&!Text.isText(s)&&0!==s.children.length&&(null==r||!1===r([s,i]))){o.add(s);var l=n?s.children.length-1:0;ea.isAncestor(i,u)&&(l=u[i.length]),i=i.concat(l),s=Node.get(e,i);continue}if(0===i.length)break;if(!n){var c=ea.next(i);if(Node.has(e,c)){i=c,s=Node.get(e,i);continue}}if(n&&0!==i[i.length-1]){i=ea.previous(i),s=Node.get(e,i);continue}i=ea.parent(i),s=Node.get(e,i),o.add(s)}}",
            "parent": "parent(e,t){var r=ea.parent(t),n=Node.get(e,r);if(Text.isText(n))throw Error(\"Cannot get the parent of path [\".concat(t,\"] because it does not exist in the root.\"));return n}",
            "string": "e=>Text.isText(e)?e.text:e.children.map(Node.string).join(\"\")",
            "texts": "*texts(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};for(var[r,n]of Node.nodes(e,t))Text.isText(r)&&(yield[r,n])}"
        },
        "Path": {
            "ancestors": "ancestors(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},{reverse:r=!1}=t,n=ea.levels(e,t);return n=r?n.slice(1):n.slice(0,-1)}",
            "common": "common(e,t){for(var r=[],n=0;n<e.length&&n<t.length;n++){var u=e[n];if(u!==t[n])break;r.push(u)}return r}",
            "compare": "compare(e,t){for(var r=Math.min(e.length,t.length),n=0;n<r;n++){if(e[n]<t[n])return -1;if(e[n]>t[n])return 1}return 0}",
            "endsAfter": "endsAfter(e,t){var r=e.length-1,n=e.slice(0,r),u=t.slice(0,r),a=e[r],o=t[r];return ea.equals(n,u)&&a>o}",
            "endsAt": "endsAt(e,t){var r=e.length,n=e.slice(0,r),u=t.slice(0,r);return ea.equals(n,u)}",
            "endsBefore": "endsBefore(e,t){var r=e.length-1,n=e.slice(0,r),u=t.slice(0,r),a=e[r],o=t[r];return ea.equals(n,u)&&a<o}",
            "equals": "(e,t)=>e.length===t.length&&e.every((e,r)=>e===t[r])",
            "hasPrevious": "e=>e[e.length-1]>0",
            "isAfter": "(e,t)=>1===ea.compare(e,t)",
            "isAncestor": "(e,t)=>e.length<t.length&&0===ea.compare(e,t)",
            "isBefore": "(e,t)=>-1===ea.compare(e,t)",
            "isChild": "(e,t)=>e.length===t.length+1&&0===ea.compare(e,t)",
            "isCommon": "(e,t)=>e.length<=t.length&&0===ea.compare(e,t)",
            "isDescendant": "(e,t)=>e.length>t.length&&0===ea.compare(e,t)",
            "isParent": "(e,t)=>e.length+1===t.length&&0===ea.compare(e,t)",
            "isPath": "e=>Array.isArray(e)&&(0===e.length||\"number\"==typeof e[0])",
            "isSibling": "isSibling(e,t){if(e.length!==t.length)return!1;var r=e.slice(0,-1),n=t.slice(0,-1);return e[e.length-1]!==t[t.length-1]&&ea.equals(r,n)}",
            "levels": "levels(e){for(var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},{reverse:r=!1}=t,n=[],u=0;u<=e.length;u++)n.push(e.slice(0,u));return r&&n.reverse(),n}",
            "next": "next(e){if(0===e.length)throw Error(\"Cannot get the next path of a root path [\".concat(e,\"], because it has no next index.\"));var t=e[e.length-1];return e.slice(0,-1).concat(t+1)}",
            "operationCanTransformPath": "operationCanTransformPath(e){switch(e.type){case\"insert_node\":case\"remove_node\":case\"merge_node\":case\"split_node\":case\"move_node\":return!0;default:return!1}}",
            "parent": "parent(e){if(0===e.length)throw Error(\"Cannot get the parent path of the root path [\".concat(e,\"].\"));return e.slice(0,-1)}",
            "previous": "previous(e){if(0===e.length)throw Error(\"Cannot get the previous path of a root path [\".concat(e,\"], because it has no previous index.\"));var t=e[e.length-1];if(t<=0)throw Error(\"Cannot get the previous path of a first child path [\".concat(e,\"] because it would result in a negative index.\"));return e.slice(0,-1).concat(t-1)}",
            "relative": "relative(e,t){if(!ea.isAncestor(t,e)&&!ea.equals(e,t))throw Error(\"Cannot get the relative path of [\".concat(e,\"] inside ancestor [\").concat(t,\"], because it is not above or equal to the path.\"));return e.slice(t.length)}",
            "transform": "transform(e,t){var r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};if(!e)return null;var n=[...e],{affinity:u=\"forward\"}=r;if(0===e.length)return n;switch(t.type){case\"insert_node\":var{path:a}=t;(ea.equals(a,n)||ea.endsBefore(a,n)||ea.isAncestor(a,n))&&(n[a.length-1]+=1);break;case\"remove_node\":var{path:o}=t;if(ea.equals(o,n)||ea.isAncestor(o,n))return null;ea.endsBefore(o,n)&&(n[o.length-1]-=1);break;case\"merge_node\":var{path:i,position:s}=t;ea.equals(i,n)||ea.endsBefore(i,n)?n[i.length-1]-=1:ea.isAncestor(i,n)&&(n[i.length-1]-=1,n[i.length]+=s);break;case\"split_node\":var{path:l,position:c}=t;if(ea.equals(l,n)){if(\"forward\"===u)n[n.length-1]+=1;else if(\"backward\"!==u)return null}else ea.endsBefore(l,n)?n[l.length-1]+=1:ea.isAncestor(l,n)&&e[l.length]>=c&&(n[l.length-1]+=1,n[l.length]-=c);break;case\"move_node\":var{path:f,newPath:d}=t;if(ea.equals(f,d))break;if(ea.isAncestor(f,n)||ea.equals(f,n)){var D=d.slice();return ea.endsBefore(f,d)&&f.length<d.length&&(D[f.length-1]-=1),D.concat(n.slice(f.length))}ea.isSibling(f,d)&&(ea.isAncestor(d,n)||ea.equals(d,n))?ea.endsBefore(f,n)?n[f.length-1]-=1:n[f.length-1]+=1:ea.endsBefore(d,n)||ea.equals(d,n)||ea.isAncestor(d,n)?(ea.endsBefore(f,n)&&(n[f.length-1]-=1),n[d.length-1]+=1):ea.endsBefore(f,n)&&(ea.equals(d,n)&&(n[d.length-1]+=1),n[f.length-1]-=1)}return n}"
        },
        "Point": {
            "compare": "compare(e,t){var r=ea.compare(e.path,t.path);if(0===r)return e.offset<t.offset?-1:e.offset>t.offset?1:0;return r}",
            "isAfter": "(e,t)=>1===el.compare(e,t)",
            "isBefore": "(e,t)=>-1===el.compare(e,t)",
            "equals": "(e,t)=>e.offset===t.offset&&ea.equals(e.path,t.path)",
            "isPoint": "e=>(0,a.isPlainObject)(e)&&\"number\"==typeof e.offset&&ea.isPath(e.path)",
            "transform": "transform(e,t){var r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};return(0,o.produce)(e,e=>{if(null===e)return null;var{affinity:n=\"forward\"}=r,{path:u,offset:a}=e;switch(t.type){case\"insert_node\":case\"move_node\":e.path=ea.transform(u,t,r);break;case\"insert_text\":ea.equals(t.path,u)&&(t.offset<a||t.offset===a&&\"forward\"===n)&&(e.offset+=t.text.length);break;case\"merge_node\":ea.equals(t.path,u)&&(e.offset+=t.position),e.path=ea.transform(u,t,r);break;case\"remove_text\":ea.equals(t.path,u)&&t.offset<=a&&(e.offset-=Math.min(a-t.offset,t.text.length));break;case\"remove_node\":if(ea.equals(t.path,u)||ea.isAncestor(t.path,u))return null;e.path=ea.transform(u,t,r);break;case\"split_node\":if(ea.equals(t.path,u)){if(t.position===a&&null==n)return null;(t.position<a||t.position===a&&\"forward\"===n)&&(e.offset-=t.position,e.path=ea.transform(u,t,es(es({},r),{},{affinity:\"forward\"})))}else e.path=ea.transform(u,t,r)}})}"
        },
        "Range": {
            "edges": "edges(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},{reverse:r=!1}=t,{anchor:n,focus:u}=e;return Range.isBackward(e)===r?[n,u]:[u,n]}",
            "end": "end(e){var[,t]=Range.edges(e);return t}",
            "equals": "(e,t)=>el.equals(e.anchor,t.anchor)&&el.equals(e.focus,t.focus)",
            "includes": "includes(e,t){if(Range.isRange(t)){if(Range.includes(e,t.anchor)||Range.includes(e,t.focus))return!0;var[r,n]=Range.edges(e),[u,a]=Range.edges(t);return el.isBefore(r,u)&&el.isAfter(n,a)}var[o,i]=Range.edges(e),s=!1,l=!1;return el.isPoint(t)?(s=el.compare(t,o)>=0,l=0>=el.compare(t,i)):(s=ea.compare(t,o.path)>=0,l=0>=ea.compare(t,i.path)),s&&l}",
            "intersection": "intersection(e,t){var r=g(e,ef),[n,u]=Range.edges(e),[a,o]=Range.edges(t),s=el.isBefore(n,a)?a:n,l=el.isBefore(u,o)?u:o;return el.isBefore(l,s)?null:function(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?ed(Object(r),!0).forEach(function(t){i(e,t,r[t])}):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):ed(Object(r)).forEach(function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))})}return e}({anchor:s,focus:l},r)}",
            "isBackward": "isBackward(e){var{anchor:t,focus:r}=e;return el.isAfter(t,r)}",
            "isCollapsed": "isCollapsed(e){var{anchor:t,focus:r}=e;return el.equals(t,r)}",
            "isExpanded": "e=>!Range.isCollapsed(e)",
            "isForward": "e=>!Range.isBackward(e)",
            "isRange": "e=>(0,a.isPlainObject)(e)&&el.isPoint(e.anchor)&&el.isPoint(e.focus)",
            "points": "*points(e){yield[e.anchor,\"anchor\"],yield[e.focus,\"focus\"]}",
            "start": "start(e){var[t]=Range.edges(e);return t}",
            "transform": "transform(e,t){var r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};return(0,o.produce)(e,e=>{if(null===e)return null;var n,u,{affinity:a=\"inward\"}=r;if(\"inward\"===a){var o=Range.isCollapsed(e);Range.isForward(e)?(n=\"forward\",u=o?n:\"backward\"):(n=\"backward\",u=o?n:\"forward\")}else\"outward\"===a?Range.isForward(e)?(n=\"backward\",u=\"forward\"):(n=\"forward\",u=\"backward\"):(n=a,u=a);var i=el.transform(e.anchor,t,{affinity:n}),s=el.transform(e.focus,t,{affinity:u});if(!i||!s)return null;e.anchor=i,e.focus=s})}"
        },
        "Scrubber": {
            "setScrubber": "setScrubber(e){eh=e}",
            "stringify": "e=>JSON.stringify(e,eh)"
        },
        "Text": {
            "equals": "equals(e,t){var r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},{loose:n=!1}=r;function u(e){return g(e,eC)}return ep(n?g(e,eC):e,n?g(t,eC):t)}",
            "isText": "e=>(0,a.isPlainObject)(e)&&\"string\"==typeof e.text",
            "isTextList": "e=>Array.isArray(e)&&e.every(e=>Text.isText(e))",
            "isTextProps": "e=>void 0!==e.text",
            "matches": "matches(e,t){for(var r in t)if(\"text\"!==r&&(!e.hasOwnProperty(r)||e[r]!==t[r]))return!1;return!0}",
            "decorations": "decorations(e,t){var r=[eE({},e)];for(var n of t){var u=g(n,eg),[a,o]=Range.edges(n),i=[],s=0,l=a.offset,c=o.offset;for(var f of r){var{length:d}=f.text,D=s;if(s+=d,l<=D&&s<=c){Object.assign(f,u),i.push(f);continue}if(l!==c&&(l===s||c===D)||l>s||c<D||c===D&&0!==D){i.push(f);continue}var h=f,v=void 0,p=void 0;if(c<s){var C=c-D;p=eE(eE({},h),{},{text:h.text.slice(C)}),h=eE(eE({},h),{},{text:h.text.slice(0,C)})}if(l>D){var B=l-D;v=eE(eE({},h),{},{text:h.text.slice(0,B)}),h=eE(eE({},h),{},{text:h.text.slice(B)})}Object.assign(h,u),v&&i.push(v),i.push(h),p&&i.push(p)}r=i}return r}"
        },
        "Transforms": {
            "transform": "transform(e,t){e.children=(0,o.createDraft)(e.children);var r=e.selection&&(0,o.createDraft)(e.selection);try{r=eF(e,r,t)}finally{e.children=(0,o.finishDraft)(e.children),r?e.selection=(0,o.isDraft)(r)?(0,o.finishDraft)(r):r:e.selection=null}}",
            "insertNodes": "insertNodes(e,t){var r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};Y.withoutNormalizing(e,()=>{var{hanging:n=!1,voids:u=!1,mode:a=\"lowest\"}=r,{at:o,match:i,select:s}=r;if(Node.isNode(t)&&(t=[t]),0!==t.length){var[l]=t;if(!o&&(o=e.selection?e.selection:e.children.length>0?Y.end(e,[]):[0],s=!0),null==s&&(s=!1),Range.isRange(o)){if(!n&&(o=Y.unhangRange(e,o,{voids:u})),Range.isCollapsed(o))o=o.anchor;else{var[,c]=Range.edges(o),f=Y.pointRef(e,c);eM.delete(e,{at:o}),o=f.unref()}}if(el.isPoint(o)){null==i&&(i=Text.isText(l)?e=>Text.isText(e):e.isInline(l)?t=>Text.isText(t)||Y.isInline(e,t):t=>Element.isElement(t)&&Y.isBlock(e,t));var[d]=Y.nodes(e,{at:o.path,match:i,mode:a,voids:u});if(!d)return;var[,D]=d,h=Y.pathRef(e,D),v=Y.isEnd(e,o,D);eM.splitNodes(e,{at:o,match:i,mode:a,voids:u});var p=h.unref();o=v?ea.next(p):p}var C=ea.parent(o),g=o[o.length-1];if(!(!u&&Y.void(e,{at:C}))){for(var B of t){var E=C.concat(g);g++,e.apply({type:\"insert_node\",path:E,node:B}),o=ea.next(o)}if(o=ea.previous(o),s){var m=Y.end(e,o);m&&eM.select(e,m)}}}})}",
            "liftNodes": "liftNodes(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};Y.withoutNormalizing(e,()=>{var{at:r=e.selection,mode:n=\"lowest\",voids:u=!1}=t,{match:a}=t;if(null==a&&(a=ea.isPath(r)?eP(e,r):t=>Element.isElement(t)&&Y.isBlock(e,t)),r)for(var o of Array.from(Y.nodes(e,{at:r,match:a,mode:n,voids:u}),t=>{var[,r]=t;return Y.pathRef(e,r)})){var i=o.unref();if(i.length<2)throw Error(\"Cannot lift node at a path [\".concat(i,\"] because it has a depth of less than `2`.\"));var[s,l]=Y.node(e,ea.parent(i)),c=i[i.length-1],{length:f}=s.children;if(1===f){var d=ea.next(l);eM.moveNodes(e,{at:i,to:d,voids:u}),eM.removeNodes(e,{at:l,voids:u})}else if(0===c)eM.moveNodes(e,{at:i,to:l,voids:u});else if(c===f-1){var D=ea.next(l);eM.moveNodes(e,{at:i,to:D,voids:u})}else{var h=ea.next(i),v=ea.next(l);eM.splitNodes(e,{at:h,voids:u}),eM.moveNodes(e,{at:i,to:v,voids:u})}}})}",
            "mergeNodes": "mergeNodes(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};Y.withoutNormalizing(e,()=>{var r,n,{match:u,at:a=e.selection}=t,{hanging:o=!1,voids:i=!1,mode:s=\"lowest\"}=t;if(!a)return;if(null==u){if(ea.isPath(a)){var[l]=Y.parent(e,a);u=e=>l.children.includes(e)}else u=t=>Element.isElement(t)&&Y.isBlock(e,t)}if(!o&&Range.isRange(a)&&(a=Y.unhangRange(e,a,{voids:i})),Range.isRange(a)){if(Range.isCollapsed(a))a=a.anchor;else{var[,c]=Range.edges(a),f=Y.pointRef(e,c);eM.delete(e,{at:a}),a=f.unref(),null==t.at&&eM.select(e,a)}}var[d]=Y.nodes(e,{at:a,match:u,voids:i,mode:s}),D=Y.previous(e,{at:a,match:u,voids:i,mode:s});if(!!d&&!!D){var[h,v]=d,[p,C]=D;if(0!==v.length&&0!==C.length){var B=ea.next(C),E=ea.common(v,C),m=ea.isSibling(v,C),A=Array.from(Y.levels(e,{at:v}),e=>{var[t]=e;return t}).slice(E.length).slice(0,-1),F=Y.above(e,{at:v,mode:\"highest\",match:t=>A.includes(t)&&eO(e,t)}),b=F&&Y.pathRef(e,F[1]);if(Text.isText(h)&&Text.isText(p)){var y=g(h,eb);n=p.text.length,r=y}else if(Element.isElement(h)&&Element.isElement(p)){var y=g(h,ey);n=p.children.length,r=y}else throw Error(\"Cannot merge the node at path [\".concat(v,\"] with the previous sibling because it is not the same kind: \").concat(ev.stringify(h),\" \").concat(ev.stringify(p)));!m&&eM.moveNodes(e,{at:v,to:B,voids:i}),b&&eM.removeNodes(e,{at:b.current,voids:i}),Element.isElement(p)&&Y.isEmpty(e,p)||Text.isText(p)&&\"\"===p.text&&0!==C[C.length-1]?eM.removeNodes(e,{at:C,voids:i}):e.apply({type:\"merge_node\",path:B,position:n,properties:r}),b&&b.unref()}}})}",
            "moveNodes": "moveNodes(e,t){Y.withoutNormalizing(e,()=>{var{to:r,at:n=e.selection,mode:u=\"lowest\",voids:a=!1}=t,{match:o}=t;if(n){null==o&&(o=ea.isPath(n)?eP(e,n):t=>Element.isElement(t)&&Y.isBlock(e,t));var i=Y.pathRef(e,r);for(var s of Array.from(Y.nodes(e,{at:n,match:o,mode:u,voids:a}),t=>{var[,r]=t;return Y.pathRef(e,r)})){var l=s.unref(),c=i.current;0!==l.length&&e.apply({type:\"move_node\",path:l,newPath:c}),i.current&&ea.isSibling(c,l)&&ea.isAfter(c,l)&&(i.current=ea.next(i.current))}i.unref()}})}",
            "removeNodes": "removeNodes(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};Y.withoutNormalizing(e,()=>{var{hanging:r=!1,voids:n=!1,mode:u=\"lowest\"}=t,{at:a=e.selection,match:o}=t;if(a)for(var i of(null==o&&(o=ea.isPath(a)?eP(e,a):t=>Element.isElement(t)&&Y.isBlock(e,t)),!r&&Range.isRange(a)&&(a=Y.unhangRange(e,a,{voids:n})),Array.from(Y.nodes(e,{at:a,match:o,mode:u,voids:n}),t=>{var[,r]=t;return Y.pathRef(e,r)}))){var s=i.unref();if(s){var[l]=Y.node(e,s);e.apply({type:\"remove_node\",path:s,node:l})}}})}",
            "setNodes": "setNodes(e,t){var r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};Y.withoutNormalizing(e,()=>{var{match:n,at:u=e.selection,compare:a,merge:o}=r,{hanging:i=!1,mode:s=\"lowest\",split:l=!1,voids:c=!1}=r;if(u){if(null==n&&(n=ea.isPath(u)?eP(e,u):t=>Element.isElement(t)&&Y.isBlock(e,t)),!i&&Range.isRange(u)&&(u=Y.unhangRange(e,u,{voids:c})),l&&Range.isRange(u)){if(Range.isCollapsed(u)&&Y.leaf(e,u.anchor)[0].text.length>0)return;var f=Y.rangeRef(e,u,{affinity:\"inward\"}),[d,D]=Range.edges(u),h=\"lowest\"===s?\"lowest\":\"highest\",v=Y.isEnd(e,D,D.path);eM.splitNodes(e,{at:D,match:n,mode:h,voids:c,always:!v});var p=Y.isStart(e,d,d.path);eM.splitNodes(e,{at:d,match:n,mode:h,voids:c,always:!p}),u=f.unref(),null==r.at&&eM.select(e,u)}for(var[C,g]of(!a&&(a=(e,t)=>e!==t),Y.nodes(e,{at:u,match:n,mode:s,voids:c}))){var B={},E={};if(0!==g.length){var m=!1;for(var A in t)\"children\"!==A&&\"text\"!==A&&a(t[A],C[A])&&(m=!0,C.hasOwnProperty(A)&&(B[A]=C[A]),o?null!=t[A]&&(E[A]=o(C[A],t[A])):null!=t[A]&&(E[A]=t[A]));m&&e.apply({type:\"set_node\",path:g,properties:B,newProperties:E})}}}})}",
            "splitNodes": "splitNodes(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};Y.withoutNormalizing(e,()=>{var r,n,{mode:u=\"lowest\",voids:a=!1}=t,{match:o,at:i=e.selection,height:s=0,always:l=!1}=t;if(null==o&&(o=t=>Element.isElement(t)&&Y.isBlock(e,t)),Range.isRange(i)&&(i=ek(e,i)),ea.isPath(i)){var c=i,f=Y.point(e,c),[d]=Y.parent(e,c);o=e=>e===d,s=f.path.length-c.length+1,i=f,l=!0}if(i){var D=Y.pointRef(e,i,{affinity:\"backward\"});try{var[h]=Y.nodes(e,{at:i,match:o,mode:u,voids:a});if(!h)return;var v=Y.void(e,{at:i,mode:\"highest\"});if(!a&&v){var[p,C]=v;if(Element.isElement(p)&&e.isInline(p)){var g=Y.after(e,C);if(!g){var B=ea.next(C);eM.insertNodes(e,{text:\"\"},{at:B,voids:a}),g=Y.point(e,B)}i=g,l=!0}s=i.path.length-C.length+1,l=!0}r=Y.pointRef(e,i);var E=i.path.length-s,[,m]=h,A=i.path.slice(0,E),F=0===s?i.offset:i.path[E]+0;for(var[b,y]of Y.levels(e,{at:A,reverse:!0,voids:a})){var w=!1;if(y.length<m.length||0===y.length||!a&&Element.isElement(b)&&Y.isVoid(e,b))break;var x=D.current,O=Y.isEnd(e,x,y);if(l||!D||!Y.isEdge(e,x,y)){w=!0;var k=Node.extractProps(b);e.apply({type:\"split_node\",path:y,position:F,properties:k})}F=y[y.length-1]+(w||O?1:0)}if(null==t.at){var P=r.current||Y.end(e,[]);eM.select(e,P)}}finally{D.unref(),null===(n=r)||void 0===n||n.unref()}}})}",
            "unsetNodes": "unsetNodes(e,t){var r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};!Array.isArray(t)&&(t=[t]);var n={};for(var u of t)n[u]=null;eM.setNodes(e,n,r)}",
            "unwrapNodes": "unwrapNodes(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};Y.withoutNormalizing(e,()=>{var{mode:r=\"lowest\",split:n=!1,voids:u=!1}=t,{at:a=e.selection,match:o}=t;if(a){null==o&&(o=ea.isPath(a)?eP(e,a):t=>Element.isElement(t)&&Y.isBlock(e,t)),ea.isPath(a)&&(a=Y.range(e,a));var i=Range.isRange(a)?Y.rangeRef(e,a):null,s=Array.from(Y.nodes(e,{at:a,match:o,mode:r,voids:u}),t=>{var[,r]=t;return Y.pathRef(e,r)}).reverse();for(var l of s)!function(t){var r=t.unref(),[a]=Y.node(e,r),o=Y.range(e,r);n&&i&&(o=Range.intersection(i.current,o)),eM.liftNodes(e,{at:o,match:e=>Element.isAncestor(a)&&a.children.includes(e),voids:u})}(l);i&&i.unref()}})}",
            "wrapNodes": "wrapNodes(e,t){var r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};Y.withoutNormalizing(e,()=>{var{mode:n=\"lowest\",split:u=!1,voids:a=!1}=r,{match:o,at:i=e.selection}=r;if(i){if(null==o&&(o=ea.isPath(i)?eP(e,i):e.isInline(t)?t=>Element.isElement(t)&&Y.isInline(e,t)||Text.isText(t):t=>Element.isElement(t)&&Y.isBlock(e,t)),u&&Range.isRange(i)){var[s,l]=Range.edges(i),c=Y.rangeRef(e,i,{affinity:\"inward\"});eM.splitNodes(e,{at:l,match:o,voids:a}),eM.splitNodes(e,{at:s,match:o,voids:a}),i=c.unref(),null==r.at&&eM.select(e,i)}for(var[,f]of Array.from(Y.nodes(e,{at:i,match:e.isInline(t)?t=>Element.isElement(t)&&Y.isBlock(e,t):e=>Y.isEditor(e),mode:\"lowest\",voids:a}))){var d=Range.isRange(i)?Range.intersection(i,Y.range(e,f)):i;if(d){var D=Array.from(Y.nodes(e,{at:d,match:o,mode:n,voids:a}));if(D.length>0&&\"continue\"===function(){var[r]=D,n=D[D.length-1],[,u]=r,[,o]=n;if(0===u.length&&0===o.length)return\"continue\";var i=ea.equals(u,o)?ea.parent(u):ea.common(u,o),s=Y.range(e,u,o),[l]=Y.node(e,i),c=i.length+1,f=ea.next(o.slice(0,c)),d=ex(ex({},t),{},{children:[]});eM.insertNodes(e,d,{at:f,voids:a}),eM.moveNodes(e,{at:s,match:e=>Element.isAncestor(l)&&l.children.includes(e),to:f.concat(0),voids:a})}())continue}}}})}",
            "collapse": "collapse(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},{edge:r=\"anchor\"}=t,{selection:n}=e;if(!!n){if(\"anchor\"===r)eM.select(e,n.anchor);else if(\"focus\"===r)eM.select(e,n.focus);else if(\"start\"===r){var[u]=Range.edges(n);eM.select(e,u)}else if(\"end\"===r){var[,a]=Range.edges(n);eM.select(e,a)}}}",
            "deselect": "deselect(e){var{selection:t}=e;t&&e.apply({type:\"set_selection\",properties:t,newProperties:null})}",
            "move": "move(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},{selection:r}=e,{distance:n=1,unit:u=\"character\",reverse:a=!1}=t,{edge:o=null}=t;if(r){\"start\"===o&&(o=Range.isBackward(r)?\"focus\":\"anchor\"),\"end\"===o&&(o=Range.isBackward(r)?\"anchor\":\"focus\");var{anchor:i,focus:s}=r,l={distance:n,unit:u},c={};if(null==o||\"anchor\"===o){var f=a?Y.before(e,i,l):Y.after(e,i,l);f&&(c.anchor=f)}if(null==o||\"focus\"===o){var d=a?Y.before(e,s,l):Y.after(e,s,l);d&&(c.focus=d)}eM.setSelection(e,c)}}",
            "select": "select(e,t){var{selection:r}=e;if(t=Y.range(e,t),r){eM.setSelection(e,t);return}if(!Range.isRange(t))throw Error(\"When setting the selection and the current selection is `null` you must provide at least an `anchor` and `focus`, but you passed: \".concat(ev.stringify(t)));e.apply({type:\"set_selection\",properties:r,newProperties:t})}",
            "setPoint": "setPoint(e,t){var r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},{selection:n}=e,{edge:u=\"both\"}=r;if(n){\"start\"===u&&(u=Range.isBackward(n)?\"focus\":\"anchor\"),\"end\"===u&&(u=Range.isBackward(n)?\"anchor\":\"focus\");var{anchor:a,focus:o}=n,i=\"anchor\"===u?a:o;eM.setSelection(e,{[\"anchor\"===u?\"anchor\":\"focus\"]:eS(eS({},i),t)})}}",
            "setSelection": "setSelection(e,t){var{selection:r}=e,n={},u={};if(r){for(var a in t)(\"anchor\"===a&&null!=t.anchor&&!el.equals(t.anchor,r.anchor)||\"focus\"===a&&null!=t.focus&&!el.equals(t.focus,r.focus)||\"anchor\"!==a&&\"focus\"!==a&&t[a]!==r[a])&&(n[a]=r[a],u[a]=t[a]);Object.keys(n).length>0&&e.apply({type:\"set_selection\",properties:n,newProperties:u})}}",
            "delete": "delete(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};Y.withoutNormalizing(e,()=>{var r,{reverse:n=!1,unit:u=\"character\",distance:a=1,voids:o=!1}=t,{at:i=e.selection,hanging:s=!1}=t;if(!!i){var l=!1;if(Range.isRange(i)&&Range.isCollapsed(i)&&(l=!0,i=i.anchor),el.isPoint(i)){var c=Y.void(e,{at:i,mode:\"highest\"});if(!o&&c){var[,f]=c;i=f}else{var d={unit:u,distance:a},D=n?Y.before(e,i,d)||Y.start(e,[]):Y.after(e,i,d)||Y.end(e,[]);i={anchor:i,focus:D},s=!0}}if(ea.isPath(i)){eM.removeNodes(e,{at:i,voids:o});return}if(!Range.isCollapsed(i)){if(!s){var[,h]=Range.edges(i),v=Y.end(e,[]);!el.equals(h,v)&&(i=Y.unhangRange(e,i,{voids:o}))}var[p,C]=Range.edges(i),g=Y.above(e,{match:t=>Element.isElement(t)&&Y.isBlock(e,t),at:p,voids:o}),B=Y.above(e,{match:t=>Element.isElement(t)&&Y.isBlock(e,t),at:C,voids:o}),E=g&&B&&!ea.equals(g[1],B[1]),m=ea.equals(p.path,C.path),A=o?null:Y.void(e,{at:p,mode:\"highest\"}),F=o?null:Y.void(e,{at:C,mode:\"highest\"});if(A){var b=Y.before(e,p);b&&g&&ea.isAncestor(g[1],b.path)&&(p=b)}if(F){var y=Y.after(e,C);y&&B&&ea.isAncestor(B[1],y.path)&&(C=y)}var w=[];for(var x of Y.nodes(e,{at:i,voids:o})){var[O,k]=x;(!r||0!==ea.compare(k,r))&&(!o&&Element.isElement(O)&&Y.isVoid(e,O)||!ea.isCommon(k,p.path)&&!ea.isCommon(k,C.path))&&(w.push(x),r=k)}var P=Array.from(w,t=>{var[,r]=t;return Y.pathRef(e,r)}),j=Y.pointRef(e,p),S=Y.pointRef(e,C),T=\"\";if(!m&&!A){var R=j.current,[M]=Y.leaf(e,R),{path:N}=R,{offset:z}=p,I=M.text.slice(z);I.length>0&&(e.apply({type:\"remove_text\",path:N,offset:z,text:I}),T=I)}if(P.reverse().map(e=>e.unref()).filter(e=>null!==e).forEach(t=>eM.removeNodes(e,{at:t,voids:o})),!F){var W=S.current,[L]=Y.leaf(e,W),{path:_}=W,q=m?p.offset:0,V=L.text.slice(q,C.offset);V.length>0&&(e.apply({type:\"remove_text\",path:_,offset:q,text:V}),T=V)}!m&&E&&S.current&&j.current&&eM.mergeNodes(e,{at:S.current,hanging:!0,voids:o}),l&&n&&\"character\"===u&&T.length>1&&T.match(/[\\u0E00-\\u0E7F]+/)&&eM.insertText(e,T.slice(0,T.length-a));var U=j.unref(),H=S.unref(),K=n?U||H:H||U;null==t.at&&K&&eM.select(e,K)}}})}",
            "insertFragment": "insertFragment(e,t){var r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};Y.withoutNormalizing(e,()=>{var n,{hanging:u=!1,voids:a=!1}=r,{at:o=e.selection}=r;if(!t.length)return;if(!!o){if(Range.isRange(o)){if(!u&&(o=Y.unhangRange(e,o,{voids:a})),Range.isCollapsed(o))o=o.anchor;else{var[,i]=Range.edges(o);if(!a&&Y.void(e,{at:i}))return;var s=Y.pointRef(e,i);eM.delete(e,{at:o}),o=s.unref()}}else ea.isPath(o)&&(o=Y.start(e,o));if(!(!a&&Y.void(e,{at:o}))){var l=Y.above(e,{at:o,match:t=>Element.isElement(t)&&Y.isInline(e,t),mode:\"highest\",voids:a});if(l){var[,c]=l;Y.isEnd(e,o,c)?o=Y.after(e,c):Y.isStart(e,o,c)&&(o=Y.before(e,c))}var[,f]=Y.above(e,{match:t=>Element.isElement(t)&&Y.isBlock(e,t),at:o,voids:a}),d=Y.isStart(e,o,f),D=Y.isEnd(e,o,f),h=d&&D,v=!d||d&&D,p=!D,[,C]=Node.first({children:t},[]),[,g]=Node.last({children:t},[]),B=[],E=t=>{var[r,n]=t;return 0!==n.length&&(!!h||!(v&&ea.isAncestor(n,C)&&Element.isElement(r)&&!e.isVoid(r)&&!e.isInline(r)||p&&ea.isAncestor(n,g)&&Element.isElement(r)&&!e.isVoid(r)&&!e.isInline(r))&&!0)};for(var m of Node.nodes({children:t},{pass:E}))E(m)&&B.push(m);var A=[],F=[],b=[],y=!0,w=!1;for(var[x]of B)Element.isElement(x)&&!e.isInline(x)?(y=!1,w=!0,F.push(x)):y?A.push(x):b.push(x);var[O]=Y.nodes(e,{at:o,match:t=>Text.isText(t)||Y.isInline(e,t),mode:\"highest\",voids:a}),[,k]=O,P=Y.isStart(e,o,k),j=Y.isEnd(e,o,k),S=Y.pathRef(e,D&&!b.length?ea.next(f):f),T=Y.pathRef(e,j?ea.next(k):k);eM.splitNodes(e,{at:o,match:t=>w?Element.isElement(t)&&Y.isBlock(e,t):Text.isText(t)||Y.isInline(e,t),mode:w?\"lowest\":\"highest\",always:w&&(!d||A.length>0)&&(!D||b.length>0),voids:a});var R=Y.pathRef(e,!P||P&&j?ea.next(k):k);if(eM.insertNodes(e,A,{at:R.current,match:t=>Text.isText(t)||Y.isInline(e,t),mode:\"highest\",voids:a}),h&&!A.length&&F.length&&!b.length&&eM.delete(e,{at:f,voids:a}),eM.insertNodes(e,F,{at:S.current,match:t=>Element.isElement(t)&&Y.isBlock(e,t),mode:\"lowest\",voids:a}),eM.insertNodes(e,b,{at:T.current,match:t=>Text.isText(t)||Y.isInline(e,t),mode:\"highest\",voids:a}),!r.at&&(b.length>0&&T.current?n=ea.previous(T.current):F.length>0&&S.current?n=ea.previous(S.current):R.current&&(n=ea.previous(R.current)),n)){var M=Y.end(e,n);eM.select(e,M)}R.unref(),S.unref(),T.unref()}}})}",
            "insertText": "insertText(e,t){var r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};Y.withoutNormalizing(e,()=>{var{voids:n=!1}=r,{at:u=e.selection}=r;if(!!u){if(ea.isPath(u)&&(u=Y.range(e,u)),Range.isRange(u)){if(Range.isCollapsed(u))u=u.anchor;else{var a=Range.end(u);if(!n&&Y.void(e,{at:a}))return;var o=Range.start(u),i=Y.pointRef(e,o),s=Y.pointRef(e,a);eM.delete(e,{at:u,voids:n});var l=i.unref(),c=s.unref();u=l||c,eM.setSelection(e,{anchor:u,focus:u})}}if(!(!n&&Y.void(e,{at:u}))){var{path:f,offset:d}=u;t.length>0&&e.apply({type:\"insert_text\",path:f,offset:d,text:t})}}})}"
        },
        "createEditor": "()=>{var e={children:[],operations:[],selection:null,marks:null,isInline:()=>!1,isVoid:()=>!1,markableVoid:()=>!1,onChange:()=>{},apply:t=>{for(var r of Y.pathRefs(e))eo.transform(r,t);for(var n of Y.pointRefs(e))ec.transform(n,t);for(var u of Y.rangeRefs(e))eD.transform(u,t);var a,o,i=s.get(e)||[],f=l.get(e)||new Set,d=e=>{if(e){var t=e.join(\",\");!o.has(t)&&(o.add(t),a.push(e))}};if(ea.operationCanTransformPath(t))for(var D of(a=[],o=new Set,i))d(ea.transform(D,t));else a=i,o=f;for(var h of e.getDirtyPaths(t))d(h);s.set(e,a),l.set(e,o),eM.transform(e,t),e.operations.push(t),Y.normalize(e,{operation:t}),\"set_selection\"===t.type&&(e.marks=null),!c.get(e)&&(c.set(e,!0),Promise.resolve().then(()=>{c.set(e,!1),e.onChange({operation:t}),e.operations=[]}))},addMark:(t,r)=>{var{selection:n,markableVoid:u}=e;if(n){var a=(t,r)=>{if(!Text.isText(t))return!1;var[n,u]=Y.parent(e,r);return!e.isVoid(n)||e.markableVoid(n)},o=Range.isExpanded(n),i=!1;if(!o){var[s,l]=Y.node(e,n);if(s&&a(s,l)){var[f]=Y.parent(e,l);i=f&&e.markableVoid(f)}}if(o||i)eM.setNodes(e,{[t]:r},{match:a,split:!0,voids:!0});else{var d=p(p({},Y.marks(e)||{}),{},{[t]:r});e.marks=d,!c.get(e)&&e.onChange()}}},deleteBackward:t=>{var{selection:r}=e;r&&Range.isCollapsed(r)&&eM.delete(e,{unit:t,reverse:!0})},deleteForward:t=>{var{selection:r}=e;r&&Range.isCollapsed(r)&&eM.delete(e,{unit:t})},deleteFragment:t=>{var{selection:r}=e;r&&Range.isExpanded(r)&&eM.delete(e,{reverse:\"backward\"===t})},getFragment:()=>{var{selection:t}=e;return t?Node.fragment(e,t):[]},insertBreak:()=>{eM.splitNodes(e,{always:!0})},insertSoftBreak:()=>{eM.splitNodes(e,{always:!0})},insertFragment:t=>{eM.insertFragment(e,t)},insertNode:t=>{eM.insertNodes(e,t)},insertText:t=>{var{selection:r,marks:n}=e;if(r){if(n){var u=p({text:t},n);eM.insertNodes(e,u)}else eM.insertText(e,t);e.marks=null}},normalizeNode:t=>{var[r,n]=t;if(!Text.isText(r)){if(Element.isElement(r)&&0===r.children.length){eM.insertNodes(e,{text:\"\"},{at:n.concat(0),voids:!0});return}for(var u=!Y.isEditor(r)&&Element.isElement(r)&&(e.isInline(r)||0===r.children.length||Text.isText(r.children[0])||e.isInline(r.children[0])),a=0,o=0;o<r.children.length;o++,a++){var i=Node.get(e,n);if(!Text.isText(i)){var s=r.children[o],l=i.children[a-1],c=o===r.children.length-1;if((Text.isText(s)||Element.isElement(s)&&e.isInline(s))!==u)eM.removeNodes(e,{at:n.concat(a),voids:!0}),a--;else if(Element.isElement(s)){if(e.isInline(s)){if(null!=l&&Text.isText(l)){if(c){var f={text:\"\"};eM.insertNodes(e,f,{at:n.concat(a+1),voids:!0}),a++}}else{var d={text:\"\"};eM.insertNodes(e,d,{at:n.concat(a),voids:!0}),a++}}}else null!=l&&Text.isText(l)&&(Text.equals(s,l,{loose:!0})?(eM.mergeNodes(e,{at:n.concat(a),voids:!0}),a--):\"\"===l.text?(eM.removeNodes(e,{at:n.concat(a-1),voids:!0}),a--):\"\"===s.text&&(eM.removeNodes(e,{at:n.concat(a),voids:!0}),a--))}}}},removeMark:t=>{var{selection:r}=e;if(r){var n=(t,r)=>{if(!Text.isText(t))return!1;var[n,u]=Y.parent(e,r);return!e.isVoid(n)||e.markableVoid(n)},u=Range.isExpanded(r),a=!1;if(!u){var[o,i]=Y.node(e,r);if(o&&n(o,i)){var[s]=Y.parent(e,i);a=s&&e.markableVoid(s)}}if(u||a)eM.unsetNodes(e,t,{match:n,split:!0,voids:!0});else{var l=p({},Y.marks(e)||{});delete l[t],e.marks=l,!c.get(e)&&e.onChange()}}},getDirtyPaths:e=>{switch(e.type){case\"insert_text\":case\"remove_text\":case\"set_node\":var{path:t}=e;return ea.levels(t);case\"insert_node\":var{node:r,path:n}=e;return[...ea.levels(n),...Text.isText(r)?[]:Array.from(Node.nodes(r),e=>{var[,t]=e;return n.concat(t)})];case\"merge_node\":var{path:u}=e;return[...ea.ancestors(u),ea.previous(u)];case\"move_node\":var{path:a,newPath:o}=e;if(ea.equals(a,o))return[];var i=[],s=[];for(var l of ea.ancestors(a)){var c=ea.transform(l,e);i.push(c)}for(var f of ea.ancestors(o)){var d=ea.transform(f,e);s.push(d)}var D=s[s.length-1],h=o[o.length-1];return[...i,...s,D.concat(h)];case\"remove_node\":var{path:v}=e;return[...ea.ancestors(v)];case\"split_node\":var{path:p}=e;return[...ea.levels(p),ea.next(p)];default:return[]}},shouldNormalize:e=>{var{iteration:t,initialDirtyPathsLength:r}=e,n=42*r;if(t>n)throw Error(\"Could not completely normalize the editor after \".concat(n,\" iterations! This is usually due to incorrect normalization logic that leaves a node in an invalid state.\"));return!0}};return e}"
    }
}