{
    "exports": {
        "Editor": {
            "above": "above(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},{voids:r=!1,mode:n=\"lowest\",at:i=e.selection,match:o}=t;if(i){var a=G.path(e,i);for(var[u,s]of G.levels(e,{at:a,voids:r,match:o,reverse:\"lowest\"===n}))if(!Text.isText(u)){if(Range.isRange(i)){if(eo.isAncestor(s,i.anchor.path)&&eo.isAncestor(s,i.focus.path))return[u,s]}else if(!eo.equals(a,s))return[u,s]}}}",
            "addMark": "addMark(e,t,r){e.addMark(t,r)}",
            "after": "after(e,t){var r,n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},i=G.point(e,t,{edge:\"end\"}),o=G.end(e,[]),{distance:a=1}=n,u=0;for(var s of G.positions(e,X(X({},n),{},{at:{anchor:i,focus:o}}))){if(u>a)break;0!==u&&(r=s),u++}return r}",
            "before": "before(e,t){var r,n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},i=G.start(e,[]),o=G.point(e,t,{edge:\"start\"}),{distance:a=1}=n,u=0;for(var s of G.positions(e,X(X({},n),{},{at:{anchor:i,focus:o},reverse:!0}))){if(u>a)break;0!==u&&(r=s),u++}return r}",
            "deleteBackward": "deleteBackward(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},{unit:r=\"character\"}=t;e.deleteBackward(r)}",
            "deleteForward": "deleteForward(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},{unit:r=\"character\"}=t;e.deleteForward(r)}",
            "deleteFragment": "deleteFragment(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},{direction:r=\"forward\"}=t;e.deleteFragment(r)}",
            "edges": "(e,t)=>[G.start(e,t),G.end(e,t)]",
            "end": "(e,t)=>G.point(e,t,{edge:\"end\"})",
            "first": "first(e,t){var r=G.path(e,t,{edge:\"start\"});return G.node(e,r)}",
            "fragment": "fragment(e,t){var r=G.range(e,t);return Node.fragment(e,r)}",
            "hasBlocks": "(e,t)=>t.children.some(t=>Element.isElement(t)&&G.isBlock(e,t))",
            "hasInlines": "(e,t)=>t.children.some(t=>Text.isText(t)||G.isInline(e,t))",
            "hasTexts": "(e,t)=>t.children.every(e=>Text.isText(e))",
            "insertBreak": "insertBreak(e){e.insertBreak()}",
            "insertSoftBreak": "insertSoftBreak(e){e.insertSoftBreak()}",
            "insertFragment": "insertFragment(e,t){e.insertFragment(t)}",
            "insertNode": "insertNode(e,t){e.insertNode(t)}",
            "insertText": "insertText(e,t){e.insertText(t)}",
            "isBlock": "(e,t)=>!e.isInline(t)",
            "isEditor": "isEditor(e){var t=Q.get(e);if(void 0!==t)return t;if(!(0,o.isPlainObject)(e))return!1;var r=\"function\"==typeof e.addMark&&\"function\"==typeof e.apply&&\"function\"==typeof e.deleteBackward&&\"function\"==typeof e.deleteForward&&\"function\"==typeof e.deleteFragment&&\"function\"==typeof e.insertBreak&&\"function\"==typeof e.insertSoftBreak&&\"function\"==typeof e.insertFragment&&\"function\"==typeof e.insertNode&&\"function\"==typeof e.insertText&&\"function\"==typeof e.isInline&&\"function\"==typeof e.isVoid&&\"function\"==typeof e.normalizeNode&&\"function\"==typeof e.onChange&&\"function\"==typeof e.removeMark&&\"function\"==typeof e.getDirtyPaths&&(null===e.marks||(0,o.isPlainObject)(e.marks))&&(null===e.selection||Range.isRange(e.selection))&&Node.isNodeList(e.children)&&ei.isOperationList(e.operations);return Q.set(e,r),r}",
            "isEnd": "isEnd(e,t,r){var n=G.end(e,r);return el.equals(t,n)}",
            "isEdge": "(e,t,r)=>G.isStart(e,t,r)||G.isEnd(e,t,r)",
            "isEmpty": "isEmpty(e,t){var{children:r}=t,[n]=r;return 0===r.length||1===r.length&&Text.isText(n)&&\"\"===n.text&&!e.isVoid(t)}",
            "isInline": "(e,t)=>e.isInline(t)",
            "isNormalizing": "isNormalizing(e){var t=d.get(e);return void 0===t||t}",
            "isStart": "isStart(e,t,r){if(0!==t.offset)return!1;var n=G.start(e,r);return el.equals(t,n)}",
            "isVoid": "(e,t)=>e.isVoid(t)",
            "last": "last(e,t){var r=G.path(e,t,{edge:\"end\"});return G.node(e,r)}",
            "leaf": "leaf(e,t){var r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},n=G.path(e,t,r);return[Node.leaf(e,n),n]}",
            "levels": "*levels(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},{at:r=e.selection,reverse:n=!1,voids:i=!1}=t,{match:o}=t;if(null==o&&(o=()=>!0),r){var a=[],u=G.path(e,r);for(var[s,l]of Node.levels(e,u))if(o(s,l)&&(a.push([s,l]),!i&&Element.isElement(s)&&G.isVoid(e,s)))break;n&&a.reverse(),yield*a}}",
            "marks": "marks(e){var{marks:t,selection:r}=e;if(!r)return null;if(t)return t;if(Range.isExpanded(r)){var[n]=G.nodes(e,{match:Text.isText});if(!n)return{};var[i]=n;return C(i,J)}var{anchor:o}=r,{path:a}=o,[u]=G.leaf(e,a);if(0===o.offset){var s=G.previous(e,{at:a,match:Text.isText});if(!G.above(e,{match:t=>Element.isElement(t)&&G.isVoid(e,t)&&e.markableVoid(t)})){var l=G.above(e,{match:t=>Element.isElement(t)&&G.isBlock(e,t)});if(s&&l){var[c,d]=s,[,f]=l;eo.isAncestor(f,d)&&(u=c)}}}return C(u,K)}",
            "next": "next(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},{mode:r=\"lowest\",voids:n=!1}=t,{match:i,at:o=e.selection}=t;if(!!o){var a=G.after(e,o,{voids:n});if(a){var[,u]=G.last(e,[]),s=[a.path,u];if(eo.isPath(o)&&0===o.length)throw Error(\"Cannot get the next node from the root node!\");if(null==i){if(eo.isPath(o)){var[l]=G.parent(e,o);i=e=>l.children.includes(e)}else i=()=>!0}var[c]=G.nodes(e,{at:s,match:i,mode:r,voids:n});return c}}}",
            "node": "node(e,t){var r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},n=G.path(e,t,r);return[Node.get(e,n),n]}",
            "nodes": "*nodes(e){var t,r,n,i=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},{at:o=e.selection,mode:a=\"all\",universal:u=!1,reverse:s=!1,voids:l=!1}=i,{match:c}=i;if(!c&&(c=()=>!0),o){if(Y.isSpan(o))t=o[0],r=o[1];else{var d=G.path(e,o,{edge:\"start\"}),f=G.path(e,o,{edge:\"end\"});t=s?f:d,r=s?d:f}var h=Node.nodes(e,{reverse:s,from:t,to:r,pass:t=>{var[r]=t;return!l&&Element.isElement(r)&&G.isVoid(e,r)}}),p=[];for(var[v,D]of h){var g=n&&0===eo.compare(D,n[1]);if(\"highest\"!==a||!g){if(!c(v,D)){if(u&&!g&&Text.isText(v))return;continue}if(\"lowest\"===a&&g){n=[v,D];continue}var C=\"lowest\"===a?n:[v,D];C&&(u?p.push(C):yield C),n=[v,D]}}\"lowest\"===a&&n&&(u?p.push(n):yield n),u&&(yield*p)}}",
            "normalize": "normalize(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},{force:r=!1,operation:n}=t,i=e=>s.get(e)||[],o=e=>l.get(e)||new Set,a=e=>{var t=i(e).pop(),r=t.join(\",\");return o(e).delete(r),t};if(!!G.isNormalizing(e)){if(r){var u=Array.from(Node.nodes(e),e=>{var[,t]=e;return t}),c=new Set(u.map(e=>e.join(\",\")));s.set(e,u),l.set(e,c)}0!==i(e).length&&G.withoutNormalizing(e,()=>{for(var t of i(e))if(Node.has(e,t)){var r=G.node(e,t),[o,u]=r;Element.isElement(o)&&0===o.children.length&&e.normalizeNode(r,{operation:n})}for(var s=i(e),l=s.length,c=0;0!==s.length;){if(!e.shouldNormalize({dirtyPaths:s,iteration:c,initialDirtyPathsLength:l,operation:n}))return;var d=a(e);if(Node.has(e,d)){var f=G.node(e,d);e.normalizeNode(f,{operation:n})}c++,s=i(e)}})}}",
            "parent": "parent(e,t){var r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},n=G.path(e,t,r),i=eo.parent(n);return G.node(e,i)}",
            "path": "path(e,t){var r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},{depth:n,edge:i}=r;if(eo.isPath(t)){if(\"start\"===i){var[,o]=Node.first(e,t);t=o}else if(\"end\"===i){var[,a]=Node.last(e,t);t=a}}return Range.isRange(t)&&(t=\"start\"===i?Range.start(t):\"end\"===i?Range.end(t):eo.common(t.anchor.path,t.focus.path)),el.isPoint(t)&&(t=t.path),null!=n&&(t=t.slice(0,n)),t}",
            "hasPath": "(e,t)=>Node.has(e,t)",
            "pathRef": "pathRef(e,t){var r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},{affinity:n=\"forward\"}=r,i={current:t,affinity:n,unref(){var{current:t}=i;return G.pathRefs(e).delete(i),i.current=null,t}};return G.pathRefs(e).add(i),i}",
            "pathRefs": "pathRefs(e){var t=f.get(e);return!t&&(t=new Set,f.set(e,t)),t}",
            "point": "point(e,t){var r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},{edge:n=\"start\"}=r;if(eo.isPath(t)){if(\"end\"===n){var i,[,o]=Node.last(e,t);i=o}else{var[,a]=Node.first(e,t);i=a}var u=Node.get(e,i);if(!Text.isText(u))throw Error(\"Cannot get the \".concat(n,\" point in the node at path [\").concat(t,\"] because it has no \").concat(n,\" text node.\"));return{path:i,offset:\"end\"===n?u.text.length:0}}if(Range.isRange(t)){var[s,l]=Range.edges(t);return\"start\"===n?s:l}return t}",
            "pointRef": "pointRef(e,t){var r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},{affinity:n=\"forward\"}=r,i={current:t,affinity:n,unref(){var{current:t}=i;return G.pointRefs(e).delete(i),i.current=null,t}};return G.pointRefs(e).add(i),i}",
            "pointRefs": "pointRefs(e){var t=h.get(e);return!t&&(t=new Set,h.set(e,t)),t}",
            "positions": "*positions(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},{at:r=e.selection,unit:n=\"offset\",reverse:i=!1,voids:o=!1}=t;if(r){var a=G.range(e,r),[u,s]=Range.edges(a),l=i?s:u,c=!1,d=\"\",f=0,h=0,p=0;for(var[v,D]of G.nodes(e,{at:r,reverse:i,voids:o})){if(Element.isElement(v)){if(!o&&e.isVoid(v)){yield G.start(e,D);continue}if(e.isInline(v))continue;if(G.hasInlines(e,v)){var g=eo.isAncestor(D,s.path)?s:G.end(e,D),C=eo.isAncestor(D,u.path)?u:G.start(e,D);d=G.string(e,{anchor:C,focus:g},{voids:o}),c=!0}}if(Text.isText(v)){var y=eo.equals(D,l.path);for(y?(h=i?l.offset:v.text.length-l.offset,p=l.offset):(h=v.text.length,p=i?h:0),(y||c||\"offset\"===n)&&(yield{path:D,offset:p},c=!1);;){if(0===f){if(\"\"===d)break;f=function(e,t,r){if(\"character\"===t)return m(e,r);if(\"word\"===t)return b(e,r);if(\"line\"===t||\"block\"===t)return e.length;return 1}(d,n,i),d=A(d,f,i)[1]}if(p=i?p-f:p+f,(h-=f)<0){f=-h;break}f=0,yield{path:D,offset:p}}}}}}",
            "previous": "previous(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},{mode:r=\"lowest\",voids:n=!1}=t,{match:i,at:o=e.selection}=t;if(!!o){var a=G.before(e,o,{voids:n});if(a){var[,u]=G.first(e,[]),s=[a.path,u];if(eo.isPath(o)&&0===o.length)throw Error(\"Cannot get the previous node from the root node!\");if(null==i){if(eo.isPath(o)){var[l]=G.parent(e,o);i=e=>l.children.includes(e)}else i=()=>!0}var[c]=G.nodes(e,{reverse:!0,at:s,match:i,mode:r,voids:n});return c}}}",
            "range": "(e,t,r)=>Range.isRange(t)&&!r?t:{anchor:G.start(e,t),focus:G.end(e,r||t)}",
            "rangeRef": "rangeRef(e,t){var r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},{affinity:n=\"forward\"}=r,i={current:t,affinity:n,unref(){var{current:t}=i;return G.rangeRefs(e).delete(i),i.current=null,t}};return G.rangeRefs(e).add(i),i}",
            "rangeRefs": "rangeRefs(e){var t=p.get(e);return!t&&(t=new Set,p.set(e,t)),t}",
            "removeMark": "removeMark(e,t){e.removeMark(t)}",
            "setNormalizing": "setNormalizing(e,t){d.set(e,t)}",
            "start": "(e,t)=>G.point(e,t,{edge:\"start\"})",
            "string": "string(e,t){var r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},{voids:n=!1}=r,i=G.range(e,t),[o,a]=Range.edges(i),u=\"\";for(var[s,l]of G.nodes(e,{at:i,match:Text.isText,voids:n})){var c=s.text;eo.equals(l,a.path)&&(c=c.slice(0,a.offset)),eo.equals(l,o.path)&&(c=c.slice(o.offset)),u+=c}return u}",
            "unhangRange": "unhangRange(e,t){var r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},{voids:n=!1}=r,[i,o]=Range.edges(t);if(0!==i.offset||0!==o.offset||Range.isCollapsed(t)||eo.hasPrevious(o.path))return t;var a=G.above(e,{at:o,match:t=>Element.isElement(t)&&G.isBlock(e,t),voids:n}),u=a?a[1]:[],s={anchor:G.start(e,i),focus:o},l=!0;for(var[c,d]of G.nodes(e,{at:s,match:Text.isText,reverse:!0,voids:n})){if(l){l=!1;continue}if(\"\"!==c.text||eo.isBefore(d,u)){o={path:d,offset:c.text.length};break}}return{anchor:i,focus:o}}",
            "void": "void(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};return G.above(e,X(X({},t),{},{match:t=>Element.isElement(t)&&G.isVoid(e,t)}))}",
            "withoutNormalizing": "withoutNormalizing(e,t){var r=G.isNormalizing(e);G.setNormalizing(e,!1);try{t()}finally{G.setNormalizing(e,r)}G.normalize(e)}"
        },
        "Element": {
            "isAncestor": "e=>(0,o.isPlainObject)(e)&&Node.isNodeList(e.children)",
            "isElement": "e=>(0,o.isPlainObject)(e)&&Node.isNodeList(e.children)&&!G.isEditor(e)",
            "isElementList": "e=>Array.isArray(e)&&e.every(e=>Element.isElement(e))",
            "isElementProps": "e=>void 0!==e.children",
            "isElementType": "function(e,t){var r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:\"type\";return H(e)&&e[r]===t}",
            "matches": "matches(e,t){for(var r in t)if(\"children\"!==r&&e[r]!==t[r])return!1;return!0}"
        },
        "Node": {
            "ancestor": "ancestor(e,t){var r=Node.get(e,t);if(Text.isText(r))throw Error(\"Cannot get the ancestor node at path [\".concat(t,\"] because it refers to a text node instead: \").concat(ev.stringify(r)));return r}",
            "ancestors": "*ancestors(e,t){var r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};for(var n of eo.ancestors(t,r)){var i=[Node.ancestor(e,n),n];yield i}}",
            "child": "child(e,t){if(Text.isText(e))throw Error(\"Cannot get the child of a text node: \".concat(ev.stringify(e)));var r=e.children[t];if(null==r)throw Error(\"Cannot get child at index `\".concat(t,\"` in node: \").concat(ev.stringify(e)));return r}",
            "children": "*children(e,t){for(var r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},{reverse:n=!1}=r,i=Node.ancestor(e,t),{children:o}=i,a=n?o.length-1:0;n?a>=0:a<o.length;){var u=Node.child(i,a),s=t.concat(a);yield[u,s],a=n?a-1:a+1}}",
            "common": "common(e,t,r){var n=eo.common(t,r);return[Node.get(e,n),n]}",
            "descendant": "descendant(e,t){var r=Node.get(e,t);if(G.isEditor(r))throw Error(\"Cannot get the descendant node at path [\".concat(t,\"] because it refers to the root editor node instead: \").concat(ev.stringify(r)));return r}",
            "descendants": "*descendants(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};for(var[r,n]of Node.nodes(e,t))0!==n.length&&(yield[r,n])}",
            "elements": "*elements(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};for(var[r,n]of Node.nodes(e,t))Element.isElement(r)&&(yield[r,n])}",
            "extractProps": "extractProps(e){if(Element.isAncestor(e)){var t=C(e,Z);return t}var t=C(e,ee);return t}",
            "first": "first(e,t){for(var r=t.slice(),n=Node.get(e,r);n&&!Text.isText(n)&&0!==n.children.length;){;n=n.children[0],r.push(0)}return[n,r]}",
            "fragment": "fragment(e,t){if(Text.isText(e))throw Error(\"Cannot get a fragment starting from a root text node: \".concat(ev.stringify(e)));return(0,a.produce)({children:e.children},e=>{var[r,n]=Range.edges(t);for(var[,i]of Node.nodes(e,{reverse:!0,pass:e=>{var[,r]=e;return!Range.includes(t,r)}})){if(!Range.includes(t,i)){var o=Node.parent(e,i),a=i[i.length-1];o.children.splice(a,1)}if(eo.equals(i,n.path)){var u=Node.leaf(e,i);u.text=u.text.slice(0,n.offset)}if(eo.equals(i,r.path)){var s=Node.leaf(e,i);s.text=s.text.slice(r.offset)}}G.isEditor(e)&&(e.selection=null)}).children}",
            "get": "get(e,t){for(var r=e,n=0;n<t.length;n++){var i=t[n];if(Text.isText(r)||!r.children[i])throw Error(\"Cannot find a descendant at path [\".concat(t,\"] in node: \").concat(ev.stringify(e)));r=r.children[i]}return r}",
            "has": "has(e,t){for(var r=e,n=0;n<t.length;n++){var i=t[n];if(Text.isText(r)||!r.children[i])return!1;r=r.children[i]}return!0}",
            "isNode": "e=>Text.isText(e)||Element.isElement(e)||G.isEditor(e)",
            "isNodeList": "isNodeList(e){if(!Array.isArray(e))return!1;var t=et.get(e);if(void 0!==t)return t;var r=e.every(e=>Node.isNode(e));return et.set(e,r),r}",
            "last": "last(e,t){for(var r=t.slice(),n=Node.get(e,r);n&&!Text.isText(n)&&0!==n.children.length;){;var i=n.children.length-1;n=n.children[i],r.push(i)}return[n,r]}",
            "leaf": "leaf(e,t){var r=Node.get(e,t);if(!Text.isText(r))throw Error(\"Cannot get the leaf node at path [\".concat(t,\"] because it refers to a non-leaf node: \").concat(ev.stringify(r)));return r}",
            "levels": "*levels(e,t){var r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};for(var n of eo.levels(t,r)){var i=Node.get(e,n);yield[i,n]}}",
            "matches": "(e,t)=>Element.isElement(e)&&Element.isElementProps(t)&&Element.matches(e,t)||Text.isText(e)&&Text.isTextProps(t)&&Text.matches(e,t)",
            "nodes": "*nodes(e){for(var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},{pass:r,reverse:n=!1}=t,{from:i=[],to:o}=t,a=new Set,u=[],s=e;!(o&&(n?eo.isBefore(u,o):eo.isAfter(u,o)));){;if(!a.has(s)&&(yield[s,u]),!a.has(s)&&!Text.isText(s)&&0!==s.children.length&&(null==r||!1===r([s,u]))){a.add(s);var l=n?s.children.length-1:0;eo.isAncestor(u,i)&&(l=i[u.length]),u=u.concat(l),s=Node.get(e,u);continue}if(0===u.length)break;if(!n){var c=eo.next(u);if(Node.has(e,c)){u=c,s=Node.get(e,u);continue}}if(n&&0!==u[u.length-1]){u=eo.previous(u),s=Node.get(e,u);continue}u=eo.parent(u),s=Node.get(e,u),a.add(s)}}",
            "parent": "parent(e,t){var r=eo.parent(t),n=Node.get(e,r);if(Text.isText(n))throw Error(\"Cannot get the parent of path [\".concat(t,\"] because it does not exist in the root.\"));return n}",
            "string": "e=>Text.isText(e)?e.text:e.children.map(Node.string).join(\"\")",
            "texts": "*texts(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};for(var[r,n]of Node.nodes(e,t))Text.isText(r)&&(yield[r,n])}"
        },
        "Path": {
            "ancestors": "ancestors(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},{reverse:r=!1}=t,n=eo.levels(e,t);return n=r?n.slice(1):n.slice(0,-1)}",
            "common": "common(e,t){for(var r=[],n=0;n<e.length&&n<t.length;n++){var i=e[n];if(i!==t[n])break;r.push(i)}return r}",
            "compare": "compare(e,t){for(var r=Math.min(e.length,t.length),n=0;n<r;n++){if(e[n]<t[n])return -1;if(e[n]>t[n])return 1}return 0}",
            "endsAfter": "endsAfter(e,t){var r=e.length-1,n=e.slice(0,r),i=t.slice(0,r),o=e[r],a=t[r];return eo.equals(n,i)&&o>a}",
            "endsAt": "endsAt(e,t){var r=e.length,n=e.slice(0,r),i=t.slice(0,r);return eo.equals(n,i)}",
            "endsBefore": "endsBefore(e,t){var r=e.length-1,n=e.slice(0,r),i=t.slice(0,r),o=e[r],a=t[r];return eo.equals(n,i)&&o<a}",
            "equals": "(e,t)=>e.length===t.length&&e.every((e,r)=>e===t[r])",
            "hasPrevious": "e=>e[e.length-1]>0",
            "isAfter": "(e,t)=>1===eo.compare(e,t)",
            "isAncestor": "(e,t)=>e.length<t.length&&0===eo.compare(e,t)",
            "isBefore": "(e,t)=>-1===eo.compare(e,t)",
            "isChild": "(e,t)=>e.length===t.length+1&&0===eo.compare(e,t)",
            "isCommon": "(e,t)=>e.length<=t.length&&0===eo.compare(e,t)",
            "isDescendant": "(e,t)=>e.length>t.length&&0===eo.compare(e,t)",
            "isParent": "(e,t)=>e.length+1===t.length&&0===eo.compare(e,t)",
            "isPath": "e=>Array.isArray(e)&&(0===e.length||\"number\"==typeof e[0])",
            "isSibling": "isSibling(e,t){if(e.length!==t.length)return!1;var r=e.slice(0,-1),n=t.slice(0,-1);return e[e.length-1]!==t[t.length-1]&&eo.equals(r,n)}",
            "levels": "levels(e){for(var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},{reverse:r=!1}=t,n=[],i=0;i<=e.length;i++)n.push(e.slice(0,i));return r&&n.reverse(),n}",
            "next": "next(e){if(0===e.length)throw Error(\"Cannot get the next path of a root path [\".concat(e,\"], because it has no next index.\"));var t=e[e.length-1];return e.slice(0,-1).concat(t+1)}",
            "operationCanTransformPath": "operationCanTransformPath(e){switch(e.type){case\"insert_node\":case\"remove_node\":case\"merge_node\":case\"split_node\":case\"move_node\":return!0;default:return!1}}",
            "parent": "parent(e){if(0===e.length)throw Error(\"Cannot get the parent path of the root path [\".concat(e,\"].\"));return e.slice(0,-1)}",
            "previous": "previous(e){if(0===e.length)throw Error(\"Cannot get the previous path of a root path [\".concat(e,\"], because it has no previous index.\"));var t=e[e.length-1];if(t<=0)throw Error(\"Cannot get the previous path of a first child path [\".concat(e,\"] because it would result in a negative index.\"));return e.slice(0,-1).concat(t-1)}",
            "relative": "relative(e,t){if(!eo.isAncestor(t,e)&&!eo.equals(e,t))throw Error(\"Cannot get the relative path of [\".concat(e,\"] inside ancestor [\").concat(t,\"], because it is not above or equal to the path.\"));return e.slice(t.length)}",
            "transform": "transform(e,t){var r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};if(!e)return null;var n=[...e],{affinity:i=\"forward\"}=r;if(0===e.length)return n;switch(t.type){case\"insert_node\":var{path:o}=t;(eo.equals(o,n)||eo.endsBefore(o,n)||eo.isAncestor(o,n))&&(n[o.length-1]+=1);break;case\"remove_node\":var{path:a}=t;if(eo.equals(a,n)||eo.isAncestor(a,n))return null;eo.endsBefore(a,n)&&(n[a.length-1]-=1);break;case\"merge_node\":var{path:u,position:s}=t;eo.equals(u,n)||eo.endsBefore(u,n)?n[u.length-1]-=1:eo.isAncestor(u,n)&&(n[u.length-1]-=1,n[u.length]+=s);break;case\"split_node\":var{path:l,position:c}=t;if(eo.equals(l,n)){if(\"forward\"===i)n[n.length-1]+=1;else if(\"backward\"!==i)return null}else eo.endsBefore(l,n)?n[l.length-1]+=1:eo.isAncestor(l,n)&&e[l.length]>=c&&(n[l.length-1]+=1,n[l.length]-=c);break;case\"move_node\":var{path:d,newPath:f}=t;if(eo.equals(d,f))break;if(eo.isAncestor(d,n)||eo.equals(d,n)){var h=f.slice();return eo.endsBefore(d,f)&&d.length<f.length&&(h[d.length-1]-=1),h.concat(n.slice(d.length))}eo.isSibling(d,f)&&(eo.isAncestor(f,n)||eo.equals(f,n))?eo.endsBefore(d,n)?n[d.length-1]-=1:n[d.length-1]+=1:eo.endsBefore(f,n)||eo.equals(f,n)||eo.isAncestor(f,n)?(eo.endsBefore(d,n)&&(n[d.length-1]-=1),n[f.length-1]+=1):eo.endsBefore(d,n)&&(eo.equals(f,n)&&(n[f.length-1]+=1),n[d.length-1]-=1)}return n}"
        },
        "Point": {
            "compare": "compare(e,t){var r=eo.compare(e.path,t.path);if(0===r)return e.offset<t.offset?-1:e.offset>t.offset?1:0;return r}",
            "isAfter": "(e,t)=>1===el.compare(e,t)",
            "isBefore": "(e,t)=>-1===el.compare(e,t)",
            "equals": "(e,t)=>e.offset===t.offset&&eo.equals(e.path,t.path)",
            "isPoint": "e=>(0,o.isPlainObject)(e)&&\"number\"==typeof e.offset&&eo.isPath(e.path)",
            "transform": "transform(e,t){var r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};return(0,a.produce)(e,e=>{if(null===e)return null;var{affinity:n=\"forward\"}=r,{path:i,offset:o}=e;switch(t.type){case\"insert_node\":case\"move_node\":e.path=eo.transform(i,t,r);break;case\"insert_text\":eo.equals(t.path,i)&&(t.offset<o||t.offset===o&&\"forward\"===n)&&(e.offset+=t.text.length);break;case\"merge_node\":eo.equals(t.path,i)&&(e.offset+=t.position),e.path=eo.transform(i,t,r);break;case\"remove_text\":eo.equals(t.path,i)&&t.offset<=o&&(e.offset-=Math.min(o-t.offset,t.text.length));break;case\"remove_node\":if(eo.equals(t.path,i)||eo.isAncestor(t.path,i))return null;e.path=eo.transform(i,t,r);break;case\"split_node\":if(eo.equals(t.path,i)){if(t.position===o&&null==n)return null;(t.position<o||t.position===o&&\"forward\"===n)&&(e.offset-=t.position,e.path=eo.transform(i,t,es(es({},r),{},{affinity:\"forward\"})))}else e.path=eo.transform(i,t,r)}})}"
        },
        "Range": {
            "edges": "edges(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},{reverse:r=!1}=t,{anchor:n,focus:i}=e;return Range.isBackward(e)===r?[n,i]:[i,n]}",
            "end": "end(e){var[,t]=Range.edges(e);return t}",
            "equals": "(e,t)=>el.equals(e.anchor,t.anchor)&&el.equals(e.focus,t.focus)",
            "includes": "includes(e,t){if(Range.isRange(t)){if(Range.includes(e,t.anchor)||Range.includes(e,t.focus))return!0;var[r,n]=Range.edges(e),[i,o]=Range.edges(t);return el.isBefore(r,i)&&el.isAfter(n,o)}var[a,u]=Range.edges(e),s=!1,l=!1;return el.isPoint(t)?(s=el.compare(t,a)>=0,l=0>=el.compare(t,u)):(s=eo.compare(t,a.path)>=0,l=0>=eo.compare(t,u.path)),s&&l}",
            "intersection": "intersection(e,t){var r=C(e,ed),[n,i]=Range.edges(e),[o,a]=Range.edges(t),s=el.isBefore(n,o)?o:n,l=el.isBefore(i,a)?i:a;return el.isBefore(l,s)?null:function(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?ef(Object(r),!0).forEach(function(t){u(e,t,r[t])}):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):ef(Object(r)).forEach(function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))})}return e}({anchor:s,focus:l},r)}",
            "isBackward": "isBackward(e){var{anchor:t,focus:r}=e;return el.isAfter(t,r)}",
            "isCollapsed": "isCollapsed(e){var{anchor:t,focus:r}=e;return el.equals(t,r)}",
            "isExpanded": "e=>!Range.isCollapsed(e)",
            "isForward": "e=>!Range.isBackward(e)",
            "isRange": "e=>(0,o.isPlainObject)(e)&&el.isPoint(e.anchor)&&el.isPoint(e.focus)",
            "points": "*points(e){yield[e.anchor,\"anchor\"],yield[e.focus,\"focus\"]}",
            "start": "start(e){var[t]=Range.edges(e);return t}",
            "transform": "transform(e,t){var r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};return(0,a.produce)(e,e=>{if(null===e)return null;var n,i,{affinity:o=\"inward\"}=r;if(\"inward\"===o){var a=Range.isCollapsed(e);Range.isForward(e)?(n=\"forward\",i=a?n:\"backward\"):(n=\"backward\",i=a?n:\"forward\")}else\"outward\"===o?Range.isForward(e)?(n=\"backward\",i=\"forward\"):(n=\"forward\",i=\"backward\"):(n=o,i=o);var u=el.transform(e.anchor,t,{affinity:n}),s=el.transform(e.focus,t,{affinity:i});if(!u||!s)return null;e.anchor=u,e.focus=s})}"
        },
        "Scrubber": {
            "setScrubber": "setScrubber(e){ep=e}",
            "stringify": "e=>JSON.stringify(e,ep)"
        },
        "Text": {
            "equals": "equals(e,t){var r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},{loose:n=!1}=r;function i(e){return C(e,eg)}return eD(n?C(e,eg):e,n?C(t,eg):t)}",
            "isText": "e=>(0,o.isPlainObject)(e)&&\"string\"==typeof e.text",
            "isTextList": "e=>Array.isArray(e)&&e.every(e=>Text.isText(e))",
            "isTextProps": "e=>void 0!==e.text",
            "matches": "matches(e,t){for(var r in t)if(\"text\"!==r&&(!e.hasOwnProperty(r)||e[r]!==t[r]))return!1;return!0}",
            "decorations": "decorations(e,t){var r=[ey({},e)];for(var n of t){var i=C(n,eC),[o,a]=Range.edges(n),u=[],s=0,l=o.offset,c=a.offset;for(var d of r){var{length:f}=d.text,h=s;if(s+=f,l<=h&&s<=c){Object.assign(d,i),u.push(d);continue}if(l!==c&&(l===s||c===h)||l>s||c<h||c===h&&0!==h){u.push(d);continue}var p=d,v=void 0,D=void 0;if(c<s){var g=c-h;D=ey(ey({},p),{},{text:p.text.slice(g)}),p=ey(ey({},p),{},{text:p.text.slice(0,g)})}if(l>h){var m=l-h;v=ey(ey({},p),{},{text:p.text.slice(0,m)}),p=ey(ey({},p),{},{text:p.text.slice(m)})}Object.assign(p,i),v&&u.push(v),u.push(p),D&&u.push(D)}r=u}return r}"
        },
        "Transforms": {
            "transform": "transform(e,t){e.children=(0,a.createDraft)(e.children);var r=e.selection&&(0,a.createDraft)(e.selection);try{r=eb(e,r,t)}finally{e.children=(0,a.finishDraft)(e.children),r?e.selection=(0,a.isDraft)(r)?(0,a.finishDraft)(r):r:e.selection=null}}",
            "insertNodes": "insertNodes(e,t){var r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};G.withoutNormalizing(e,()=>{var{hanging:n=!1,voids:i=!1,mode:o=\"lowest\"}=r,{at:a,match:u,select:s}=r;if(Node.isNode(t)&&(t=[t]),0!==t.length){var[l]=t;if(!a&&(a=e.selection?e.selection:e.children.length>0?G.end(e,[]):[0],s=!0),null==s&&(s=!1),Range.isRange(a)){if(!n&&(a=G.unhangRange(e,a,{voids:i})),Range.isCollapsed(a))a=a.anchor;else{var[,c]=Range.edges(a),d=G.pointRef(e,c);eM.delete(e,{at:a}),a=d.unref()}}if(el.isPoint(a)){null==u&&(u=Text.isText(l)?e=>Text.isText(e):e.isInline(l)?t=>Text.isText(t)||G.isInline(e,t):t=>Element.isElement(t)&&G.isBlock(e,t));var[f]=G.nodes(e,{at:a.path,match:u,mode:o,voids:i});if(!f)return;var[,h]=f,p=G.pathRef(e,h),v=G.isEnd(e,a,h);eM.splitNodes(e,{at:a,match:u,mode:o,voids:i});var D=p.unref();a=v?eo.next(D):D}var g=eo.parent(a),C=a[a.length-1];if(!(!i&&G.void(e,{at:g}))){for(var m of t){var y=g.concat(C);C++,e.apply({type:\"insert_node\",path:y,node:m}),a=eo.next(a)}if(a=eo.previous(a),s){var E=G.end(e,a);E&&eM.select(e,E)}}}})}",
            "liftNodes": "liftNodes(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};G.withoutNormalizing(e,()=>{var{at:r=e.selection,mode:n=\"lowest\",voids:i=!1}=t,{match:o}=t;if(null==o&&(o=eo.isPath(r)?ek(e,r):t=>Element.isElement(t)&&G.isBlock(e,t)),r)for(var a of Array.from(G.nodes(e,{at:r,match:o,mode:n,voids:i}),t=>{var[,r]=t;return G.pathRef(e,r)})){var u=a.unref();if(u.length<2)throw Error(\"Cannot lift node at a path [\".concat(u,\"] because it has a depth of less than `2`.\"));var[s,l]=G.node(e,eo.parent(u)),c=u[u.length-1],{length:d}=s.children;if(1===d){var f=eo.next(l);eM.moveNodes(e,{at:u,to:f,voids:i}),eM.removeNodes(e,{at:l,voids:i})}else if(0===c)eM.moveNodes(e,{at:u,to:l,voids:i});else if(c===d-1){var h=eo.next(l);eM.moveNodes(e,{at:u,to:h,voids:i})}else{var p=eo.next(u),v=eo.next(l);eM.splitNodes(e,{at:p,voids:i}),eM.moveNodes(e,{at:u,to:v,voids:i})}}})}",
            "mergeNodes": "mergeNodes(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};G.withoutNormalizing(e,()=>{var r,n,{match:i,at:o=e.selection}=t,{hanging:a=!1,voids:u=!1,mode:s=\"lowest\"}=t;if(!o)return;if(null==i){if(eo.isPath(o)){var[l]=G.parent(e,o);i=e=>l.children.includes(e)}else i=t=>Element.isElement(t)&&G.isBlock(e,t)}if(!a&&Range.isRange(o)&&(o=G.unhangRange(e,o,{voids:u})),Range.isRange(o)){if(Range.isCollapsed(o))o=o.anchor;else{var[,c]=Range.edges(o),d=G.pointRef(e,c);eM.delete(e,{at:o}),o=d.unref(),null==t.at&&eM.select(e,o)}}var[f]=G.nodes(e,{at:o,match:i,voids:u,mode:s}),h=G.previous(e,{at:o,match:i,voids:u,mode:s});if(!!f&&!!h){var[p,v]=f,[D,g]=h;if(0!==v.length&&0!==g.length){var m=eo.next(g),y=eo.common(v,g),E=eo.isSibling(v,g),B=Array.from(G.levels(e,{at:v}),e=>{var[t]=e;return t}).slice(y.length).slice(0,-1),b=G.above(e,{at:v,mode:\"highest\",match:t=>B.includes(t)&&eO(e,t)}),A=b&&G.pathRef(e,b[1]);if(Text.isText(p)&&Text.isText(D)){var w=C(p,eA);n=D.text.length,r=w}else if(Element.isElement(p)&&Element.isElement(D)){var w=C(p,ew);n=D.children.length,r=w}else throw Error(\"Cannot merge the node at path [\".concat(v,\"] with the previous sibling because it is not the same kind: \").concat(ev.stringify(p),\" \").concat(ev.stringify(D)));!E&&eM.moveNodes(e,{at:v,to:m,voids:u}),A&&eM.removeNodes(e,{at:A.current,voids:u}),Element.isElement(D)&&G.isEmpty(e,D)||Text.isText(D)&&\"\"===D.text&&0!==g[g.length-1]?eM.removeNodes(e,{at:g,voids:u}):e.apply({type:\"merge_node\",path:m,position:n,properties:r}),A&&A.unref()}}})}",
            "moveNodes": "moveNodes(e,t){G.withoutNormalizing(e,()=>{var{to:r,at:n=e.selection,mode:i=\"lowest\",voids:o=!1}=t,{match:a}=t;if(n){null==a&&(a=eo.isPath(n)?ek(e,n):t=>Element.isElement(t)&&G.isBlock(e,t));var u=G.pathRef(e,r);for(var s of Array.from(G.nodes(e,{at:n,match:a,mode:i,voids:o}),t=>{var[,r]=t;return G.pathRef(e,r)})){var l=s.unref(),c=u.current;0!==l.length&&e.apply({type:\"move_node\",path:l,newPath:c}),u.current&&eo.isSibling(c,l)&&eo.isAfter(c,l)&&(u.current=eo.next(u.current))}u.unref()}})}",
            "removeNodes": "removeNodes(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};G.withoutNormalizing(e,()=>{var{hanging:r=!1,voids:n=!1,mode:i=\"lowest\"}=t,{at:o=e.selection,match:a}=t;if(o)for(var u of(null==a&&(a=eo.isPath(o)?ek(e,o):t=>Element.isElement(t)&&G.isBlock(e,t)),!r&&Range.isRange(o)&&(o=G.unhangRange(e,o,{voids:n})),Array.from(G.nodes(e,{at:o,match:a,mode:i,voids:n}),t=>{var[,r]=t;return G.pathRef(e,r)}))){var s=u.unref();if(s){var[l]=G.node(e,s);e.apply({type:\"remove_node\",path:s,node:l})}}})}",
            "setNodes": "setNodes(e,t){var r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};G.withoutNormalizing(e,()=>{var{match:n,at:i=e.selection,compare:o,merge:a}=r,{hanging:u=!1,mode:s=\"lowest\",split:l=!1,voids:c=!1}=r;if(i){if(null==n&&(n=eo.isPath(i)?ek(e,i):t=>Element.isElement(t)&&G.isBlock(e,t)),!u&&Range.isRange(i)&&(i=G.unhangRange(e,i,{voids:c})),l&&Range.isRange(i)){if(Range.isCollapsed(i)&&G.leaf(e,i.anchor)[0].text.length>0)return;var d=G.rangeRef(e,i,{affinity:\"inward\"}),[f,h]=Range.edges(i),p=\"lowest\"===s?\"lowest\":\"highest\",v=G.isEnd(e,h,h.path);eM.splitNodes(e,{at:h,match:n,mode:p,voids:c,always:!v});var D=G.isStart(e,f,f.path);eM.splitNodes(e,{at:f,match:n,mode:p,voids:c,always:!D}),i=d.unref(),null==r.at&&eM.select(e,i)}for(var[g,C]of(!o&&(o=(e,t)=>e!==t),G.nodes(e,{at:i,match:n,mode:s,voids:c}))){var m={},y={};if(0!==C.length){var E=!1;for(var B in t)\"children\"!==B&&\"text\"!==B&&o(t[B],g[B])&&(E=!0,g.hasOwnProperty(B)&&(m[B]=g[B]),a?null!=t[B]&&(y[B]=a(g[B],t[B])):null!=t[B]&&(y[B]=t[B]));E&&e.apply({type:\"set_node\",path:C,properties:m,newProperties:y})}}}})}",
            "splitNodes": "splitNodes(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};G.withoutNormalizing(e,()=>{var r,n,{mode:i=\"lowest\",voids:o=!1}=t,{match:a,at:u=e.selection,height:s=0,always:l=!1}=t;if(null==a&&(a=t=>Element.isElement(t)&&G.isBlock(e,t)),Range.isRange(u)&&(u=ex(e,u)),eo.isPath(u)){var c=u,d=G.point(e,c),[f]=G.parent(e,c);a=e=>e===f,s=d.path.length-c.length+1,u=d,l=!0}if(u){var h=G.pointRef(e,u,{affinity:\"backward\"});try{var[p]=G.nodes(e,{at:u,match:a,mode:i,voids:o});if(!p)return;var v=G.void(e,{at:u,mode:\"highest\"});if(!o&&v){var[D,g]=v;if(Element.isElement(D)&&e.isInline(D)){var C=G.after(e,g);if(!C){var m=eo.next(g);eM.insertNodes(e,{text:\"\"},{at:m,voids:o}),C=G.point(e,m)}u=C,l=!0}s=u.path.length-g.length+1,l=!0}r=G.pointRef(e,u);var y=u.path.length-s,[,E]=p,B=u.path.slice(0,y),b=0===s?u.offset:u.path[y]+0;for(var[A,w]of G.levels(e,{at:B,reverse:!0,voids:o})){var F=!1;if(w.length<E.length||0===w.length||!o&&Element.isElement(A)&&G.isVoid(e,A))break;var _=h.current,O=G.isEnd(e,_,w);if(l||!h||!G.isEdge(e,_,w)){F=!0;var x=Node.extractProps(A);e.apply({type:\"split_node\",path:w,position:b,properties:x})}b=w[w.length-1]+(F||O?1:0)}if(null==t.at){var k=r.current||G.end(e,[]);eM.select(e,k)}}finally{h.unref(),null===(n=r)||void 0===n||n.unref()}}})}",
            "unsetNodes": "unsetNodes(e,t){var r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};!Array.isArray(t)&&(t=[t]);var n={};for(var i of t)n[i]=null;eM.setNodes(e,n,r)}",
            "unwrapNodes": "unwrapNodes(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};G.withoutNormalizing(e,()=>{var{mode:r=\"lowest\",split:n=!1,voids:i=!1}=t,{at:o=e.selection,match:a}=t;if(o){null==a&&(a=eo.isPath(o)?ek(e,o):t=>Element.isElement(t)&&G.isBlock(e,t)),eo.isPath(o)&&(o=G.range(e,o));var u=Range.isRange(o)?G.rangeRef(e,o):null,s=Array.from(G.nodes(e,{at:o,match:a,mode:r,voids:i}),t=>{var[,r]=t;return G.pathRef(e,r)}).reverse();for(var l of s)!function(t){var r=t.unref(),[o]=G.node(e,r),a=G.range(e,r);n&&u&&(a=Range.intersection(u.current,a)),eM.liftNodes(e,{at:a,match:e=>Element.isAncestor(o)&&o.children.includes(e),voids:i})}(l);u&&u.unref()}})}",
            "wrapNodes": "wrapNodes(e,t){var r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};G.withoutNormalizing(e,()=>{var{mode:n=\"lowest\",split:i=!1,voids:o=!1}=r,{match:a,at:u=e.selection}=r;if(u){if(null==a&&(a=eo.isPath(u)?ek(e,u):e.isInline(t)?t=>Element.isElement(t)&&G.isInline(e,t)||Text.isText(t):t=>Element.isElement(t)&&G.isBlock(e,t)),i&&Range.isRange(u)){var[s,l]=Range.edges(u),c=G.rangeRef(e,u,{affinity:\"inward\"});eM.splitNodes(e,{at:l,match:a,voids:o}),eM.splitNodes(e,{at:s,match:a,voids:o}),u=c.unref(),null==r.at&&eM.select(e,u)}for(var[,d]of Array.from(G.nodes(e,{at:u,match:e.isInline(t)?t=>Element.isElement(t)&&G.isBlock(e,t):e=>G.isEditor(e),mode:\"lowest\",voids:o}))){var f=Range.isRange(u)?Range.intersection(u,G.range(e,d)):u;if(f){var h=Array.from(G.nodes(e,{at:f,match:a,mode:n,voids:o}));if(h.length>0&&\"continue\"===function(){var[r]=h,n=h[h.length-1],[,i]=r,[,a]=n;if(0===i.length&&0===a.length)return\"continue\";var u=eo.equals(i,a)?eo.parent(i):eo.common(i,a),s=G.range(e,i,a),[l]=G.node(e,u),c=u.length+1,d=eo.next(a.slice(0,c)),f=e_(e_({},t),{},{children:[]});eM.insertNodes(e,f,{at:d,voids:o}),eM.moveNodes(e,{at:s,match:e=>Element.isAncestor(l)&&l.children.includes(e),to:d.concat(0),voids:o})}())continue}}}})}",
            "collapse": "collapse(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},{edge:r=\"anchor\"}=t,{selection:n}=e;if(!!n){if(\"anchor\"===r)eM.select(e,n.anchor);else if(\"focus\"===r)eM.select(e,n.focus);else if(\"start\"===r){var[i]=Range.edges(n);eM.select(e,i)}else if(\"end\"===r){var[,o]=Range.edges(n);eM.select(e,o)}}}",
            "deselect": "deselect(e){var{selection:t}=e;t&&e.apply({type:\"set_selection\",properties:t,newProperties:null})}",
            "move": "move(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},{selection:r}=e,{distance:n=1,unit:i=\"character\",reverse:o=!1}=t,{edge:a=null}=t;if(r){\"start\"===a&&(a=Range.isBackward(r)?\"focus\":\"anchor\"),\"end\"===a&&(a=Range.isBackward(r)?\"anchor\":\"focus\");var{anchor:u,focus:s}=r,l={distance:n,unit:i},c={};if(null==a||\"anchor\"===a){var d=o?G.before(e,u,l):G.after(e,u,l);d&&(c.anchor=d)}if(null==a||\"focus\"===a){var f=o?G.before(e,s,l):G.after(e,s,l);f&&(c.focus=f)}eM.setSelection(e,c)}}",
            "select": "select(e,t){var{selection:r}=e;if(t=G.range(e,t),r){eM.setSelection(e,t);return}if(!Range.isRange(t))throw Error(\"When setting the selection and the current selection is `null` you must provide at least an `anchor` and `focus`, but you passed: \".concat(ev.stringify(t)));e.apply({type:\"set_selection\",properties:r,newProperties:t})}",
            "setPoint": "setPoint(e,t){var r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},{selection:n}=e,{edge:i=\"both\"}=r;if(n){\"start\"===i&&(i=Range.isBackward(n)?\"focus\":\"anchor\"),\"end\"===i&&(i=Range.isBackward(n)?\"anchor\":\"focus\");var{anchor:o,focus:a}=n,u=\"anchor\"===i?o:a;eM.setSelection(e,{[\"anchor\"===i?\"anchor\":\"focus\"]:eS(eS({},u),t)})}}",
            "setSelection": "setSelection(e,t){var{selection:r}=e,n={},i={};if(r){for(var o in t)(\"anchor\"===o&&null!=t.anchor&&!el.equals(t.anchor,r.anchor)||\"focus\"===o&&null!=t.focus&&!el.equals(t.focus,r.focus)||\"anchor\"!==o&&\"focus\"!==o&&t[o]!==r[o])&&(n[o]=r[o],i[o]=t[o]);Object.keys(n).length>0&&e.apply({type:\"set_selection\",properties:n,newProperties:i})}}",
            "delete": "delete(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};G.withoutNormalizing(e,()=>{var r,{reverse:n=!1,unit:i=\"character\",distance:o=1,voids:a=!1}=t,{at:u=e.selection,hanging:s=!1}=t;if(!!u){var l=!1;if(Range.isRange(u)&&Range.isCollapsed(u)&&(l=!0,u=u.anchor),el.isPoint(u)){var c=G.void(e,{at:u,mode:\"highest\"});if(!a&&c){var[,d]=c;u=d}else{var f={unit:i,distance:o},h=n?G.before(e,u,f)||G.start(e,[]):G.after(e,u,f)||G.end(e,[]);u={anchor:u,focus:h},s=!0}}if(eo.isPath(u)){eM.removeNodes(e,{at:u,voids:a});return}if(!Range.isCollapsed(u)){if(!s){var[,p]=Range.edges(u),v=G.end(e,[]);!el.equals(p,v)&&(u=G.unhangRange(e,u,{voids:a}))}var[D,g]=Range.edges(u),C=G.above(e,{match:t=>Element.isElement(t)&&G.isBlock(e,t),at:D,voids:a}),m=G.above(e,{match:t=>Element.isElement(t)&&G.isBlock(e,t),at:g,voids:a}),y=C&&m&&!eo.equals(C[1],m[1]),E=eo.equals(D.path,g.path),B=a?null:G.void(e,{at:D,mode:\"highest\"}),b=a?null:G.void(e,{at:g,mode:\"highest\"});if(B){var A=G.before(e,D);A&&C&&eo.isAncestor(C[1],A.path)&&(D=A)}if(b){var w=G.after(e,g);w&&m&&eo.isAncestor(m[1],w.path)&&(g=w)}var F=[];for(var _ of G.nodes(e,{at:u,voids:a})){var[O,x]=_;(!r||0!==eo.compare(x,r))&&(!a&&Element.isElement(O)&&G.isVoid(e,O)||!eo.isCommon(x,D.path)&&!eo.isCommon(x,g.path))&&(F.push(_),r=x)}var k=Array.from(F,t=>{var[,r]=t;return G.pathRef(e,r)}),P=G.pointRef(e,D),S=G.pointRef(e,g),T=\"\";if(!E&&!B){var j=P.current,[M]=G.leaf(e,j),{path:R}=j,{offset:I}=D,L=M.text.slice(I);L.length>0&&(e.apply({type:\"remove_text\",path:R,offset:I,text:L}),T=L)}if(k.reverse().map(e=>e.unref()).filter(e=>null!==e).forEach(t=>eM.removeNodes(e,{at:t,voids:a})),!b){var N=S.current,[z]=G.leaf(e,N),{path:W}=N,q=E?D.offset:0,V=z.text.slice(q,g.offset);V.length>0&&(e.apply({type:\"remove_text\",path:W,offset:q,text:V}),T=V)}!E&&y&&S.current&&P.current&&eM.mergeNodes(e,{at:S.current,hanging:!0,voids:a}),l&&n&&\"character\"===i&&T.length>1&&T.match(/[\\u0E00-\\u0E7F]+/)&&eM.insertText(e,T.slice(0,T.length-o));var U=P.unref(),H=S.unref(),J=n?U||H:H||U;null==t.at&&J&&eM.select(e,J)}}})}",
            "insertFragment": "insertFragment(e,t){var r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};G.withoutNormalizing(e,()=>{var n,{hanging:i=!1,voids:o=!1}=r,{at:a=e.selection}=r;if(!t.length)return;if(!!a){if(Range.isRange(a)){if(!i&&(a=G.unhangRange(e,a,{voids:o})),Range.isCollapsed(a))a=a.anchor;else{var[,u]=Range.edges(a);if(!o&&G.void(e,{at:u}))return;var s=G.pointRef(e,u);eM.delete(e,{at:a}),a=s.unref()}}else eo.isPath(a)&&(a=G.start(e,a));if(!(!o&&G.void(e,{at:a}))){var l=G.above(e,{at:a,match:t=>Element.isElement(t)&&G.isInline(e,t),mode:\"highest\",voids:o});if(l){var[,c]=l;G.isEnd(e,a,c)?a=G.after(e,c):G.isStart(e,a,c)&&(a=G.before(e,c))}var[,d]=G.above(e,{match:t=>Element.isElement(t)&&G.isBlock(e,t),at:a,voids:o}),f=G.isStart(e,a,d),h=G.isEnd(e,a,d),p=f&&h,v=!f||f&&h,D=!h,[,g]=Node.first({children:t},[]),[,C]=Node.last({children:t},[]),m=[],y=t=>{var[r,n]=t;return 0!==n.length&&(!!p||!(v&&eo.isAncestor(n,g)&&Element.isElement(r)&&!e.isVoid(r)&&!e.isInline(r)||D&&eo.isAncestor(n,C)&&Element.isElement(r)&&!e.isVoid(r)&&!e.isInline(r))&&!0)};for(var E of Node.nodes({children:t},{pass:y}))y(E)&&m.push(E);var B=[],b=[],A=[],w=!0,F=!1;for(var[_]of m)Element.isElement(_)&&!e.isInline(_)?(w=!1,F=!0,b.push(_)):w?B.push(_):A.push(_);var[O]=G.nodes(e,{at:a,match:t=>Text.isText(t)||G.isInline(e,t),mode:\"highest\",voids:o}),[,x]=O,k=G.isStart(e,a,x),P=G.isEnd(e,a,x),S=G.pathRef(e,h&&!A.length?eo.next(d):d),T=G.pathRef(e,P?eo.next(x):x);eM.splitNodes(e,{at:a,match:t=>F?Element.isElement(t)&&G.isBlock(e,t):Text.isText(t)||G.isInline(e,t),mode:F?\"lowest\":\"highest\",always:F&&(!f||B.length>0)&&(!h||A.length>0),voids:o});var j=G.pathRef(e,!k||k&&P?eo.next(x):x);if(eM.insertNodes(e,B,{at:j.current,match:t=>Text.isText(t)||G.isInline(e,t),mode:\"highest\",voids:o}),p&&!B.length&&b.length&&!A.length&&eM.delete(e,{at:d,voids:o}),eM.insertNodes(e,b,{at:S.current,match:t=>Element.isElement(t)&&G.isBlock(e,t),mode:\"lowest\",voids:o}),eM.insertNodes(e,A,{at:T.current,match:t=>Text.isText(t)||G.isInline(e,t),mode:\"highest\",voids:o}),!r.at&&(A.length>0&&T.current?n=eo.previous(T.current):b.length>0&&S.current?n=eo.previous(S.current):j.current&&(n=eo.previous(j.current)),n)){var M=G.end(e,n);eM.select(e,M)}j.unref(),S.unref(),T.unref()}}})}",
            "insertText": "insertText(e,t){var r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};G.withoutNormalizing(e,()=>{var{voids:n=!1}=r,{at:i=e.selection}=r;if(!!i){if(eo.isPath(i)&&(i=G.range(e,i)),Range.isRange(i)){if(Range.isCollapsed(i))i=i.anchor;else{var o=Range.end(i);if(!n&&G.void(e,{at:o}))return;var a=Range.start(i),u=G.pointRef(e,a),s=G.pointRef(e,o);eM.delete(e,{at:i,voids:n});var l=u.unref(),c=s.unref();i=l||c,eM.setSelection(e,{anchor:i,focus:i})}}if(!(!n&&G.void(e,{at:i}))){var{path:d,offset:f}=i;t.length>0&&e.apply({type:\"insert_text\",path:d,offset:f,text:t})}}})}"
        },
        "createEditor": "()=>{var e={children:[],operations:[],selection:null,marks:null,isInline:()=>!1,isVoid:()=>!1,markableVoid:()=>!1,onChange:()=>{},apply:t=>{for(var r of G.pathRefs(e))ea.transform(r,t);for(var n of G.pointRefs(e))ec.transform(n,t);for(var i of G.rangeRefs(e))eh.transform(i,t);var o,a,u=s.get(e)||[],d=l.get(e)||new Set,f=e=>{if(e){var t=e.join(\",\");!a.has(t)&&(a.add(t),o.push(e))}};if(eo.operationCanTransformPath(t))for(var h of(o=[],a=new Set,u))f(eo.transform(h,t));else o=u,a=d;for(var p of e.getDirtyPaths(t))f(p);s.set(e,o),l.set(e,a),eM.transform(e,t),e.operations.push(t),G.normalize(e,{operation:t}),\"set_selection\"===t.type&&(e.marks=null),!c.get(e)&&(c.set(e,!0),Promise.resolve().then(()=>{c.set(e,!1),e.onChange({operation:t}),e.operations=[]}))},addMark:(t,r)=>{var{selection:n,markableVoid:i}=e;if(n){var o=(t,r)=>{if(!Text.isText(t))return!1;var[n,i]=G.parent(e,r);return!e.isVoid(n)||e.markableVoid(n)},a=Range.isExpanded(n),u=!1;if(!a){var[s,l]=G.node(e,n);if(s&&o(s,l)){var[d]=G.parent(e,l);u=d&&e.markableVoid(d)}}if(a||u)eM.setNodes(e,{[t]:r},{match:o,split:!0,voids:!0});else{var f=D(D({},G.marks(e)||{}),{},{[t]:r});e.marks=f,!c.get(e)&&e.onChange()}}},deleteBackward:t=>{var{selection:r}=e;r&&Range.isCollapsed(r)&&eM.delete(e,{unit:t,reverse:!0})},deleteForward:t=>{var{selection:r}=e;r&&Range.isCollapsed(r)&&eM.delete(e,{unit:t})},deleteFragment:t=>{var{selection:r}=e;r&&Range.isExpanded(r)&&eM.delete(e,{reverse:\"backward\"===t})},getFragment:()=>{var{selection:t}=e;return t?Node.fragment(e,t):[]},insertBreak:()=>{eM.splitNodes(e,{always:!0})},insertSoftBreak:()=>{eM.splitNodes(e,{always:!0})},insertFragment:t=>{eM.insertFragment(e,t)},insertNode:t=>{eM.insertNodes(e,t)},insertText:t=>{var{selection:r,marks:n}=e;if(r){if(n){var i=D({text:t},n);eM.insertNodes(e,i)}else eM.insertText(e,t);e.marks=null}},normalizeNode:t=>{var[r,n]=t;if(!Text.isText(r)){if(Element.isElement(r)&&0===r.children.length){eM.insertNodes(e,{text:\"\"},{at:n.concat(0),voids:!0});return}for(var i=!G.isEditor(r)&&Element.isElement(r)&&(e.isInline(r)||0===r.children.length||Text.isText(r.children[0])||e.isInline(r.children[0])),o=0,a=0;a<r.children.length;a++,o++){var u=Node.get(e,n);if(!Text.isText(u)){var s=r.children[a],l=u.children[o-1],c=a===r.children.length-1;if((Text.isText(s)||Element.isElement(s)&&e.isInline(s))!==i)eM.removeNodes(e,{at:n.concat(o),voids:!0}),o--;else if(Element.isElement(s)){if(e.isInline(s)){if(null!=l&&Text.isText(l)){if(c){var d={text:\"\"};eM.insertNodes(e,d,{at:n.concat(o+1),voids:!0}),o++}}else{var f={text:\"\"};eM.insertNodes(e,f,{at:n.concat(o),voids:!0}),o++}}}else null!=l&&Text.isText(l)&&(Text.equals(s,l,{loose:!0})?(eM.mergeNodes(e,{at:n.concat(o),voids:!0}),o--):\"\"===l.text?(eM.removeNodes(e,{at:n.concat(o-1),voids:!0}),o--):\"\"===s.text&&(eM.removeNodes(e,{at:n.concat(o),voids:!0}),o--))}}}},removeMark:t=>{var{selection:r}=e;if(r){var n=(t,r)=>{if(!Text.isText(t))return!1;var[n,i]=G.parent(e,r);return!e.isVoid(n)||e.markableVoid(n)},i=Range.isExpanded(r),o=!1;if(!i){var[a,u]=G.node(e,r);if(a&&n(a,u)){var[s]=G.parent(e,u);o=s&&e.markableVoid(s)}}if(i||o)eM.unsetNodes(e,t,{match:n,split:!0,voids:!0});else{var l=D({},G.marks(e)||{});delete l[t],e.marks=l,!c.get(e)&&e.onChange()}}},getDirtyPaths:e=>{switch(e.type){case\"insert_text\":case\"remove_text\":case\"set_node\":var{path:t}=e;return eo.levels(t);case\"insert_node\":var{node:r,path:n}=e;return[...eo.levels(n),...Text.isText(r)?[]:Array.from(Node.nodes(r),e=>{var[,t]=e;return n.concat(t)})];case\"merge_node\":var{path:i}=e;return[...eo.ancestors(i),eo.previous(i)];case\"move_node\":var{path:o,newPath:a}=e;if(eo.equals(o,a))return[];var u=[],s=[];for(var l of eo.ancestors(o)){var c=eo.transform(l,e);u.push(c)}for(var d of eo.ancestors(a)){var f=eo.transform(d,e);s.push(f)}var h=s[s.length-1],p=a[a.length-1];return[...u,...s,h.concat(p)];case\"remove_node\":var{path:v}=e;return[...eo.ancestors(v)];case\"split_node\":var{path:D}=e;return[...eo.levels(D),eo.next(D)];default:return[]}},shouldNormalize:e=>{var{iteration:t,initialDirtyPathsLength:r}=e,n=42*r;if(t>n)throw Error(\"Could not completely normalize the editor after \".concat(n,\" iterations! This is usually due to incorrect normalization logic that leaves a node in an invalid state.\"));return!0}};return e}"
    }
}