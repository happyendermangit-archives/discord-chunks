{
    "exports": {
        "default": {
            "initializedCount": 0,
            "actions": {
                "POST_CONNECTION_OPEN": "()=>this._handleConnectionOpen()"
            },
            "stores": {
                "toJSON": "function(){return Array.from(this)}",
                "get": "function get() { [native code] }",
                "set": "function set() { [native code] }",
                "has": "function has() { [native code] }",
                "delete": "function delete() { [native code] }",
                "clear": "function clear() { [native code] }",
                "entries": "function entries() { [native code] }",
                "forEach": "function forEach() { [native code] }",
                "keys": "function keys() { [native code] }",
                "size": 0,
                "values": "function values() { [native code] }"
            },
            "_handleTestRegionsResponse": "e=>{let t=e.map(e=>e.region);s.default.shouldPerformLatencyTest(t)?a.default.getMediaEngine().rankRtcRegions(e).then(e=>{I.verbose(\"RTC region latency test completed: \",e),(0,i.completeRTCLatencyTest)(e,t)}).catch(e=>I.warn(e)):I.verbose(`RTC cached preferred region is ${s.default.getPreferredRegion()}`)}",
            "_fetchAndScheduleRefetch": "()=>{(0,i.fetchRTCLatencyTestRegions)().then(e=>this._handleTestRegionsResponse(e.body)).catch(e=>I.warn(e)),this.refetchTimeout=setTimeout(this._fetchAndScheduleRefetch,360*_.default.Millis.MINUTE)}",
            "_handleConnectionOpen": "()=>{E.isPlatformEmbedded&&!__OVERLAY__&&(null!=this.refetchTimeout&&clearTimeout(this.refetchTimeout),this.refetchTimeout=setTimeout(this._fetchAndScheduleRefetch,Math.floor(l+Math.random()*u)))}",
            "_terminate": "_terminate(){null!=this.refetchTimeout&&clearTimeout(this.refetchTimeout)}"
        }
    }
}