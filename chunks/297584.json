{
    "exports": {
        "ReflectionBinaryWriter": "class u{constructor(e){this.info=e}prepare(){if(!this.fields){let e=this.info.fields?this.info.fields.concat():[];this.fields=e.sort((e,t)=>e.no-t.no)}}write(e,t,n){for(let r of(this.prepare(),this.fields)){let i,u,s=r.repeat,l=r.localName;if(r.oneof){let t=e[r.oneof];if(t.oneofKind!==l)continue;i=t[l],u=!0}else i=e[l],u=!1;switch(r.kind){case\"scalar\":case\"enum\":let c=\"enum\"==r.kind?a.ScalarType.INT32:r.T;if(s){if((0,o.assert)(Array.isArray(i)),s==a.RepeatType.PACKED)this.packed(t,c,r.no,i);else for(let e of i)this.scalar(t,c,r.no,e,!0)}else void 0===i?(0,o.assert)(r.opt):this.scalar(t,c,r.no,i,u||r.opt);break;case\"message\":if(s)for(let e of((0,o.assert)(Array.isArray(i)),i))this.message(t,n,r.T(),r.no,e);else this.message(t,n,r.T(),r.no,i);break;case\"map\":for(let[e,a]of((0,o.assert)(\"object\"==typeof i&&null!==i),Object.entries(i)))this.mapEntry(t,n,r,e,a)}}let i=n.writeUnknownFields;!1!==i&&(!0===i?r.UnknownFieldHandler.onWrite:i)(this.info.typeName,e,t)}mapEntry(e,t,n,i,u){e.tag(n.no,r.WireType.LengthDelimited),e.fork();let s=i;switch(n.K){case a.ScalarType.INT32:case a.ScalarType.FIXED32:case a.ScalarType.UINT32:case a.ScalarType.SFIXED32:case a.ScalarType.SINT32:s=Number.parseInt(i);break;case a.ScalarType.BOOL:(0,o.assert)(\"true\"==i||\"false\"==i),s=\"true\"==i}switch(this.scalar(e,n.K,1,s,!0),n.V.kind){case\"scalar\":this.scalar(e,n.V.T,2,u,!0);break;case\"enum\":this.scalar(e,a.ScalarType.INT32,2,u,!0);break;case\"message\":this.message(e,t,n.V.T(),2,u)}e.join()}message(e,t,n,a,o){void 0!==o&&(n.internalBinaryWrite(o,e.tag(a,r.WireType.LengthDelimited).fork(),t),e.join())}scalar(e,t,n,r,a){let[o,i,u]=this.scalarInfo(t,r);(!u||a)&&(e.tag(n,o),e[i](r))}packed(e,t,n,i){if(!i.length)return;(0,o.assert)(t!==a.ScalarType.BYTES&&t!==a.ScalarType.STRING),e.tag(n,r.WireType.LengthDelimited),e.fork();let[,u]=this.scalarInfo(t);for(let t=0;t<i.length;t++)e[u](i[t]);e.join()}scalarInfo(e,t){let n,o=r.WireType.Varint,u=void 0===t,s=0===t;switch(e){case a.ScalarType.INT32:n=\"int32\";break;case a.ScalarType.STRING:s=u||!t.length,o=r.WireType.LengthDelimited,n=\"string\";break;case a.ScalarType.BOOL:s=!1===t,n=\"bool\";break;case a.ScalarType.UINT32:n=\"uint32\";break;case a.ScalarType.DOUBLE:o=r.WireType.Bit64,n=\"double\";break;case a.ScalarType.FLOAT:o=r.WireType.Bit32,n=\"float\";break;case a.ScalarType.INT64:s=u||i.PbLong.from(t).isZero(),n=\"int64\";break;case a.ScalarType.UINT64:s=u||i.PbULong.from(t).isZero(),n=\"uint64\";break;case a.ScalarType.FIXED64:s=u||i.PbULong.from(t).isZero(),o=r.WireType.Bit64,n=\"fixed64\";break;case a.ScalarType.BYTES:s=u||!t.byteLength,o=r.WireType.LengthDelimited,n=\"bytes\";break;case a.ScalarType.FIXED32:o=r.WireType.Bit32,n=\"fixed32\";break;case a.ScalarType.SFIXED32:o=r.WireType.Bit32,n=\"sfixed32\";break;case a.ScalarType.SFIXED64:s=u||i.PbLong.from(t).isZero(),o=r.WireType.Bit64,n=\"sfixed64\";break;case a.ScalarType.SINT32:n=\"sint32\";break;case a.ScalarType.SINT64:s=u||i.PbLong.from(t).isZero(),n=\"sint64\"}return[o,n,u||s]}}"
    }
}