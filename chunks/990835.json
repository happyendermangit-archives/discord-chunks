{
    "exports": {
        "default": {
            "isTracing_": true,
            "endTime_": 1709173889789,
            "lastImportDuration": 0,
            "logGroups": [
                {
                    "index": 0,
                    "timestamp": 1709173874789,
                    "logs": [],
                    "nativeLogs": []
                }
            ],
            "logs": [],
            "prefix": "",
            "isTracing": false,
            "endTime": 1709173889789,
            "resumeTracing": "resumeTracing(){!this.isTracing&&(this.logGroups.unshift({index:this.logGroups.length,timestamp:Date.now(),logs:[],nativeLogs:[]}),this.logs=this.logGroups[0].logs),this.endTime=Date.now()+1e4}",
            "mark": "mark(e,t,n){this.isTracing&&(this.logs.push({emoji:e,prefix:`${this.prefix}`,log:t,delta:n,timestamp:Date.now()}),this.addImportLogDetail())}",
            "markAndLog": "markAndLog(e,t,n,i){e.log(n),this.isTracing&&(this.logs.push({emoji:t,prefix:this.prefix,log:n,delta:i,timestamp:Date.now()}),this.addImportLogDetail())}",
            "addImportLogDetail": "addImportLogDetail(){let e=i();e-this.lastImportDuration>25&&(this.addDetail(\"JS Imports\",Math.ceil(e)+\"ms\"),this.lastImportDuration=e)}",
            "markWithDelta": "markWithDelta(e,t){let n=this.logs[this.logs.length-1];this.mark(e,t,null!=n&&null!=n.timestamp?Date.now()-n.timestamp:void 0)}",
            "markAt": "markAt(e,t,n){if(!this.isTracing)return;let i=0;for(;i<this.logs.length;i++){let{timestamp:e}=this.logs[i];if(null!=e&&e>n)break}this.logs.splice(i,0,{emoji:e,log:t,timestamp:n,prefix:this.logs[i]?.prefix??\"\"})}",
            "addDetail": "addDetail(e,t){this.isTracing&&this.logs.push({emoji:this.logs[this.logs.length-1].emoji,prefix:this.prefix,log:`  â†ª ${e} ${t}`})}",
            "time": "time(e,t,n){if(!this.isTracing)return n();let i=this.prefix;this.mark(e,`Start ${t}`),this.prefix+=\"| \";let r=Date.now(),o=n(),a=Date.now()-r;return this.prefix=i,this.mark(e,`Finish ${t}`,a),o}",
            "timeAsync": "async timeAsync(e,t,n){if(!this.isTracing)return n();this.mark(e,`Start ${t}`);let i=Date.now(),r=await n(),o=Date.now()-i;return this.mark(e,`Finish ${t}`,o),r}",
            "setServerTrace": "setServerTrace(e){this.logGroups[0].serverTrace=e}"
        }
    }
}