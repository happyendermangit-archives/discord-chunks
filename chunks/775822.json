{
    "exports": {
        "ALL_CHANNEL_TYPES": {
            "toJSON": "function(){return Array.from(this)}",
            "has": "function has() { [native code] }",
            "add": "function add() { [native code] }",
            "delete": "function delete() { [native code] }",
            "clear": "function clear() { [native code] }",
            "entries": "function entries() { [native code] }",
            "forEach": "function forEach() { [native code] }",
            "size": 14,
            "values": "function values() { [native code] }",
            "keys": "function values() { [native code] }",
            "union": "function union() { [native code] }",
            "intersection": "function intersection() { [native code] }",
            "difference": "function difference() { [native code] }",
            "symmetricDifference": "function symmetricDifference() { [native code] }",
            "isSubsetOf": "function isSubsetOf() { [native code] }",
            "isSupersetOf": "function isSupersetOf() { [native code] }",
            "isDisjointFrom": "function isDisjointFrom() { [native code] }"
        },
        "CHANNEL_ELIGIBLE_FOR_UNREAD_SETTING": {
            "toJSON": "function(){return Array.from(this)}",
            "has": "function has() { [native code] }",
            "add": "function add() { [native code] }",
            "delete": "function delete() { [native code] }",
            "clear": "function clear() { [native code] }",
            "entries": "function entries() { [native code] }",
            "forEach": "function forEach() { [native code] }",
            "size": 4,
            "values": "function values() { [native code] }",
            "keys": "function values() { [native code] }",
            "union": "function union() { [native code] }",
            "intersection": "function intersection() { [native code] }",
            "difference": "function difference() { [native code] }",
            "symmetricDifference": "function symmetricDifference() { [native code] }",
            "isSubsetOf": "function isSubsetOf() { [native code] }",
            "isSupersetOf": "function isSupersetOf() { [native code] }",
            "isDisjointFrom": "function isDisjointFrom() { [native code] }"
        },
        "CREATEABLE_NON_VOCAL_CHANNEL_NAME_TYPES": {
            "toJSON": "function(){return Array.from(this)}",
            "has": "function has() { [native code] }",
            "add": "function add() { [native code] }",
            "delete": "function delete() { [native code] }",
            "clear": "function clear() { [native code] }",
            "entries": "function entries() { [native code] }",
            "forEach": "function forEach() { [native code] }",
            "size": 5,
            "values": "function values() { [native code] }",
            "keys": "function values() { [native code] }",
            "union": "function union() { [native code] }",
            "intersection": "function intersection() { [native code] }",
            "difference": "function difference() { [native code] }",
            "symmetricDifference": "function symmetricDifference() { [native code] }",
            "isSubsetOf": "function isSubsetOf() { [native code] }",
            "isSupersetOf": "function isSupersetOf() { [native code] }",
            "isDisjointFrom": "function isDisjointFrom() { [native code] }"
        },
        "ChannelRecordBase": "class el extends es{get permissionOverwrites(){return this.permissionOverwrites_??eE}get topic(){return this.topic_??\"\"}get position(){return this.position_??0}get bitrate(){return this.bitrate_??I.BITRATE_DEFAULT}get userLimit(){return this.userLimit_??0}get nsfw(){return this.nsfw_??!1}get rateLimitPerUser(){return this.rateLimitPerUser_??0}get flags(){return this.flags_??0}toJS(){return{...this}}set(e,t){return this.merge(e_({[e]:t}))}merge(e){let t=null,n=e_(e);for(let e in n)n.hasOwnProperty(e)&&this[e]!==n[e]&&(null==t&&(t=this.toJS()),t[e]=n[e]);return null!=t?new this.constructor(t):this}computeLurkerPermissionsAllowList(){if(this.isGuildStageVoice()&&l.default.isPublic(this.id))return E.LURKER_STAGE_CHANNEL_PERMISSIONS_ALLOWLIST}isNSFW(){return this.nsfw}isManaged(){return null!=this.application_id}isPrivate(){return f(this.type)}isGroupDM(){return this.type===I.ChannelTypes.GROUP_DM}isMultiUserDM(){return M(this.type)}isDM(){return this.type===I.ChannelTypes.DM}isSystemDM(){return!1}isArchivedThread(){return this.isThread()&&this.threadMetadata?.archived===!0}isLockedThread(){return this.isThread()&&this.threadMetadata?.locked===!0}isScheduledForDeletion(){return this.hasFlag(T.ChannelFlags.IS_SCHEDULED_FOR_DELETION)}isBroadcastChannel(){return this.hasFlag(T.ChannelFlags.IS_BROADCASTING)}isArchivedLockedThread(){return B.has(this.type)&&this.threadMetadata?.archived===!0&&this.threadMetadata?.locked===!0}isForumPost(){return this.type===I.ChannelTypes.PUBLIC_THREAD&&null!=this.parentChannelThreadType&&I.ChannelTypesSets.GUILD_THREADS_ONLY.has(this.parentChannelThreadType)}isCategory(){return this.type===I.ChannelTypes.GUILD_CATEGORY}isVocal(){return y(this.type)}isGuildVocal(){return D(this.type)}isGuildVocalOrThread(){return this.isGuildVocal()||this.isVocalThread()}isGuildVoice(){return this.type===I.ChannelTypes.GUILD_VOICE}isGuildStageVoice(){return this.type===I.ChannelTypes.GUILD_STAGE_VOICE}isListenModeCapable(){return this.isGuildStageVoice()}isThread(){return H(this.type)}isAnnouncementThread(){return this.type===I.ChannelTypes.ANNOUNCEMENT_THREAD}isVocalThread(){return this.type===I.ChannelTypes.PUBLIC_THREAD||this.type===I.ChannelTypes.PRIVATE_THREAD}isActiveThread(){return this.isThread()&&this.threadMetadata?.archived!==!0}isDirectory(){return this.type===I.ChannelTypes.GUILD_DIRECTORY}isForumLikeChannel(){return this.isForumChannel()||this.isMediaChannel()}isForumChannel(){return this.type===I.ChannelTypes.GUILD_FORUM}isMediaChannel(){return this.type===I.ChannelTypes.GUILD_MEDIA}isMediaPost(){return this.type===I.ChannelTypes.PUBLIC_THREAD&&this.parentChannelThreadType===I.ChannelTypes.GUILD_MEDIA}isRoleSubscriptionTemplatePreviewChannel(){return this.hasFlag(T.ChannelFlags.IS_ROLE_SUBSCRIPTION_TEMPLATE_PREVIEW_CHANNEL)}isOwner(e){return this.ownerId===e}getGuildId(){return this.guild_id}getApplicationId(){return this.application_id}getDefaultSortOrder(){return this.defaultSortOrder??a.ThreadSortOrder.LATEST_ACTIVITY}getDefaultLayout(){return this.isMediaChannel()?o.ForumLayout.GRID:null==this.defaultForumLayout||this.defaultForumLayout===o.ForumLayout.DEFAULT?o.ForumLayout.LIST:this.defaultForumLayout}get accessPermissions(){return eo(this.type)}hasFlag(e){return(0,u.hasFlag)(this.flags,e)}}",
        "DMChannelRecord": "class eS extends ed{}",
        "EDITABLE_CHANNEL_TYPES": {
            "toJSON": "function(){return Array.from(this)}",
            "has": "function has() { [native code] }",
            "add": "function add() { [native code] }",
            "delete": "function delete() { [native code] }",
            "clear": "function clear() { [native code] }",
            "entries": "function entries() { [native code] }",
            "forEach": "function forEach() { [native code] }",
            "size": 9,
            "values": "function values() { [native code] }",
            "keys": "function values() { [native code] }",
            "union": "function union() { [native code] }",
            "intersection": "function intersection() { [native code] }",
            "difference": "function difference() { [native code] }",
            "symmetricDifference": "function symmetricDifference() { [native code] }",
            "isSubsetOf": "function isSubsetOf() { [native code] }",
            "isSupersetOf": "function isSupersetOf() { [native code] }",
            "isDisjointFrom": "function isDisjointFrom() { [native code] }"
        },
        "EDITABLE_VOICE_SETTINGS_TYPES": {
            "toJSON": "function(){return Array.from(this)}",
            "has": "function has() { [native code] }",
            "add": "function add() { [native code] }",
            "delete": "function delete() { [native code] }",
            "clear": "function clear() { [native code] }",
            "entries": "function entries() { [native code] }",
            "forEach": "function forEach() { [native code] }",
            "size": 4,
            "values": "function values() { [native code] }",
            "keys": "function values() { [native code] }",
            "union": "function union() { [native code] }",
            "intersection": "function intersection() { [native code] }",
            "difference": "function difference() { [native code] }",
            "symmetricDifference": "function symmetricDifference() { [native code] }",
            "isSubsetOf": "function isSubsetOf() { [native code] }",
            "isSupersetOf": "function isSupersetOf() { [native code] }",
            "isDisjointFrom": "function isDisjointFrom() { [native code] }"
        },
        "GUILD_CHANNEL_TYPES": {
            "toJSON": "function(){return Array.from(this)}",
            "has": "function has() { [native code] }",
            "add": "function add() { [native code] }",
            "delete": "function delete() { [native code] }",
            "clear": "function clear() { [native code] }",
            "entries": "function entries() { [native code] }",
            "forEach": "function forEach() { [native code] }",
            "size": 12,
            "values": "function values() { [native code] }",
            "keys": "function values() { [native code] }",
            "union": "function union() { [native code] }",
            "intersection": "function intersection() { [native code] }",
            "difference": "function difference() { [native code] }",
            "symmetricDifference": "function symmetricDifference() { [native code] }",
            "isSubsetOf": "function isSubsetOf() { [native code] }",
            "isSupersetOf": "function isSupersetOf() { [native code] }",
            "isDisjointFrom": "function isDisjointFrom() { [native code] }"
        },
        "GUILD_FAVORITES_CHANNEL_TYPES": {
            "toJSON": "function(){return Array.from(this)}",
            "has": "function has() { [native code] }",
            "add": "function add() { [native code] }",
            "delete": "function delete() { [native code] }",
            "clear": "function clear() { [native code] }",
            "entries": "function entries() { [native code] }",
            "forEach": "function forEach() { [native code] }",
            "size": 4,
            "values": "function values() { [native code] }",
            "keys": "function values() { [native code] }",
            "union": "function union() { [native code] }",
            "intersection": "function intersection() { [native code] }",
            "difference": "function difference() { [native code] }",
            "symmetricDifference": "function symmetricDifference() { [native code] }",
            "isSubsetOf": "function isSubsetOf() { [native code] }",
            "isSupersetOf": "function isSupersetOf() { [native code] }",
            "isDisjointFrom": "function isDisjointFrom() { [native code] }"
        },
        "GUILD_NON_CATEGORY_CHANNEL_TYPES": {
            "toJSON": "function(){return Array.from(this)}",
            "has": "function has() { [native code] }",
            "add": "function add() { [native code] }",
            "delete": "function delete() { [native code] }",
            "clear": "function clear() { [native code] }",
            "entries": "function entries() { [native code] }",
            "forEach": "function forEach() { [native code] }",
            "size": 11,
            "values": "function values() { [native code] }",
            "keys": "function values() { [native code] }",
            "union": "function union() { [native code] }",
            "intersection": "function intersection() { [native code] }",
            "difference": "function difference() { [native code] }",
            "symmetricDifference": "function symmetricDifference() { [native code] }",
            "isSubsetOf": "function isSubsetOf() { [native code] }",
            "isSupersetOf": "function isSupersetOf() { [native code] }",
            "isDisjointFrom": "function isDisjointFrom() { [native code] }"
        },
        "GUILD_VOCAL_CHANNEL_TYPES": {
            "toJSON": "function(){return Array.from(this)}",
            "has": "function has() { [native code] }",
            "add": "function add() { [native code] }",
            "delete": "function delete() { [native code] }",
            "clear": "function clear() { [native code] }",
            "entries": "function entries() { [native code] }",
            "forEach": "function forEach() { [native code] }",
            "size": 2,
            "values": "function values() { [native code] }",
            "keys": "function values() { [native code] }",
            "union": "function union() { [native code] }",
            "intersection": "function intersection() { [native code] }",
            "difference": "function difference() { [native code] }",
            "symmetricDifference": "function symmetricDifference() { [native code] }",
            "isSubsetOf": "function isSubsetOf() { [native code] }",
            "isSupersetOf": "function isSupersetOf() { [native code] }",
            "isDisjointFrom": "function isDisjointFrom() { [native code] }"
        },
        "GUILD_WEBHOOK_CHANNEL_TYPES": {
            "toJSON": "function(){return Array.from(this)}",
            "has": "function has() { [native code] }",
            "add": "function add() { [native code] }",
            "delete": "function delete() { [native code] }",
            "clear": "function clear() { [native code] }",
            "entries": "function entries() { [native code] }",
            "forEach": "function forEach() { [native code] }",
            "size": 6,
            "values": "function values() { [native code] }",
            "keys": "function values() { [native code] }",
            "union": "function union() { [native code] }",
            "intersection": "function intersection() { [native code] }",
            "difference": "function difference() { [native code] }",
            "symmetricDifference": "function symmetricDifference() { [native code] }",
            "isSubsetOf": "function isSubsetOf() { [native code] }",
            "isSupersetOf": "function isSupersetOf() { [native code] }",
            "isDisjointFrom": "function isDisjointFrom() { [native code] }"
        },
        "GuildTextualChannelRecord": "class eT extends el{constructor(e){super(e),this.application_id=e.application_id,this.defaultAutoArchiveDuration=e.defaultAutoArchiveDuration,this.defaultThreadRateLimitPerUser=e.defaultThreadRateLimitPerUser,this.flags_=e.flags_,this.iconEmoji=e.iconEmoji,this.lastMessageId=e.lastMessageId,this.lastPinTimestamp=e.lastPinTimestamp,this.memberListId=e.memberListId,this.nsfw_=e.nsfw_,this.parent_id=e.parent_id,this.permissionOverwrites_=e.permissionOverwrites_??{},this.position_=e.position_,this.rateLimitPerUser_=e.rateLimitPerUser_,this.themeColor=e.themeColor,this.topic_=e.topic_,this.version=e.version}static fromServer(e,t){return eh({application_id:e.application_id,defaultAutoArchiveDuration:e.default_auto_archive_duration,defaultThreadRateLimitPerUser:e.default_thread_rate_limit_per_user,flags_:e.flags,guild_id:t??e.guild_id??null,iconEmoji:et(e.icon_emoji),id:e.id,lastMessageId:e.last_message_id,lastPinTimestamp:e.last_pin_timestamp,memberListId:e.member_list_id,name:e.name??\"\",nsfw_:e.nsfw??!1,parent_id:e.parent_id,permissionOverwrites_:J(e.permission_overwrites),position_:e.position,rateLimitPerUser_:e.rate_limit_per_user??0,themeColor:e.theme_color,topic_:e.topic,type:null!=e.type?e.type:I.ChannelTypes.GUILD_TEXT,version:e.version})}}",
        "NSFW_CHANNEL_TYPES": {
            "toJSON": "function(){return Array.from(this)}",
            "has": "function has() { [native code] }",
            "add": "function add() { [native code] }",
            "delete": "function delete() { [native code] }",
            "clear": "function clear() { [native code] }",
            "entries": "function entries() { [native code] }",
            "forEach": "function forEach() { [native code] }",
            "size": 6,
            "values": "function values() { [native code] }",
            "keys": "function values() { [native code] }",
            "union": "function union() { [native code] }",
            "intersection": "function intersection() { [native code] }",
            "difference": "function difference() { [native code] }",
            "symmetricDifference": "function symmetricDifference() { [native code] }",
            "isSubsetOf": "function isSubsetOf() { [native code] }",
            "isSupersetOf": "function isSupersetOf() { [native code] }",
            "isDisjointFrom": "function isDisjointFrom() { [native code] }"
        },
        "PrivateChannelRecord": "class ed extends el{constructor(e){super(e),this.application_id=e.application_id,this.flags_=e.flags_,this.icon=e.icon,this.isMessageRequest=e.isMessageRequest,this.isMessageRequestTimestamp=e.isMessageRequestTimestamp,this.isSpam=e.isSpam,this.lastMessageId=e.lastMessageId,this.lastPinTimestamp=e.lastPinTimestamp,this.nicks=e.nicks,this.ownerId=e.ownerId,this.rawRecipients=e.rawRecipients??[],this.recipients=e.recipients??[],this.safetyWarnings=e.safetyWarnings??[]}static fromServer(e){let t={application_id:e.application_id,flags_:e.flags,guild_id:null,icon:e.icon,id:e.id,isMessageRequest:e.is_message_request,isMessageRequestTimestamp:e.is_message_request_timestamp,isSpam:e.is_spam??!1,lastMessageId:e.last_message_id,lastPinTimestamp:e.last_pin_timestamp,name:e.name??\"\",nicks:Z(e.nicks),ownerId:e.owner_id,rawRecipients:null!=e.recipients?e.recipients:[],recipients:null!=e.recipients?e.recipients.map(e=>e.id):[],safetyWarnings:e.safety_warnings,type:null!=e.type?e.type:I.ChannelTypes.DM};return(0,_.dangerouslyCast)(t,ed)}isSystemDM(){let e=this.rawRecipients[0];return this.type===I.ChannelTypes.DM&&null!=e&&!0===e.system}getRecipientId(){return this.recipients[0]}addRecipient(e,t,n){if(e===n)return this;{let n=this.set(\"recipients\",r().uniq([...this.recipients??[],e]));return null==t?n:n.set(\"nicks\",{...n.nicks,[e]:t})}}removeRecipient(e){return this.set(\"recipients\",r().without(this.recipients,e))}}",
        "SILENT_JOIN_LEAVE_CHANNEL_TYPES": {
            "toJSON": "function(){return Array.from(this)}",
            "has": "function has() { [native code] }",
            "add": "function add() { [native code] }",
            "delete": "function delete() { [native code] }",
            "clear": "function clear() { [native code] }",
            "entries": "function entries() { [native code] }",
            "forEach": "function forEach() { [native code] }",
            "size": 1,
            "values": "function values() { [native code] }",
            "keys": "function values() { [native code] }",
            "union": "function union() { [native code] }",
            "intersection": "function intersection() { [native code] }",
            "difference": "function difference() { [native code] }",
            "symmetricDifference": "function symmetricDifference() { [native code] }",
            "isSubsetOf": "function isSubsetOf() { [native code] }",
            "isSupersetOf": "function isSupersetOf() { [native code] }",
            "isDisjointFrom": "function isDisjointFrom() { [native code] }"
        },
        "SLOWMODE_CHANNEL_TYPES": {
            "toJSON": "function(){return Array.from(this)}",
            "has": "function has() { [native code] }",
            "add": "function add() { [native code] }",
            "delete": "function delete() { [native code] }",
            "clear": "function clear() { [native code] }",
            "entries": "function entries() { [native code] }",
            "forEach": "function forEach() { [native code] }",
            "size": 8,
            "values": "function values() { [native code] }",
            "keys": "function values() { [native code] }",
            "union": "function union() { [native code] }",
            "intersection": "function intersection() { [native code] }",
            "difference": "function difference() { [native code] }",
            "symmetricDifference": "function symmetricDifference() { [native code] }",
            "isSubsetOf": "function isSubsetOf() { [native code] }",
            "isSupersetOf": "function isSupersetOf() { [native code] }",
            "isDisjointFrom": "function isDisjointFrom() { [native code] }"
        },
        "TEXT_CHANNEL_TYPES": {
            "toJSON": "function(){return Array.from(this)}",
            "has": "function has() { [native code] }",
            "add": "function add() { [native code] }",
            "delete": "function delete() { [native code] }",
            "clear": "function clear() { [native code] }",
            "entries": "function entries() { [native code] }",
            "forEach": "function forEach() { [native code] }",
            "size": 7,
            "values": "function values() { [native code] }",
            "keys": "function values() { [native code] }",
            "union": "function union() { [native code] }",
            "intersection": "function intersection() { [native code] }",
            "difference": "function difference() { [native code] }",
            "symmetricDifference": "function symmetricDifference() { [native code] }",
            "isSubsetOf": "function isSubsetOf() { [native code] }",
            "isSupersetOf": "function isSupersetOf() { [native code] }",
            "isDisjointFrom": "function isDisjointFrom() { [native code] }"
        },
        "THREADED_CHANNEL_TYPES": {
            "toJSON": "function(){return Array.from(this)}",
            "has": "function has() { [native code] }",
            "add": "function add() { [native code] }",
            "delete": "function delete() { [native code] }",
            "clear": "function clear() { [native code] }",
            "entries": "function entries() { [native code] }",
            "forEach": "function forEach() { [native code] }",
            "size": 4,
            "values": "function values() { [native code] }",
            "keys": "function values() { [native code] }",
            "union": "function union() { [native code] }",
            "intersection": "function intersection() { [native code] }",
            "difference": "function difference() { [native code] }",
            "symmetricDifference": "function symmetricDifference() { [native code] }",
            "isSubsetOf": "function isSubsetOf() { [native code] }",
            "isSupersetOf": "function isSupersetOf() { [native code] }",
            "isDisjointFrom": "function isDisjointFrom() { [native code] }"
        },
        "THREAD_CHANNEL_TYPES": {
            "toJSON": "function(){return Array.from(this)}",
            "has": "function has() { [native code] }",
            "add": "function add() { [native code] }",
            "delete": "function delete() { [native code] }",
            "clear": "function clear() { [native code] }",
            "entries": "function entries() { [native code] }",
            "forEach": "function forEach() { [native code] }",
            "size": 3,
            "values": "function values() { [native code] }",
            "keys": "function values() { [native code] }",
            "union": "function union() { [native code] }",
            "intersection": "function intersection() { [native code] }",
            "difference": "function difference() { [native code] }",
            "symmetricDifference": "function symmetricDifference() { [native code] }",
            "isSubsetOf": "function isSubsetOf() { [native code] }",
            "isSupersetOf": "function isSupersetOf() { [native code] }",
            "isDisjointFrom": "function isDisjointFrom() { [native code] }"
        },
        "TOGGLE_ANNOUNCEMENT_CHANNEL_TYPES": {
            "toJSON": "function(){return Array.from(this)}",
            "has": "function has() { [native code] }",
            "add": "function add() { [native code] }",
            "delete": "function delete() { [native code] }",
            "clear": "function clear() { [native code] }",
            "entries": "function entries() { [native code] }",
            "forEach": "function forEach() { [native code] }",
            "size": 2,
            "values": "function values() { [native code] }",
            "keys": "function values() { [native code] }",
            "union": "function union() { [native code] }",
            "intersection": "function intersection() { [native code] }",
            "difference": "function difference() { [native code] }",
            "symmetricDifference": "function symmetricDifference() { [native code] }",
            "isSubsetOf": "function isSubsetOf() { [native code] }",
            "isSupersetOf": "function isSupersetOf() { [native code] }",
            "isDisjointFrom": "function isDisjointFrom() { [native code] }"
        },
        "TOPIC_CHANNEL_TYPES": {
            "toJSON": "function(){return Array.from(this)}",
            "has": "function has() { [native code] }",
            "add": "function add() { [native code] }",
            "delete": "function delete() { [native code] }",
            "clear": "function clear() { [native code] }",
            "entries": "function entries() { [native code] }",
            "forEach": "function forEach() { [native code] }",
            "size": 4,
            "values": "function values() { [native code] }",
            "keys": "function values() { [native code] }",
            "union": "function union() { [native code] }",
            "intersection": "function intersection() { [native code] }",
            "difference": "function difference() { [native code] }",
            "symmetricDifference": "function symmetricDifference() { [native code] }",
            "isSubsetOf": "function isSubsetOf() { [native code] }",
            "isSupersetOf": "function isSupersetOf() { [native code] }",
            "isDisjointFrom": "function isDisjointFrom() { [native code] }"
        },
        "UnknownChannelRecord": "class eu extends el{constructor(e){super(e),this.application_id=e.application_id,this.appliedTags=e.appliedTags,this.availableTags=e.availableTags,this.bitrate_=e.bitrate_,this.defaultAutoArchiveDuration=e.defaultAutoArchiveDuration,this.defaultForumLayout=e.defaultForumLayout,this.defaultReactionEmoji=e.defaultReactionEmoji,this.defaultSortOrder=e.defaultSortOrder,this.defaultThreadRateLimitPerUser=e.defaultThreadRateLimitPerUser,this.flags_=e.flags_,this.icon=e.icon,this.iconEmoji=e.iconEmoji,this.isMessageRequest=e.isMessageRequest,this.isMessageRequestTimestamp=e.isMessageRequestTimestamp,this.isSpam=e.isSpam,this.lastMessageId=e.lastMessageId,this.lastPinTimestamp=e.lastPinTimestamp,this.member=e.member,this.memberCount=e.memberCount,this.memberIdsPreview=e.memberIdsPreview,this.memberListId=e.memberListId,this.messageCount=e.messageCount,this.nicks=e.nicks,this.nsfw_=e.nsfw_,this.originChannelId=e.originChannelId,this.ownerId=e.ownerId,this.parent_id=e.parent_id,this.parentChannelThreadType=e.parentChannelThreadType,this.permissionOverwrites_=e.permissionOverwrites_,this.position_=e.position_,this.rateLimitPerUser_=e.rateLimitPerUser_,this.rawRecipients=e.rawRecipients,this.recipients=e.recipients,this.rtcRegion=e.rtcRegion,this.safetyWarnings=e.safetyWarnings,this.template=e.template,this.themeColor=e.themeColor,this.threadMetadata=e.threadMetadata,this.topic_=e.topic_,this.userLimit_=e.userLimit_,this.version=e.version,this.videoQualityMode=e.videoQualityMode,this.voiceBackgroundDisplay=e.voiceBackgroundDisplay}static fromServer(e,t){let n={application_id:e.application_id,appliedTags:e.applied_tags,availableTags:null!=e.available_tags?ee(e.available_tags):void 0,bitrate_:e.bitrate,defaultAutoArchiveDuration:e.default_auto_archive_duration,defaultForumLayout:e.default_forum_layout,defaultReactionEmoji:null!=e.default_reaction_emoji?{emojiId:0!==e.default_reaction_emoji.emoji_id?e.default_reaction_emoji.emoji_id:void 0,emojiName:e.default_reaction_emoji.emoji_name}:void 0,defaultSortOrder:e.default_sort_order,defaultThreadRateLimitPerUser:e.default_thread_rate_limit_per_user,flags_:e.flags,guild_id:t??e.guild_id??null,icon:e.icon,iconEmoji:et(e.icon_emoji),id:e.id,isMessageRequest:e.is_message_request,isMessageRequestTimestamp:e.is_message_request_timestamp,isSpam:e.is_spam,lastMessageId:e.last_message_id,lastPinTimestamp:e.last_pin_timestamp,member:null!=e.member?{flags:e.member.flags,muted:e.member.muted,muteConfig:e.member.mute_config,joinTimestamp:e.member.join_timestamp}:void 0,memberCount:e.member_count,memberIdsPreview:e.member_ids_preview,memberListId:e.member_list_id,messageCount:e.message_count,name:e.name??\"\",nicks:Z(e.nicks),nsfw_:e.nsfw,originChannelId:e.origin_channel_id,ownerId:e.owner_id,parent_id:e.parent_id,parentChannelThreadType:void 0,permissionOverwrites_:J(e.permission_overwrites),position_:e.position,rateLimitPerUser_:e.rate_limit_per_user,rawRecipients:null!=e.recipients?e.recipients:[],recipients:null!=e.recipients?e.recipients.map(e=>e.id):[],rtcRegion:e.rtc_region,safetyWarnings:e.safety_warnings,template:e.template,themeColor:e.theme_color,threadMetadata:null!=e.thread_metadata?{archived:e.thread_metadata.archived,autoArchiveDuration:e.thread_metadata.auto_archive_duration,archiveTimestamp:e.thread_metadata.archive_timestamp,createTimestamp:e.thread_metadata.create_timestamp,locked:e.thread_metadata.locked,invitable:e.thread_metadata.invitable??!0}:void 0,topic_:e.topic,totalMessageSent:e.total_message_sent,type:null!=e.type?e.type:I.ChannelTypes.UNKNOWN,userLimit_:e.user_limit,version:e.version,videoQualityMode:e.video_quality_mode,voiceBackgroundDisplay:en(e.voice_background_display)};return(0,_.dangerouslyCast)(n,eu)}}",
        "VOICE_THREAD_PARENT_CHANNEL_TYPES": {
            "toJSON": "function(){return Array.from(this)}",
            "has": "function has() { [native code] }",
            "add": "function add() { [native code] }",
            "delete": "function delete() { [native code] }",
            "clear": "function clear() { [native code] }",
            "entries": "function entries() { [native code] }",
            "forEach": "function forEach() { [native code] }",
            "size": 3,
            "values": "function values() { [native code] }",
            "keys": "function values() { [native code] }",
            "union": "function union() { [native code] }",
            "intersection": "function intersection() { [native code] }",
            "difference": "function difference() { [native code] }",
            "symmetricDifference": "function symmetricDifference() { [native code] }",
            "isSubsetOf": "function isSubsetOf() { [native code] }",
            "isSupersetOf": "function isSupersetOf() { [native code] }",
            "isDisjointFrom": "function isDisjointFrom() { [native code] }"
        },
        "castChannelRecord": "function eh(e){let t=eC[e.type??I.ChannelTypes.GUILD_TEXT]??eu;return(0,_.dangerouslyCast)(e,t)}",
        "createChannelRecord": "function eL(e){return new(eC[e.type??I.ChannelTypes.GUILD_TEXT]??eu)(e_(e))}",
        "createChannelRecordFromInvite": "function eR(e){return eL(e)}",
        "createChannelRecordFromServer": "function eO(e,t){return(eN[e.type??I.ChannelTypes.GUILD_TEXT]??eu.fromServer)(e,t)}",
        "getAccessPermissions": "function eo(e){return D(e)?ei:I.Permissions.VIEW_CHANNEL}",
        "getBasicAccessPermissions": "function ea(e){return D(e)?er:I.BasicPermissions.VIEW_CHANNEL}",
        "isGuildChannelType": "function h(e){return C.has(e)}",
        "isGuildReadableType": "function b(e){return v.has(e)}",
        "isGuildSelectableChannelType": "function S(e){return d.has(e)}",
        "isGuildTextChannelType": "function O(e){return N.has(e)}",
        "isGuildVocalChannelType": "function D(e){return\"SELECTABLE\"!==e&&L.has(e)}",
        "isMultiUserDM": "function M(e){return P.has(e)}",
        "isPrivate": "function f(e){return p.has(e)}",
        "isReadableType": "function V(e){return F.has(e)}",
        "isTextChannel": "function g(e){return U.has(e)}",
        "isThread": "function H(e){return B.has(e)}",
        "isVoiceChannel": "function y(e){return G.has(e)}"
    }
}