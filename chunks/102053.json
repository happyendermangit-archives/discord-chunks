{
    "exports": {
        "default": {
            "isTracing_": true,
            "endTime_": 1709281898847,
            "lastImportDuration": 0,
            "logGroups": [
                {
                    "index": 0,
                    "timestamp": 1709281883847,
                    "logs": [],
                    "nativeLogs": []
                }
            ],
            "logs": [],
            "prefix": "",
            "isTracing": true,
            "endTime": 1709281898847,
            "resumeTracing": "resumeTracing(){!this.isTracing&&(this.logGroups.unshift({index:this.logGroups.length,timestamp:Date.now(),logs:[],nativeLogs:[]}),this.logs=this.logGroups[0].logs),this.endTime=Date.now()+1e4}",
            "mark": "mark(e,_,E){this.isTracing&&(this.logs.push({emoji:e,prefix:\"\".concat(this.prefix),log:_,delta:E,timestamp:Date.now()}),this.addImportLogDetail())}",
            "markAndLog": "markAndLog(e,_,E,t){e.log(E),this.isTracing&&(this.logs.push({emoji:_,prefix:this.prefix,log:E,delta:t,timestamp:Date.now()}),this.addImportLogDetail())}",
            "addImportLogDetail": "addImportLogDetail(){let e=t();e-this.lastImportDuration>25&&(this.addDetail(\"JS Imports\",Math.ceil(e)+\"ms\"),this.lastImportDuration=e)}",
            "markWithDelta": "markWithDelta(e,_){let E=this.logs[this.logs.length-1];this.mark(e,_,null!=E&&null!=E.timestamp?Date.now()-E.timestamp:void 0)}",
            "markAt": "markAt(e,_,E){var t,o;if(!this.isTracing)return;let n=0;for(;n<this.logs.length;n++){let{timestamp:e}=this.logs[n];if(null!=e&&e>E)break}this.logs.splice(n,0,{emoji:e,log:_,timestamp:E,prefix:null!==(o=null===(t=this.logs[n])||void 0===t?void 0:t.prefix)&&void 0!==o?o:\"\"})}",
            "addDetail": "addDetail(e,_){this.isTracing&&this.logs.push({emoji:this.logs[this.logs.length-1].emoji,prefix:this.prefix,log:\"  â†ª \".concat(e,\" \").concat(_)})}",
            "time": "time(e,_,E){if(!this.isTracing)return E();let t=this.prefix;this.mark(e,\"Start \".concat(_)),this.prefix+=\"| \";let o=Date.now(),n=E(),r=Date.now()-o;return this.prefix=t,this.mark(e,\"Finish \".concat(_),r),n}",
            "timeAsync": "async timeAsync(e,_,E){if(!this.isTracing)return E();this.mark(e,\"Start \".concat(_));let t=Date.now(),o=await E(),n=Date.now()-t;return this.mark(e,\"Finish \".concat(_),n),o}",
            "setServerTrace": "setServerTrace(e){this.logGroups[0].serverTrace=e}"
        }
    }
}