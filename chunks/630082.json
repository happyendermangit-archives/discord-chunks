{
    "exports": {
        "claimQuestRewardCode": "async function _(e,t,n){if(!l.default.isClaimingRewardCode(e)){a.default.dispatch({type:\"QUESTS_CLAIM_REWARD_CODE_BEGIN\",questId:e});try{let s=await i.default.post({url:d.Endpoints.QUESTS_REWARD_CODE(e),body:{platform:t,location:n}});a.default.dispatch({type:\"QUESTS_CLAIM_REWARD_CODE_SUCCESS\",questId:e,rewardCode:(0,u.questsRewardCodeFromServer)(s.body)})}catch(t){throw a.default.dispatch({type:\"QUESTS_CLAIM_REWARD_CODE_FAILURE\",error:new s.default(t),questId:e}),t}}}",
        "completeQuestPreview": "async function g(e){try{let t=await i.default.post({url:d.Endpoints.QUESTS_PREVIEW_COMPLETE(e),body:{}});a.default.dispatch({type:\"QUESTS_PREVIEW_UPDATE_SUCCESS\",previewQuestUserStatus:(0,u.questUserStatusFromServer)(t.body)})}catch(t){a.default.dispatch({type:\"QUESTS_PREVIEW_UPDATE_FAILURE\",error:new s.default(t),questId:e})}}",
        "dismissProgressTrackingFailureNotice": "function S(e){a.default.dispatch({type:\"QUESTS_DISMISS_PROGRESS_TRACKING_FAILURE_NOTICE\",streamKey:e})}",
        "dismissQuestContent": "async function p(e,t){if(!l.default.isDismissingContent(e)){a.default.dispatch({type:\"QUESTS_DISMISS_CONTENT_BEGIN\",questId:e,content:t});try{let n=await i.default.post({url:d.Endpoints.QUESTS_DISMISS_CONTENT(e,t),body:{}});a.default.dispatch({type:\"QUESTS_DISMISS_CONTENT_SUCCESS\",dismissedQuestUserStatus:(0,u.questUserStatusFromServer)(n.body)})}catch(t){a.default.dispatch({type:\"QUESTS_DISMISS_CONTENT_FAILURE\",error:new s.default(t),questId:e})}}}",
        "enrollInQuest": "async function f(e,t){if(null!=t.questContentCTA&&(0,r.trackQuestContentClicked)(e,t.questContent,t.questContentCTA),!l.default.isEnrolling(e)){a.default.dispatch({type:\"QUESTS_ENROLL_BEGIN\",questId:e});try{let n=await i.default.post({url:d.Endpoints.QUESTS_ENROLL(e),body:{location:t.questContent}});a.default.dispatch({type:\"QUESTS_ENROLL_SUCCESS\",enrolledQuestUserStatus:(0,u.questUserStatusFromServer)(n.body)})}catch(t){a.default.dispatch({type:\"QUESTS_ENROLL_FAILURE\",questId:e})}}}",
        "fetchCurrentQuests": "async function o(){if(!l.default.isFetchingCurrentQuests){a.default.dispatch({type:\"QUESTS_FETCH_CURRENT_QUESTS_BEGIN\"});try{let e=(await i.default.get({url:d.Endpoints.QUESTS_CURRENT_QUESTS})).body.quests.map(e=>(0,u.questWithUserStatusFromServer)(e)).filter(e=>e.userStatus?.claimedAt!=null||e.config.rewardCodePlatforms.length>0);a.default.dispatch({type:\"QUESTS_FETCH_CURRENT_QUESTS_SUCCESS\",quests:e})}catch(e){a.default.dispatch({type:\"QUESTS_FETCH_CURRENT_QUESTS_FAILURE\",error:new s.default(e)})}}}",
        "fetchQuestRewardCode": "async function E(e){if(!l.default.isFetchingRewardCode(e)){a.default.dispatch({type:\"QUESTS_FETCH_REWARD_CODE_BEGIN\",questId:e});try{let t=await i.default.get({url:d.Endpoints.QUESTS_REWARD_CODE(e)});a.default.dispatch({type:\"QUESTS_FETCH_REWARD_CODE_SUCCESS\",questId:e,rewardCode:(0,u.questsRewardCodeFromServer)(t.body)})}catch(t){throw a.default.dispatch({type:\"QUESTS_FETCH_REWARD_CODE_FAILURE\",error:new s.default(t),questId:e}),t}}}",
        "resetQuestDismissibilityStatus": "async function T(e){try{let t=await i.default.delete({url:d.Endpoints.QUESTS_PREVIEW_DISMISSIBILITY(e),body:{}});a.default.dispatch({type:\"QUESTS_PREVIEW_UPDATE_SUCCESS\",previewQuestUserStatus:(0,u.questUserStatusFromServer)(t.body)})}catch(t){a.default.dispatch({type:\"QUESTS_PREVIEW_UPDATE_FAILURE\",error:new s.default(t),questId:e})}}",
        "resetQuestPreviewStatus": "async function m(e){try{let t=await i.default.delete({url:d.Endpoints.QUESTS_PREVIEW_STATUS(e),body:{}});a.default.dispatch({type:\"QUESTS_PREVIEW_UPDATE_SUCCESS\",previewQuestUserStatus:(0,u.questUserStatusFromServer)(t.body)})}catch(t){a.default.dispatch({type:\"QUESTS_PREVIEW_UPDATE_FAILURE\",error:new s.default(t),questId:e})}}",
        "sendHeartbeat": "async function c(e){let{questId:t,streamKey:n,applicationId:r}=e;try{let e=await i.default.post({url:d.Endpoints.QUESTS_HEARTBEAT(t),body:{stream_key:n,application_id:r}});a.default.dispatch({type:\"QUESTS_SEND_HEARTBEAT_SUCCESS\",userStatus:(0,u.questUserStatusFromServer)(e.body),applicationId:r,questId:t,streamKey:n})}catch(e){a.default.dispatch({type:\"QUESTS_SEND_HEARTBEAT_FAILURE\",error:new s.default(e),questId:t,streamKey:n})}}"
    }
}