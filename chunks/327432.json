{
    "exports": {
        "Editor": {
            "above": "above(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},{voids:n=!1,mode:r=\"lowest\",at:a=e.selection,match:i}=t;if(a){var o=Z.path(e,a);for(var[s,l]of Z.levels(e,{at:o,voids:n,match:i,reverse:\"lowest\"===r}))if(!eO.isText(s)){if(eg.isRange(a)){if(es.isAncestor(l,a.anchor.path)&&es.isAncestor(l,a.focus.path))return[s,l]}else if(!es.equals(o,l))return[s,l]}}}",
            "addMark": "addMark(e,t,n){e.addMark(t,n)}",
            "after": "after(e,t){var n,r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},a=Z.point(e,t,{edge:\"end\"}),i=Z.end(e,[]),{distance:o=1}=r,s=0;for(var l of Z.positions(e,K(K({},r),{},{at:{anchor:a,focus:i}}))){if(s>o)break;0!==s&&(n=l),s++}return n}",
            "before": "before(e,t){var n,r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},a=Z.start(e,[]),i=Z.point(e,t,{edge:\"start\"}),{distance:o=1}=r,s=0;for(var l of Z.positions(e,K(K({},r),{},{at:{anchor:a,focus:i},reverse:!0}))){if(s>o)break;0!==s&&(n=l),s++}return n}",
            "deleteBackward": "deleteBackward(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},{unit:n=\"character\"}=t;e.deleteBackward(n)}",
            "deleteForward": "deleteForward(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},{unit:n=\"character\"}=t;e.deleteForward(n)}",
            "deleteFragment": "deleteFragment(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},{direction:n=\"forward\"}=t;e.deleteFragment(n)}",
            "edges": "(e,t)=>[Z.start(e,t),Z.end(e,t)]",
            "end": "(e,t)=>Z.point(e,t,{edge:\"end\"})",
            "first": "first(e,t){var n=Z.path(e,t,{edge:\"start\"});return Z.node(e,n)}",
            "fragment": "fragment(e,t){var n=Z.range(e,t);return er.fragment(e,n)}",
            "hasBlocks": "(e,t)=>t.children.some(t=>W.isElement(t)&&Z.isBlock(e,t))",
            "hasInlines": "(e,t)=>t.children.some(t=>eO.isText(t)||Z.isInline(e,t))",
            "hasTexts": "(e,t)=>t.children.every(e=>eO.isText(e))",
            "insertBreak": "insertBreak(e){e.insertBreak()}",
            "insertSoftBreak": "insertSoftBreak(e){e.insertSoftBreak()}",
            "insertFragment": "insertFragment(e,t){e.insertFragment(t)}",
            "insertNode": "insertNode(e,t){e.insertNode(t)}",
            "insertText": "insertText(e,t){e.insertText(t)}",
            "isBlock": "(e,t)=>!e.isInline(t)",
            "isEditor": "isEditor(e){var t=X.get(e);if(void 0!==t)return t;if(!(0,i.isPlainObject)(e))return!1;var n=\"function\"==typeof e.addMark&&\"function\"==typeof e.apply&&\"function\"==typeof e.deleteBackward&&\"function\"==typeof e.deleteForward&&\"function\"==typeof e.deleteFragment&&\"function\"==typeof e.insertBreak&&\"function\"==typeof e.insertSoftBreak&&\"function\"==typeof e.insertFragment&&\"function\"==typeof e.insertNode&&\"function\"==typeof e.insertText&&\"function\"==typeof e.isInline&&\"function\"==typeof e.isVoid&&\"function\"==typeof e.normalizeNode&&\"function\"==typeof e.onChange&&\"function\"==typeof e.removeMark&&\"function\"==typeof e.getDirtyPaths&&(null===e.marks||(0,i.isPlainObject)(e.marks))&&(null===e.selection||eg.isRange(e.selection))&&er.isNodeList(e.children)&&eo.isOperationList(e.operations);return X.set(e,n),n}",
            "isEnd": "isEnd(e,t,n){var r=Z.end(e,n);return ed.equals(t,r)}",
            "isEdge": "(e,t,n)=>Z.isStart(e,t,n)||Z.isEnd(e,t,n)",
            "isEmpty": "isEmpty(e,t){var{children:n}=t,[r]=n;return 0===n.length||1===n.length&&eO.isText(r)&&\"\"===r.text&&!e.isVoid(t)}",
            "isInline": "(e,t)=>e.isInline(t)",
            "isNormalizing": "isNormalizing(e){var t=d.get(e);return void 0===t||t}",
            "isStart": "isStart(e,t,n){if(0!==t.offset)return!1;var r=Z.start(e,n);return ed.equals(t,r)}",
            "isVoid": "(e,t)=>e.isVoid(t)",
            "last": "last(e,t){var n=Z.path(e,t,{edge:\"end\"});return Z.node(e,n)}",
            "leaf": "leaf(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},r=Z.path(e,t,n);return[er.leaf(e,r),r]}",
            "levels": "*levels(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},{at:n=e.selection,reverse:r=!1,voids:a=!1}=t,{match:i}=t;if(null==i&&(i=()=>!0),n){var o=[],s=Z.path(e,n);for(var[l,c]of er.levels(e,s))if(i(l,c)&&(o.push([l,c]),!a&&W.isElement(l)&&Z.isVoid(e,l)))break;r&&o.reverse(),yield*o}}",
            "marks": "marks(e){var{marks:t,selection:n}=e;if(!n)return null;if(t)return t;if(eg.isExpanded(n)){var[r]=Z.nodes(e,{match:eO.isText});if(!r)return{};var[a]=r;return f(a,$)}var{anchor:i}=n,{path:o}=i,[s]=Z.leaf(e,o);if(0===i.offset){var l=Z.previous(e,{at:o,match:eO.isText});if(!Z.above(e,{match:t=>W.isElement(t)&&Z.isVoid(e,t)&&e.markableVoid(t)})){var c=Z.above(e,{match:t=>W.isElement(t)&&Z.isBlock(e,t)});if(l&&c){var[_,d]=l,[,u]=c;es.isAncestor(u,d)&&(s=_)}}}return f(s,j)}",
            "next": "next(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},{mode:n=\"lowest\",voids:r=!1}=t,{match:a,at:i=e.selection}=t;if(!!i){var o=Z.after(e,i,{voids:r});if(o){var[,s]=Z.last(e,[]),l=[o.path,s];if(es.isPath(i)&&0===i.length)throw Error(\"Cannot get the next node from the root node!\");if(null==a){if(es.isPath(i)){var[c]=Z.parent(e,i);a=e=>c.children.includes(e)}else a=()=>!0}var[_]=Z.nodes(e,{at:l,match:a,mode:n,voids:r});return _}}}",
            "node": "node(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},r=Z.path(e,t,n);return[er.get(e,r),r]}",
            "nodes": "*nodes(e){var t,n,r,a=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},{at:i=e.selection,mode:o=\"all\",universal:s=!1,reverse:l=!1,voids:c=!1}=a,{match:_}=a;if(!_&&(_=()=>!0),i){if(J.isSpan(i))t=i[0],n=i[1];else{var d=Z.path(e,i,{edge:\"start\"}),u=Z.path(e,i,{edge:\"end\"});t=l?u:d,n=l?d:u}var p=er.nodes(e,{reverse:l,from:t,to:n,pass:t=>{var[n]=t;return!c&&W.isElement(n)&&Z.isVoid(e,n)}}),m=[];for(var[g,E]of p){var S=r&&0===es.compare(E,r[1]);if(\"highest\"!==o||!S){if(!_(g,E)){if(s&&!S&&eO.isText(g))return;continue}if(\"lowest\"===o&&S){r=[g,E];continue}var f=\"lowest\"===o?r:[g,E];f&&(s?m.push(f):yield f),r=[g,E]}}\"lowest\"===o&&r&&(s?m.push(r):yield r),s&&(yield*m)}}",
            "normalize": "normalize(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},{force:n=!1,operation:r}=t,a=e=>l.get(e)||[],i=e=>c.get(e)||new Set,o=e=>{var t=a(e).pop(),n=t.join(\",\");return i(e).delete(n),t};if(!!Z.isNormalizing(e)){if(n){var s=Array.from(er.nodes(e),e=>{var[,t]=e;return t}),_=new Set(s.map(e=>e.join(\",\")));l.set(e,s),c.set(e,_)}0!==a(e).length&&Z.withoutNormalizing(e,()=>{for(var t of a(e))if(er.has(e,t)){var n=Z.node(e,t),[i,s]=n;W.isElement(i)&&0===i.children.length&&e.normalizeNode(n,{operation:r})}for(var l=a(e),c=l.length,_=0;0!==l.length;){if(!e.shouldNormalize({dirtyPaths:l,iteration:_,initialDirtyPathsLength:c,operation:r}))return;var d=o(e);if(er.has(e,d)){var u=Z.node(e,d);e.normalizeNode(u,{operation:r})}_++,l=a(e)}})}}",
            "parent": "parent(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},r=Z.path(e,t,n),a=es.parent(r);return Z.node(e,a)}",
            "path": "path(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},{depth:r,edge:a}=n;if(es.isPath(t)){if(\"start\"===a){var[,i]=er.first(e,t);t=i}else if(\"end\"===a){var[,o]=er.last(e,t);t=o}}return eg.isRange(t)&&(t=\"start\"===a?eg.start(t):\"end\"===a?eg.end(t):es.common(t.anchor.path,t.focus.path)),ed.isPoint(t)&&(t=t.path),null!=r&&(t=t.slice(0,r)),t}",
            "hasPath": "(e,t)=>er.has(e,t)",
            "pathRef": "pathRef(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},{affinity:r=\"forward\"}=n,a={current:t,affinity:r,unref(){var{current:t}=a;return Z.pathRefs(e).delete(a),a.current=null,t}};return Z.pathRefs(e).add(a),a}",
            "pathRefs": "pathRefs(e){var t=u.get(e);return!t&&(t=new Set,u.set(e,t)),t}",
            "point": "point(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},{edge:r=\"start\"}=n;if(es.isPath(t)){if(\"end\"===r){var a,[,i]=er.last(e,t);a=i}else{var[,o]=er.first(e,t);a=o}var s=er.get(e,a);if(!eO.isText(s))throw Error(\"Cannot get the \".concat(r,\" point in the node at path [\").concat(t,\"] because it has no \").concat(r,\" text node.\"));return{path:a,offset:\"end\"===r?s.text.length:0}}if(eg.isRange(t)){var[l,c]=eg.edges(t);return\"start\"===r?l:c}return t}",
            "pointRef": "pointRef(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},{affinity:r=\"forward\"}=n,a={current:t,affinity:r,unref(){var{current:t}=a;return Z.pointRefs(e).delete(a),a.current=null,t}};return Z.pointRefs(e).add(a),a}",
            "pointRefs": "pointRefs(e){var t=p.get(e);return!t&&(t=new Set,p.set(e,t)),t}",
            "positions": "*positions(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},{at:n=e.selection,unit:r=\"offset\",reverse:a=!1,voids:i=!1}=t;if(n){var o=Z.range(e,n),[s,l]=eg.edges(o),c=a?l:s,_=!1,d=\"\",u=0,p=0,m=0;for(var[g,E]of Z.nodes(e,{at:n,reverse:a,voids:i})){if(W.isElement(g)){if(!i&&e.isVoid(g)){yield Z.start(e,E);continue}if(e.isInline(g))continue;if(Z.hasInlines(e,g)){var S=es.isAncestor(E,l.path)?l:Z.end(e,E),f=es.isAncestor(E,s.path)?s:Z.start(e,E);d=Z.string(e,{anchor:f,focus:S},{voids:i}),_=!0}}if(eO.isText(g)){var T=es.equals(E,c.path);for(T?(p=a?c.offset:g.text.length-c.offset,m=c.offset):(p=g.text.length,m=a?p:0),(T||_||\"offset\"===r)&&(yield{path:E,offset:m},_=!1);;){if(0===u){if(\"\"===d)break;u=function(e,t,n){if(\"character\"===t)return b(e,n);if(\"word\"===t)return v(e,n);if(\"line\"===t||\"block\"===t)return e.length;return 1}(d,r,a),d=O(d,u,a)[1]}if(m=a?m-u:m+u,(p-=u)<0){u=-p;break}u=0,yield{path:E,offset:m}}}}}}",
            "previous": "previous(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},{mode:n=\"lowest\",voids:r=!1}=t,{match:a,at:i=e.selection}=t;if(!!i){var o=Z.before(e,i,{voids:r});if(o){var[,s]=Z.first(e,[]),l=[o.path,s];if(es.isPath(i)&&0===i.length)throw Error(\"Cannot get the previous node from the root node!\");if(null==a){if(es.isPath(i)){var[c]=Z.parent(e,i);a=e=>c.children.includes(e)}else a=()=>!0}var[_]=Z.nodes(e,{reverse:!0,at:l,match:a,mode:n,voids:r});return _}}}",
            "range": "(e,t,n)=>eg.isRange(t)&&!n?t:{anchor:Z.start(e,t),focus:Z.end(e,n||t)}",
            "rangeRef": "rangeRef(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},{affinity:r=\"forward\"}=n,a={current:t,affinity:r,unref(){var{current:t}=a;return Z.rangeRefs(e).delete(a),a.current=null,t}};return Z.rangeRefs(e).add(a),a}",
            "rangeRefs": "rangeRefs(e){var t=m.get(e);return!t&&(t=new Set,m.set(e,t)),t}",
            "removeMark": "removeMark(e,t){e.removeMark(t)}",
            "setNormalizing": "setNormalizing(e,t){d.set(e,t)}",
            "start": "(e,t)=>Z.point(e,t,{edge:\"start\"})",
            "string": "string(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},{voids:r=!1}=n,a=Z.range(e,t),[i,o]=eg.edges(a),s=\"\";for(var[l,c]of Z.nodes(e,{at:a,match:eO.isText,voids:r})){var _=l.text;es.equals(c,o.path)&&(_=_.slice(0,o.offset)),es.equals(c,i.path)&&(_=_.slice(i.offset)),s+=_}return s}",
            "unhangRange": "unhangRange(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},{voids:r=!1}=n,[a,i]=eg.edges(t);if(0!==a.offset||0!==i.offset||eg.isCollapsed(t)||es.hasPrevious(i.path))return t;var o=Z.above(e,{at:i,match:t=>W.isElement(t)&&Z.isBlock(e,t),voids:r}),s=o?o[1]:[],l={anchor:Z.start(e,a),focus:i},c=!0;for(var[_,d]of Z.nodes(e,{at:l,match:eO.isText,reverse:!0,voids:r})){if(c){c=!1;continue}if(\"\"!==_.text||es.isBefore(d,s)){i={path:d,offset:_.text.length};break}}return{anchor:a,focus:i}}",
            "void": "void(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};return Z.above(e,K(K({},t),{},{match:t=>W.isElement(t)&&Z.isVoid(e,t)}))}",
            "withoutNormalizing": "withoutNormalizing(e,t){var n=Z.isNormalizing(e);Z.setNormalizing(e,!1);try{t()}finally{Z.setNormalizing(e,n)}Z.normalize(e)}"
        },
        "Element": {
            "isAncestor": "e=>(0,i.isPlainObject)(e)&&er.isNodeList(e.children)",
            "isElement": "e=>(0,i.isPlainObject)(e)&&er.isNodeList(e.children)&&!Z.isEditor(e)",
            "isElementList": "e=>Array.isArray(e)&&e.every(e=>W.isElement(e))",
            "isElementProps": "e=>void 0!==e.children",
            "isElementType": "function(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:\"type\";return z(e)&&e[n]===t}",
            "matches": "matches(e,t){for(var n in t)if(\"children\"!==n&&e[n]!==t[n])return!1;return!0}"
        },
        "Node": {
            "ancestor": "ancestor(e,t){var n=er.get(e,t);if(eO.isText(n))throw Error(\"Cannot get the ancestor node at path [\".concat(t,\"] because it refers to a text node instead: \").concat(ef.stringify(n)));return n}",
            "ancestors": "*ancestors(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};for(var r of es.ancestors(t,n)){var a=[er.ancestor(e,r),r];yield a}}",
            "child": "child(e,t){if(eO.isText(e))throw Error(\"Cannot get the child of a text node: \".concat(ef.stringify(e)));var n=e.children[t];if(null==n)throw Error(\"Cannot get child at index `\".concat(t,\"` in node: \").concat(ef.stringify(e)));return n}",
            "children": "*children(e,t){for(var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},{reverse:r=!1}=n,a=er.ancestor(e,t),{children:i}=a,o=r?i.length-1:0;r?o>=0:o<i.length;){var s=er.child(a,o),l=t.concat(o);yield[s,l],o=r?o-1:o+1}}",
            "common": "common(e,t,n){var r=es.common(t,n);return[er.get(e,r),r]}",
            "descendant": "descendant(e,t){var n=er.get(e,t);if(Z.isEditor(n))throw Error(\"Cannot get the descendant node at path [\".concat(t,\"] because it refers to the root editor node instead: \").concat(ef.stringify(n)));return n}",
            "descendants": "*descendants(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};for(var[n,r]of er.nodes(e,t))0!==r.length&&(yield[n,r])}",
            "elements": "*elements(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};for(var[n,r]of er.nodes(e,t))W.isElement(n)&&(yield[n,r])}",
            "extractProps": "extractProps(e){if(W.isAncestor(e)){var t=f(e,ee);return t}var t=f(e,et);return t}",
            "first": "first(e,t){for(var n=t.slice(),r=er.get(e,n);r&&!eO.isText(r)&&0!==r.children.length;){;r=r.children[0],n.push(0)}return[r,n]}",
            "fragment": "fragment(e,t){if(eO.isText(e))throw Error(\"Cannot get a fragment starting from a root text node: \".concat(ef.stringify(e)));return(0,o.produce)({children:e.children},e=>{var[n,r]=eg.edges(t);for(var[,a]of er.nodes(e,{reverse:!0,pass:e=>{var[,n]=e;return!eg.includes(t,n)}})){if(!eg.includes(t,a)){var i=er.parent(e,a),o=a[a.length-1];i.children.splice(o,1)}if(es.equals(a,r.path)){var s=er.leaf(e,a);s.text=s.text.slice(0,r.offset)}if(es.equals(a,n.path)){var l=er.leaf(e,a);l.text=l.text.slice(n.offset)}}Z.isEditor(e)&&(e.selection=null)}).children}",
            "get": "get(e,t){for(var n=e,r=0;r<t.length;r++){var a=t[r];if(eO.isText(n)||!n.children[a])throw Error(\"Cannot find a descendant at path [\".concat(t,\"] in node: \").concat(ef.stringify(e)));n=n.children[a]}return n}",
            "has": "has(e,t){for(var n=e,r=0;r<t.length;r++){var a=t[r];if(eO.isText(n)||!n.children[a])return!1;n=n.children[a]}return!0}",
            "isNode": "e=>eO.isText(e)||W.isElement(e)||Z.isEditor(e)",
            "isNodeList": "isNodeList(e){if(!Array.isArray(e))return!1;var t=en.get(e);if(void 0!==t)return t;var n=e.every(e=>er.isNode(e));return en.set(e,n),n}",
            "last": "last(e,t){for(var n=t.slice(),r=er.get(e,n);r&&!eO.isText(r)&&0!==r.children.length;){;var a=r.children.length-1;r=r.children[a],n.push(a)}return[r,n]}",
            "leaf": "leaf(e,t){var n=er.get(e,t);if(!eO.isText(n))throw Error(\"Cannot get the leaf node at path [\".concat(t,\"] because it refers to a non-leaf node: \").concat(ef.stringify(n)));return n}",
            "levels": "*levels(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};for(var r of es.levels(t,n)){var a=er.get(e,r);yield[a,r]}}",
            "matches": "(e,t)=>W.isElement(e)&&W.isElementProps(t)&&W.matches(e,t)||eO.isText(e)&&eO.isTextProps(t)&&eO.matches(e,t)",
            "nodes": "*nodes(e){for(var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},{pass:n,reverse:r=!1}=t,{from:a=[],to:i}=t,o=new Set,s=[],l=e;!(i&&(r?es.isBefore(s,i):es.isAfter(s,i)));){;if(!o.has(l)&&(yield[l,s]),!o.has(l)&&!eO.isText(l)&&0!==l.children.length&&(null==n||!1===n([l,s]))){o.add(l);var c=r?l.children.length-1:0;es.isAncestor(s,a)&&(c=a[s.length]),s=s.concat(c),l=er.get(e,s);continue}if(0===s.length)break;if(!r){var _=es.next(s);if(er.has(e,_)){s=_,l=er.get(e,s);continue}}if(r&&0!==s[s.length-1]){s=es.previous(s),l=er.get(e,s);continue}s=es.parent(s),l=er.get(e,s),o.add(l)}}",
            "parent": "parent(e,t){var n=es.parent(t),r=er.get(e,n);if(eO.isText(r))throw Error(\"Cannot get the parent of path [\".concat(t,\"] because it does not exist in the root.\"));return r}",
            "string": "e=>eO.isText(e)?e.text:e.children.map(er.string).join(\"\")",
            "texts": "*texts(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};for(var[n,r]of er.nodes(e,t))eO.isText(n)&&(yield[n,r])}"
        },
        "Path": {
            "ancestors": "ancestors(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},{reverse:n=!1}=t,r=es.levels(e,t);return r=n?r.slice(1):r.slice(0,-1)}",
            "common": "common(e,t){for(var n=[],r=0;r<e.length&&r<t.length;r++){var a=e[r];if(a!==t[r])break;n.push(a)}return n}",
            "compare": "compare(e,t){for(var n=Math.min(e.length,t.length),r=0;r<n;r++){if(e[r]<t[r])return -1;if(e[r]>t[r])return 1}return 0}",
            "endsAfter": "endsAfter(e,t){var n=e.length-1,r=e.slice(0,n),a=t.slice(0,n),i=e[n],o=t[n];return es.equals(r,a)&&i>o}",
            "endsAt": "endsAt(e,t){var n=e.length,r=e.slice(0,n),a=t.slice(0,n);return es.equals(r,a)}",
            "endsBefore": "endsBefore(e,t){var n=e.length-1,r=e.slice(0,n),a=t.slice(0,n),i=e[n],o=t[n];return es.equals(r,a)&&i<o}",
            "equals": "(e,t)=>e.length===t.length&&e.every((e,n)=>e===t[n])",
            "hasPrevious": "e=>e[e.length-1]>0",
            "isAfter": "(e,t)=>1===es.compare(e,t)",
            "isAncestor": "(e,t)=>e.length<t.length&&0===es.compare(e,t)",
            "isBefore": "(e,t)=>-1===es.compare(e,t)",
            "isChild": "(e,t)=>e.length===t.length+1&&0===es.compare(e,t)",
            "isCommon": "(e,t)=>e.length<=t.length&&0===es.compare(e,t)",
            "isDescendant": "(e,t)=>e.length>t.length&&0===es.compare(e,t)",
            "isParent": "(e,t)=>e.length+1===t.length&&0===es.compare(e,t)",
            "isPath": "e=>Array.isArray(e)&&(0===e.length||\"number\"==typeof e[0])",
            "isSibling": "isSibling(e,t){if(e.length!==t.length)return!1;var n=e.slice(0,-1),r=t.slice(0,-1);return e[e.length-1]!==t[t.length-1]&&es.equals(n,r)}",
            "levels": "levels(e){for(var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},{reverse:n=!1}=t,r=[],a=0;a<=e.length;a++)r.push(e.slice(0,a));return n&&r.reverse(),r}",
            "next": "next(e){if(0===e.length)throw Error(\"Cannot get the next path of a root path [\".concat(e,\"], because it has no next index.\"));var t=e[e.length-1];return e.slice(0,-1).concat(t+1)}",
            "operationCanTransformPath": "operationCanTransformPath(e){switch(e.type){case\"insert_node\":case\"remove_node\":case\"merge_node\":case\"split_node\":case\"move_node\":return!0;default:return!1}}",
            "parent": "parent(e){if(0===e.length)throw Error(\"Cannot get the parent path of the root path [\".concat(e,\"].\"));return e.slice(0,-1)}",
            "previous": "previous(e){if(0===e.length)throw Error(\"Cannot get the previous path of a root path [\".concat(e,\"], because it has no previous index.\"));var t=e[e.length-1];if(t<=0)throw Error(\"Cannot get the previous path of a first child path [\".concat(e,\"] because it would result in a negative index.\"));return e.slice(0,-1).concat(t-1)}",
            "relative": "relative(e,t){if(!es.isAncestor(t,e)&&!es.equals(e,t))throw Error(\"Cannot get the relative path of [\".concat(e,\"] inside ancestor [\").concat(t,\"], because it is not above or equal to the path.\"));return e.slice(t.length)}",
            "transform": "transform(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};if(!e)return null;var r=[...e],{affinity:a=\"forward\"}=n;if(0===e.length)return r;switch(t.type){case\"insert_node\":var{path:i}=t;(es.equals(i,r)||es.endsBefore(i,r)||es.isAncestor(i,r))&&(r[i.length-1]+=1);break;case\"remove_node\":var{path:o}=t;if(es.equals(o,r)||es.isAncestor(o,r))return null;es.endsBefore(o,r)&&(r[o.length-1]-=1);break;case\"merge_node\":var{path:s,position:l}=t;es.equals(s,r)||es.endsBefore(s,r)?r[s.length-1]-=1:es.isAncestor(s,r)&&(r[s.length-1]-=1,r[s.length]+=l);break;case\"split_node\":var{path:c,position:_}=t;if(es.equals(c,r)){if(\"forward\"===a)r[r.length-1]+=1;else if(\"backward\"!==a)return null}else es.endsBefore(c,r)?r[c.length-1]+=1:es.isAncestor(c,r)&&e[c.length]>=_&&(r[c.length-1]+=1,r[c.length]-=_);break;case\"move_node\":var{path:d,newPath:u}=t;if(es.equals(d,u))break;if(es.isAncestor(d,r)||es.equals(d,r)){var p=u.slice();return es.endsBefore(d,u)&&d.length<u.length&&(p[d.length-1]-=1),p.concat(r.slice(d.length))}es.isSibling(d,u)&&(es.isAncestor(u,r)||es.equals(u,r))?es.endsBefore(d,r)?r[d.length-1]-=1:r[d.length-1]+=1:es.endsBefore(u,r)||es.equals(u,r)||es.isAncestor(u,r)?(es.endsBefore(d,r)&&(r[d.length-1]-=1),r[u.length-1]+=1):es.endsBefore(d,r)&&(es.equals(u,r)&&(r[u.length-1]+=1),r[d.length-1]-=1)}return r}"
        },
        "Point": {
            "compare": "compare(e,t){var n=es.compare(e.path,t.path);if(0===n)return e.offset<t.offset?-1:e.offset>t.offset?1:0;return n}",
            "isAfter": "(e,t)=>1===ed.compare(e,t)",
            "isBefore": "(e,t)=>-1===ed.compare(e,t)",
            "equals": "(e,t)=>e.offset===t.offset&&es.equals(e.path,t.path)",
            "isPoint": "e=>(0,i.isPlainObject)(e)&&\"number\"==typeof e.offset&&es.isPath(e.path)",
            "transform": "transform(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};return(0,o.produce)(e,e=>{if(null===e)return null;var{affinity:r=\"forward\"}=n,{path:a,offset:i}=e;switch(t.type){case\"insert_node\":case\"move_node\":e.path=es.transform(a,t,n);break;case\"insert_text\":es.equals(t.path,a)&&(t.offset<i||t.offset===i&&\"forward\"===r)&&(e.offset+=t.text.length);break;case\"merge_node\":es.equals(t.path,a)&&(e.offset+=t.position),e.path=es.transform(a,t,n);break;case\"remove_text\":es.equals(t.path,a)&&t.offset<=i&&(e.offset-=Math.min(i-t.offset,t.text.length));break;case\"remove_node\":if(es.equals(t.path,a)||es.isAncestor(t.path,a))return null;e.path=es.transform(a,t,n);break;case\"split_node\":if(es.equals(t.path,a)){if(t.position===i&&null==r)return null;(t.position<i||t.position===i&&\"forward\"===r)&&(e.offset-=t.position,e.path=es.transform(a,t,e_(e_({},n),{},{affinity:\"forward\"})))}else e.path=es.transform(a,t,n)}})}"
        },
        "Range": {
            "edges": "edges(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},{reverse:n=!1}=t,{anchor:r,focus:a}=e;return eg.isBackward(e)===n?[r,a]:[a,r]}",
            "end": "end(e){var[,t]=eg.edges(e);return t}",
            "equals": "(e,t)=>ed.equals(e.anchor,t.anchor)&&ed.equals(e.focus,t.focus)",
            "includes": "includes(e,t){if(eg.isRange(t)){if(eg.includes(e,t.anchor)||eg.includes(e,t.focus))return!0;var[n,r]=eg.edges(e),[a,i]=eg.edges(t);return ed.isBefore(n,a)&&ed.isAfter(r,i)}var[o,s]=eg.edges(e),l=!1,c=!1;return ed.isPoint(t)?(l=ed.compare(t,o)>=0,c=0>=ed.compare(t,s)):(l=es.compare(t,o.path)>=0,c=0>=es.compare(t,s.path)),l&&c}",
            "intersection": "intersection(e,t){var n=f(e,ep),[r,a]=eg.edges(e),[i,o]=eg.edges(t),l=ed.isBefore(r,i)?i:r,c=ed.isBefore(a,o)?a:o;return ed.isBefore(c,l)?null:function(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?em(Object(n),!0).forEach(function(t){s(e,t,n[t])}):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):em(Object(n)).forEach(function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))})}return e}({anchor:l,focus:c},n)}",
            "isBackward": "isBackward(e){var{anchor:t,focus:n}=e;return ed.isAfter(t,n)}",
            "isCollapsed": "isCollapsed(e){var{anchor:t,focus:n}=e;return ed.equals(t,n)}",
            "isExpanded": "e=>!eg.isCollapsed(e)",
            "isForward": "e=>!eg.isBackward(e)",
            "isRange": "e=>(0,i.isPlainObject)(e)&&ed.isPoint(e.anchor)&&ed.isPoint(e.focus)",
            "points": "*points(e){yield[e.anchor,\"anchor\"],yield[e.focus,\"focus\"]}",
            "start": "start(e){var[t]=eg.edges(e);return t}",
            "transform": "transform(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};return(0,o.produce)(e,e=>{if(null===e)return null;var r,a,{affinity:i=\"inward\"}=n;if(\"inward\"===i){var o=eg.isCollapsed(e);eg.isForward(e)?(r=\"forward\",a=o?r:\"backward\"):(r=\"backward\",a=o?r:\"forward\")}else\"outward\"===i?eg.isForward(e)?(r=\"backward\",a=\"forward\"):(r=\"forward\",a=\"backward\"):(r=i,a=i);var s=ed.transform(e.anchor,t,{affinity:r}),l=ed.transform(e.focus,t,{affinity:a});if(!s||!l)return null;e.anchor=s,e.focus=l})}"
        },
        "Scrubber": {
            "setScrubber": "setScrubber(e){eS=e}",
            "stringify": "e=>JSON.stringify(e,eS)"
        },
        "Text": {
            "equals": "equals(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},{loose:r=!1}=n;function a(e){return f(e,eT)}return eb(r?f(e,eT):e,r?f(t,eT):t)}",
            "isText": "e=>(0,i.isPlainObject)(e)&&\"string\"==typeof e.text",
            "isTextList": "e=>Array.isArray(e)&&e.every(e=>eO.isText(e))",
            "isTextProps": "e=>void 0!==e.text",
            "matches": "matches(e,t){for(var n in t)if(\"text\"!==n&&(!e.hasOwnProperty(n)||e[n]!==t[n]))return!1;return!0}",
            "decorations": "decorations(e,t){var n=[ev({},e)];for(var r of t){var a=f(r,eC),[i,o]=eg.edges(r),s=[],l=0,c=i.offset,_=o.offset;for(var d of n){var{length:u}=d.text,p=l;if(l+=u,c<=p&&l<=_){Object.assign(d,a),s.push(d);continue}if(c!==_&&(c===l||_===p)||c>l||_<p||_===p&&0!==p){s.push(d);continue}var m=d,g=void 0,E=void 0;if(_<l){var S=_-p;E=ev(ev({},m),{},{text:m.text.slice(S)}),m=ev(ev({},m),{},{text:m.text.slice(0,S)})}if(c>p){var b=c-p;g=ev(ev({},m),{},{text:m.text.slice(0,b)}),m=ev(ev({},m),{},{text:m.text.slice(b)})}Object.assign(m,a),g&&s.push(g),s.push(m),E&&s.push(E)}n=s}return n}"
        },
        "Transforms": {
            "transform": "transform(e,t){e.children=(0,o.createDraft)(e.children);var n=e.selection&&(0,o.createDraft)(e.selection);try{n=eD(e,n,t)}finally{e.children=(0,o.finishDraft)(e.children),n?e.selection=(0,o.isDraft)(n)?(0,o.finishDraft)(n):n:e.selection=null}}",
            "insertNodes": "insertNodes(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};Z.withoutNormalizing(e,()=>{var{hanging:r=!1,voids:a=!1,mode:i=\"lowest\"}=n,{at:o,match:s,select:l}=n;if(er.isNode(t)&&(t=[t]),0!==t.length){var[c]=t;if(!o&&(o=e.selection?e.selection:e.children.length>0?Z.end(e,[]):[0],l=!0),null==l&&(l=!1),eg.isRange(o)){if(!r&&(o=Z.unhangRange(e,o,{voids:a})),eg.isCollapsed(o))o=o.anchor;else{var[,_]=eg.edges(o),d=Z.pointRef(e,_);eU.delete(e,{at:o}),o=d.unref()}}if(ed.isPoint(o)){null==s&&(s=eO.isText(c)?e=>eO.isText(e):e.isInline(c)?t=>eO.isText(t)||Z.isInline(e,t):t=>W.isElement(t)&&Z.isBlock(e,t));var[u]=Z.nodes(e,{at:o.path,match:s,mode:i,voids:a});if(!u)return;var[,p]=u,m=Z.pathRef(e,p),g=Z.isEnd(e,o,p);eU.splitNodes(e,{at:o,match:s,mode:i,voids:a});var E=m.unref();o=g?es.next(E):E}var S=es.parent(o),f=o[o.length-1];if(!(!a&&Z.void(e,{at:S}))){for(var b of t){var T=S.concat(f);f++,e.apply({type:\"insert_node\",path:T,node:b}),o=es.next(o)}if(o=es.previous(o),l){var C=Z.end(e,o);C&&eU.select(e,C)}}}})}",
            "liftNodes": "liftNodes(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};Z.withoutNormalizing(e,()=>{var{at:n=e.selection,mode:r=\"lowest\",voids:a=!1}=t,{match:i}=t;if(null==i&&(i=es.isPath(n)?eL(e,n):t=>W.isElement(t)&&Z.isBlock(e,t)),n)for(var o of Array.from(Z.nodes(e,{at:n,match:i,mode:r,voids:a}),t=>{var[,n]=t;return Z.pathRef(e,n)})){var s=o.unref();if(s.length<2)throw Error(\"Cannot lift node at a path [\".concat(s,\"] because it has a depth of less than `2`.\"));var[l,c]=Z.node(e,es.parent(s)),_=s[s.length-1],{length:d}=l.children;if(1===d){var u=es.next(c);eU.moveNodes(e,{at:s,to:u,voids:a}),eU.removeNodes(e,{at:c,voids:a})}else if(0===_)eU.moveNodes(e,{at:s,to:c,voids:a});else if(_===d-1){var p=es.next(c);eU.moveNodes(e,{at:s,to:p,voids:a})}else{var m=es.next(s),g=es.next(c);eU.splitNodes(e,{at:m,voids:a}),eU.moveNodes(e,{at:s,to:g,voids:a})}}})}",
            "mergeNodes": "mergeNodes(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};Z.withoutNormalizing(e,()=>{var n,r,{match:a,at:i=e.selection}=t,{hanging:o=!1,voids:s=!1,mode:l=\"lowest\"}=t;if(!i)return;if(null==a){if(es.isPath(i)){var[c]=Z.parent(e,i);a=e=>c.children.includes(e)}else a=t=>W.isElement(t)&&Z.isBlock(e,t)}if(!o&&eg.isRange(i)&&(i=Z.unhangRange(e,i,{voids:s})),eg.isRange(i)){if(eg.isCollapsed(i))i=i.anchor;else{var[,_]=eg.edges(i),d=Z.pointRef(e,_);eU.delete(e,{at:i}),i=d.unref(),null==t.at&&eU.select(e,i)}}var[u]=Z.nodes(e,{at:i,match:a,voids:s,mode:l}),p=Z.previous(e,{at:i,match:a,voids:s,mode:l});if(!!u&&!!p){var[m,g]=u,[E,S]=p;if(0!==g.length&&0!==S.length){var b=es.next(S),T=es.common(g,S),C=es.isSibling(g,S),h=Array.from(Z.levels(e,{at:g}),e=>{var[t]=e;return t}).slice(T.length).slice(0,-1),v=Z.above(e,{at:g,mode:\"highest\",match:t=>h.includes(t)&&ew(e,t)}),O=v&&Z.pathRef(e,v[1]);if(eO.isText(m)&&eO.isText(E)){var R=f(m,eA);r=E.text.length,n=R}else if(W.isElement(m)&&W.isElement(E)){var R=f(m,ey);r=E.children.length,n=R}else throw Error(\"Cannot merge the node at path [\".concat(g,\"] with the previous sibling because it is not the same kind: \").concat(ef.stringify(m),\" \").concat(ef.stringify(E)));!C&&eU.moveNodes(e,{at:g,to:b,voids:s}),O&&eU.removeNodes(e,{at:O.current,voids:s}),W.isElement(E)&&Z.isEmpty(e,E)||eO.isText(E)&&\"\"===E.text&&0!==S[S.length-1]?eU.removeNodes(e,{at:S,voids:s}):e.apply({type:\"merge_node\",path:b,position:r,properties:n}),O&&O.unref()}}})}",
            "moveNodes": "moveNodes(e,t){Z.withoutNormalizing(e,()=>{var{to:n,at:r=e.selection,mode:a=\"lowest\",voids:i=!1}=t,{match:o}=t;if(r){null==o&&(o=es.isPath(r)?eL(e,r):t=>W.isElement(t)&&Z.isBlock(e,t));var s=Z.pathRef(e,n);for(var l of Array.from(Z.nodes(e,{at:r,match:o,mode:a,voids:i}),t=>{var[,n]=t;return Z.pathRef(e,n)})){var c=l.unref(),_=s.current;0!==c.length&&e.apply({type:\"move_node\",path:c,newPath:_}),s.current&&es.isSibling(_,c)&&es.isAfter(_,c)&&(s.current=es.next(s.current))}s.unref()}})}",
            "removeNodes": "removeNodes(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};Z.withoutNormalizing(e,()=>{var{hanging:n=!1,voids:r=!1,mode:a=\"lowest\"}=t,{at:i=e.selection,match:o}=t;if(i)for(var s of(null==o&&(o=es.isPath(i)?eL(e,i):t=>W.isElement(t)&&Z.isBlock(e,t)),!n&&eg.isRange(i)&&(i=Z.unhangRange(e,i,{voids:r})),Array.from(Z.nodes(e,{at:i,match:o,mode:a,voids:r}),t=>{var[,n]=t;return Z.pathRef(e,n)}))){var l=s.unref();if(l){var[c]=Z.node(e,l);e.apply({type:\"remove_node\",path:l,node:c})}}})}",
            "setNodes": "setNodes(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};Z.withoutNormalizing(e,()=>{var{match:r,at:a=e.selection,compare:i,merge:o}=n,{hanging:s=!1,mode:l=\"lowest\",split:c=!1,voids:_=!1}=n;if(a){if(null==r&&(r=es.isPath(a)?eL(e,a):t=>W.isElement(t)&&Z.isBlock(e,t)),!s&&eg.isRange(a)&&(a=Z.unhangRange(e,a,{voids:_})),c&&eg.isRange(a)){if(eg.isCollapsed(a)&&Z.leaf(e,a.anchor)[0].text.length>0)return;var d=Z.rangeRef(e,a,{affinity:\"inward\"}),[u,p]=eg.edges(a),m=\"lowest\"===l?\"lowest\":\"highest\",g=Z.isEnd(e,p,p.path);eU.splitNodes(e,{at:p,match:r,mode:m,voids:_,always:!g});var E=Z.isStart(e,u,u.path);eU.splitNodes(e,{at:u,match:r,mode:m,voids:_,always:!E}),a=d.unref(),null==n.at&&eU.select(e,a)}for(var[S,f]of(!i&&(i=(e,t)=>e!==t),Z.nodes(e,{at:a,match:r,mode:l,voids:_}))){var b={},T={};if(0!==f.length){var C=!1;for(var h in t)\"children\"!==h&&\"text\"!==h&&i(t[h],S[h])&&(C=!0,S.hasOwnProperty(h)&&(b[h]=S[h]),o?null!=t[h]&&(T[h]=o(S[h],t[h])):null!=t[h]&&(T[h]=t[h]));C&&e.apply({type:\"set_node\",path:f,properties:b,newProperties:T})}}}})}",
            "splitNodes": "splitNodes(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};Z.withoutNormalizing(e,()=>{var n,r,{mode:a=\"lowest\",voids:i=!1}=t,{match:o,at:s=e.selection,height:l=0,always:c=!1}=t;if(null==o&&(o=t=>W.isElement(t)&&Z.isBlock(e,t)),eg.isRange(s)&&(s=eM(e,s)),es.isPath(s)){var _=s,d=Z.point(e,_),[u]=Z.parent(e,_);o=e=>e===u,l=d.path.length-_.length+1,s=d,c=!0}if(s){var p=Z.pointRef(e,s,{affinity:\"backward\"});try{var[m]=Z.nodes(e,{at:s,match:o,mode:a,voids:i});if(!m)return;var g=Z.void(e,{at:s,mode:\"highest\"});if(!i&&g){var[E,S]=g;if(W.isElement(E)&&e.isInline(E)){var f=Z.after(e,S);if(!f){var b=es.next(S);eU.insertNodes(e,{text:\"\"},{at:b,voids:i}),f=Z.point(e,b)}s=f,c=!0}l=s.path.length-S.length+1,c=!0}n=Z.pointRef(e,s);var T=s.path.length-l,[,C]=m,h=s.path.slice(0,T),v=0===l?s.offset:s.path[T]+0;for(var[O,R]of Z.levels(e,{at:h,reverse:!0,voids:i})){var N=!1;if(R.length<C.length||0===R.length||!i&&W.isElement(O)&&Z.isVoid(e,O))break;var D=p.current,A=Z.isEnd(e,D,R);if(c||!p||!Z.isEdge(e,D,R)){N=!0;var y=er.extractProps(O);e.apply({type:\"split_node\",path:R,position:v,properties:y})}v=R[R.length-1]+(N||A?1:0)}if(null==t.at){var I=n.current||Z.end(e,[]);eU.select(e,I)}}finally{p.unref(),null===(r=n)||void 0===r||r.unref()}}})}",
            "unsetNodes": "unsetNodes(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};!Array.isArray(t)&&(t=[t]);var r={};for(var a of t)r[a]=null;eU.setNodes(e,r,n)}",
            "unwrapNodes": "unwrapNodes(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};Z.withoutNormalizing(e,()=>{var{mode:n=\"lowest\",split:r=!1,voids:a=!1}=t,{at:i=e.selection,match:o}=t;if(i){null==o&&(o=es.isPath(i)?eL(e,i):t=>W.isElement(t)&&Z.isBlock(e,t)),es.isPath(i)&&(i=Z.range(e,i));var s=eg.isRange(i)?Z.rangeRef(e,i):null,l=Array.from(Z.nodes(e,{at:i,match:o,mode:n,voids:a}),t=>{var[,n]=t;return Z.pathRef(e,n)}).reverse();for(var c of l)!function(t){var n=t.unref(),[i]=Z.node(e,n),o=Z.range(e,n);r&&s&&(o=eg.intersection(s.current,o)),eU.liftNodes(e,{at:o,match:e=>W.isAncestor(i)&&i.children.includes(e),voids:a})}(c);s&&s.unref()}})}",
            "wrapNodes": "wrapNodes(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};Z.withoutNormalizing(e,()=>{var{mode:r=\"lowest\",split:a=!1,voids:i=!1}=n,{match:o,at:s=e.selection}=n;if(s){if(null==o&&(o=es.isPath(s)?eL(e,s):e.isInline(t)?t=>W.isElement(t)&&Z.isInline(e,t)||eO.isText(t):t=>W.isElement(t)&&Z.isBlock(e,t)),a&&eg.isRange(s)){var[l,c]=eg.edges(s),_=Z.rangeRef(e,s,{affinity:\"inward\"});eU.splitNodes(e,{at:c,match:o,voids:i}),eU.splitNodes(e,{at:l,match:o,voids:i}),s=_.unref(),null==n.at&&eU.select(e,s)}for(var[,d]of Array.from(Z.nodes(e,{at:s,match:e.isInline(t)?t=>W.isElement(t)&&Z.isBlock(e,t):e=>Z.isEditor(e),mode:\"lowest\",voids:i}))){var u=eg.isRange(s)?eg.intersection(s,Z.range(e,d)):s;if(u){var p=Array.from(Z.nodes(e,{at:u,match:o,mode:r,voids:i}));if(p.length>0&&\"continue\"===function(){var[n]=p,r=p[p.length-1],[,a]=n,[,o]=r;if(0===a.length&&0===o.length)return\"continue\";var s=es.equals(a,o)?es.parent(a):es.common(a,o),l=Z.range(e,a,o),[c]=Z.node(e,s),_=s.length+1,d=es.next(o.slice(0,_)),u=ex(ex({},t),{},{children:[]});eU.insertNodes(e,u,{at:d,voids:i}),eU.moveNodes(e,{at:l,match:e=>W.isAncestor(c)&&c.children.includes(e),to:d.concat(0),voids:i})}())continue}}}})}",
            "collapse": "collapse(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},{edge:n=\"anchor\"}=t,{selection:r}=e;if(!!r){if(\"anchor\"===n)eU.select(e,r.anchor);else if(\"focus\"===n)eU.select(e,r.focus);else if(\"start\"===n){var[a]=eg.edges(r);eU.select(e,a)}else if(\"end\"===n){var[,i]=eg.edges(r);eU.select(e,i)}}}",
            "deselect": "deselect(e){var{selection:t}=e;t&&e.apply({type:\"set_selection\",properties:t,newProperties:null})}",
            "move": "move(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},{selection:n}=e,{distance:r=1,unit:a=\"character\",reverse:i=!1}=t,{edge:o=null}=t;if(n){\"start\"===o&&(o=eg.isBackward(n)?\"focus\":\"anchor\"),\"end\"===o&&(o=eg.isBackward(n)?\"anchor\":\"focus\");var{anchor:s,focus:l}=n,c={distance:r,unit:a},_={};if(null==o||\"anchor\"===o){var d=i?Z.before(e,s,c):Z.after(e,s,c);d&&(_.anchor=d)}if(null==o||\"focus\"===o){var u=i?Z.before(e,l,c):Z.after(e,l,c);u&&(_.focus=u)}eU.setSelection(e,_)}}",
            "select": "select(e,t){var{selection:n}=e;if(t=Z.range(e,t),n){eU.setSelection(e,t);return}if(!eg.isRange(t))throw Error(\"When setting the selection and the current selection is `null` you must provide at least an `anchor` and `focus`, but you passed: \".concat(ef.stringify(t)));e.apply({type:\"set_selection\",properties:n,newProperties:t})}",
            "setPoint": "setPoint(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},{selection:r}=e,{edge:a=\"both\"}=n;if(r){\"start\"===a&&(a=eg.isBackward(r)?\"focus\":\"anchor\"),\"end\"===a&&(a=eg.isBackward(r)?\"anchor\":\"focus\");var{anchor:i,focus:o}=r,s=\"anchor\"===a?i:o;eU.setSelection(e,{[\"anchor\"===a?\"anchor\":\"focus\"]:ek(ek({},s),t)})}}",
            "setSelection": "setSelection(e,t){var{selection:n}=e,r={},a={};if(n){for(var i in t)(\"anchor\"===i&&null!=t.anchor&&!ed.equals(t.anchor,n.anchor)||\"focus\"===i&&null!=t.focus&&!ed.equals(t.focus,n.focus)||\"anchor\"!==i&&\"focus\"!==i&&t[i]!==n[i])&&(r[i]=n[i],a[i]=t[i]);Object.keys(r).length>0&&e.apply({type:\"set_selection\",properties:r,newProperties:a})}}",
            "delete": "delete(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};Z.withoutNormalizing(e,()=>{var n,{reverse:r=!1,unit:a=\"character\",distance:i=1,voids:o=!1}=t,{at:s=e.selection,hanging:l=!1}=t;if(!!s){var c=!1;if(eg.isRange(s)&&eg.isCollapsed(s)&&(c=!0,s=s.anchor),ed.isPoint(s)){var _=Z.void(e,{at:s,mode:\"highest\"});if(!o&&_){var[,d]=_;s=d}else{var u={unit:a,distance:i},p=r?Z.before(e,s,u)||Z.start(e,[]):Z.after(e,s,u)||Z.end(e,[]);s={anchor:s,focus:p},l=!0}}if(es.isPath(s)){eU.removeNodes(e,{at:s,voids:o});return}if(!eg.isCollapsed(s)){if(!l){var[,m]=eg.edges(s),g=Z.end(e,[]);!ed.equals(m,g)&&(s=Z.unhangRange(e,s,{voids:o}))}var[E,S]=eg.edges(s),f=Z.above(e,{match:t=>W.isElement(t)&&Z.isBlock(e,t),at:E,voids:o}),b=Z.above(e,{match:t=>W.isElement(t)&&Z.isBlock(e,t),at:S,voids:o}),T=f&&b&&!es.equals(f[1],b[1]),C=es.equals(E.path,S.path),h=o?null:Z.void(e,{at:E,mode:\"highest\"}),v=o?null:Z.void(e,{at:S,mode:\"highest\"});if(h){var O=Z.before(e,E);O&&f&&es.isAncestor(f[1],O.path)&&(E=O)}if(v){var R=Z.after(e,S);R&&b&&es.isAncestor(b[1],R.path)&&(S=R)}var N=[];for(var D of Z.nodes(e,{at:s,voids:o})){var[A,y]=D;(!n||0!==es.compare(y,n))&&(!o&&W.isElement(A)&&Z.isVoid(e,A)||!es.isCommon(y,E.path)&&!es.isCommon(y,S.path))&&(N.push(D),n=y)}var I=Array.from(N,t=>{var[,n]=t;return Z.pathRef(e,n)}),x=Z.pointRef(e,E),w=Z.pointRef(e,S),M=\"\";if(!C&&!h){var L=x.current,[P]=Z.leaf(e,L),{path:k}=L,{offset:B}=E,F=P.text.slice(B);F.length>0&&(e.apply({type:\"remove_text\",path:k,offset:B,text:F}),M=F)}if(I.reverse().map(e=>e.unref()).filter(e=>null!==e).forEach(t=>eU.removeNodes(e,{at:t,voids:o})),!v){var U=w.current,[G]=Z.leaf(e,U),{path:Y}=U,H=C?E.offset:0,V=G.text.slice(H,S.offset);V.length>0&&(e.apply({type:\"remove_text\",path:Y,offset:H,text:V}),M=V)}!C&&T&&w.current&&x.current&&eU.mergeNodes(e,{at:w.current,hanging:!0,voids:o}),c&&r&&\"character\"===a&&M.length>1&&M.match(/[\\u0E00-\\u0E7F]+/)&&eU.insertText(e,M.slice(0,M.length-i));var q=x.unref(),z=w.unref(),$=r?q||z:z||q;null==t.at&&$&&eU.select(e,$)}}})}",
            "insertFragment": "insertFragment(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};Z.withoutNormalizing(e,()=>{var r,{hanging:a=!1,voids:i=!1}=n,{at:o=e.selection}=n;if(!t.length)return;if(!!o){if(eg.isRange(o)){if(!a&&(o=Z.unhangRange(e,o,{voids:i})),eg.isCollapsed(o))o=o.anchor;else{var[,s]=eg.edges(o);if(!i&&Z.void(e,{at:s}))return;var l=Z.pointRef(e,s);eU.delete(e,{at:o}),o=l.unref()}}else es.isPath(o)&&(o=Z.start(e,o));if(!(!i&&Z.void(e,{at:o}))){var c=Z.above(e,{at:o,match:t=>W.isElement(t)&&Z.isInline(e,t),mode:\"highest\",voids:i});if(c){var[,_]=c;Z.isEnd(e,o,_)?o=Z.after(e,_):Z.isStart(e,o,_)&&(o=Z.before(e,_))}var[,d]=Z.above(e,{match:t=>W.isElement(t)&&Z.isBlock(e,t),at:o,voids:i}),u=Z.isStart(e,o,d),p=Z.isEnd(e,o,d),m=u&&p,g=!u||u&&p,E=!p,[,S]=er.first({children:t},[]),[,f]=er.last({children:t},[]),b=[],T=t=>{var[n,r]=t;return 0!==r.length&&(!!m||!(g&&es.isAncestor(r,S)&&W.isElement(n)&&!e.isVoid(n)&&!e.isInline(n)||E&&es.isAncestor(r,f)&&W.isElement(n)&&!e.isVoid(n)&&!e.isInline(n))&&!0)};for(var C of er.nodes({children:t},{pass:T}))T(C)&&b.push(C);var h=[],v=[],O=[],R=!0,N=!1;for(var[D]of b)W.isElement(D)&&!e.isInline(D)?(R=!1,N=!0,v.push(D)):R?h.push(D):O.push(D);var[A]=Z.nodes(e,{at:o,match:t=>eO.isText(t)||Z.isInline(e,t),mode:\"highest\",voids:i}),[,y]=A,I=Z.isStart(e,o,y),x=Z.isEnd(e,o,y),w=Z.pathRef(e,p&&!O.length?es.next(d):d),M=Z.pathRef(e,x?es.next(y):y);eU.splitNodes(e,{at:o,match:t=>N?W.isElement(t)&&Z.isBlock(e,t):eO.isText(t)||Z.isInline(e,t),mode:N?\"lowest\":\"highest\",always:N&&(!u||h.length>0)&&(!p||O.length>0),voids:i});var L=Z.pathRef(e,!I||I&&x?es.next(y):y);if(eU.insertNodes(e,h,{at:L.current,match:t=>eO.isText(t)||Z.isInline(e,t),mode:\"highest\",voids:i}),m&&!h.length&&v.length&&!O.length&&eU.delete(e,{at:d,voids:i}),eU.insertNodes(e,v,{at:w.current,match:t=>W.isElement(t)&&Z.isBlock(e,t),mode:\"lowest\",voids:i}),eU.insertNodes(e,O,{at:M.current,match:t=>eO.isText(t)||Z.isInline(e,t),mode:\"highest\",voids:i}),!n.at&&(O.length>0&&M.current?r=es.previous(M.current):v.length>0&&w.current?r=es.previous(w.current):L.current&&(r=es.previous(L.current)),r)){var P=Z.end(e,r);eU.select(e,P)}L.unref(),w.unref(),M.unref()}}})}",
            "insertText": "insertText(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};Z.withoutNormalizing(e,()=>{var{voids:r=!1}=n,{at:a=e.selection}=n;if(!!a){if(es.isPath(a)&&(a=Z.range(e,a)),eg.isRange(a)){if(eg.isCollapsed(a))a=a.anchor;else{var i=eg.end(a);if(!r&&Z.void(e,{at:i}))return;var o=eg.start(a),s=Z.pointRef(e,o),l=Z.pointRef(e,i);eU.delete(e,{at:a,voids:r});var c=s.unref(),_=l.unref();a=c||_,eU.setSelection(e,{anchor:a,focus:a})}}if(!(!r&&Z.void(e,{at:a}))){var{path:d,offset:u}=a;t.length>0&&e.apply({type:\"insert_text\",path:d,offset:u,text:t})}}})}"
        },
        "createEditor": "()=>{var e={children:[],operations:[],selection:null,marks:null,isInline:()=>!1,isVoid:()=>!1,markableVoid:()=>!1,onChange:()=>{},apply:t=>{for(var n of Z.pathRefs(e))el.transform(n,t);for(var r of Z.pointRefs(e))eu.transform(r,t);for(var a of Z.rangeRefs(e))eE.transform(a,t);var i,o,s=l.get(e)||[],d=c.get(e)||new Set,u=e=>{if(e){var t=e.join(\",\");!o.has(t)&&(o.add(t),i.push(e))}};if(es.operationCanTransformPath(t))for(var p of(i=[],o=new Set,s))u(es.transform(p,t));else i=s,o=d;for(var m of e.getDirtyPaths(t))u(m);l.set(e,i),c.set(e,o),eU.transform(e,t),e.operations.push(t),Z.normalize(e,{operation:t}),\"set_selection\"===t.type&&(e.marks=null),!_.get(e)&&(_.set(e,!0),Promise.resolve().then(()=>{_.set(e,!1),e.onChange({operation:t}),e.operations=[]}))},addMark:(t,n)=>{var{selection:r,markableVoid:a}=e;if(r){var i=(t,n)=>{if(!eO.isText(t))return!1;var[r,a]=Z.parent(e,n);return!e.isVoid(r)||e.markableVoid(r)},o=eg.isExpanded(r),s=!1;if(!o){var[l,c]=Z.node(e,r);if(l&&i(l,c)){var[d]=Z.parent(e,c);s=d&&e.markableVoid(d)}}if(o||s)eU.setNodes(e,{[t]:n},{match:i,split:!0,voids:!0});else{var u=E(E({},Z.marks(e)||{}),{},{[t]:n});e.marks=u,!_.get(e)&&e.onChange()}}},deleteBackward:t=>{var{selection:n}=e;n&&eg.isCollapsed(n)&&eU.delete(e,{unit:t,reverse:!0})},deleteForward:t=>{var{selection:n}=e;n&&eg.isCollapsed(n)&&eU.delete(e,{unit:t})},deleteFragment:t=>{var{selection:n}=e;n&&eg.isExpanded(n)&&eU.delete(e,{reverse:\"backward\"===t})},getFragment:()=>{var{selection:t}=e;return t?er.fragment(e,t):[]},insertBreak:()=>{eU.splitNodes(e,{always:!0})},insertSoftBreak:()=>{eU.splitNodes(e,{always:!0})},insertFragment:t=>{eU.insertFragment(e,t)},insertNode:t=>{eU.insertNodes(e,t)},insertText:t=>{var{selection:n,marks:r}=e;if(n){if(r){var a=E({text:t},r);eU.insertNodes(e,a)}else eU.insertText(e,t);e.marks=null}},normalizeNode:t=>{var[n,r]=t;if(!eO.isText(n)){if(W.isElement(n)&&0===n.children.length){eU.insertNodes(e,{text:\"\"},{at:r.concat(0),voids:!0});return}for(var a=!Z.isEditor(n)&&W.isElement(n)&&(e.isInline(n)||0===n.children.length||eO.isText(n.children[0])||e.isInline(n.children[0])),i=0,o=0;o<n.children.length;o++,i++){var s=er.get(e,r);if(!eO.isText(s)){var l=n.children[o],c=s.children[i-1],_=o===n.children.length-1;if((eO.isText(l)||W.isElement(l)&&e.isInline(l))!==a)eU.removeNodes(e,{at:r.concat(i),voids:!0}),i--;else if(W.isElement(l)){if(e.isInline(l)){if(null!=c&&eO.isText(c)){if(_){var d={text:\"\"};eU.insertNodes(e,d,{at:r.concat(i+1),voids:!0}),i++}}else{var u={text:\"\"};eU.insertNodes(e,u,{at:r.concat(i),voids:!0}),i++}}}else null!=c&&eO.isText(c)&&(eO.equals(l,c,{loose:!0})?(eU.mergeNodes(e,{at:r.concat(i),voids:!0}),i--):\"\"===c.text?(eU.removeNodes(e,{at:r.concat(i-1),voids:!0}),i--):\"\"===l.text&&(eU.removeNodes(e,{at:r.concat(i),voids:!0}),i--))}}}},removeMark:t=>{var{selection:n}=e;if(n){var r=(t,n)=>{if(!eO.isText(t))return!1;var[r,a]=Z.parent(e,n);return!e.isVoid(r)||e.markableVoid(r)},a=eg.isExpanded(n),i=!1;if(!a){var[o,s]=Z.node(e,n);if(o&&r(o,s)){var[l]=Z.parent(e,s);i=l&&e.markableVoid(l)}}if(a||i)eU.unsetNodes(e,t,{match:r,split:!0,voids:!0});else{var c=E({},Z.marks(e)||{});delete c[t],e.marks=c,!_.get(e)&&e.onChange()}}},getDirtyPaths:e=>{switch(e.type){case\"insert_text\":case\"remove_text\":case\"set_node\":var{path:t}=e;return es.levels(t);case\"insert_node\":var{node:n,path:r}=e;return[...es.levels(r),...eO.isText(n)?[]:Array.from(er.nodes(n),e=>{var[,t]=e;return r.concat(t)})];case\"merge_node\":var{path:a}=e;return[...es.ancestors(a),es.previous(a)];case\"move_node\":var{path:i,newPath:o}=e;if(es.equals(i,o))return[];var s=[],l=[];for(var c of es.ancestors(i)){var _=es.transform(c,e);s.push(_)}for(var d of es.ancestors(o)){var u=es.transform(d,e);l.push(u)}var p=l[l.length-1],m=o[o.length-1];return[...s,...l,p.concat(m)];case\"remove_node\":var{path:g}=e;return[...es.ancestors(g)];case\"split_node\":var{path:E}=e;return[...es.levels(E),es.next(E)];default:return[]}},shouldNormalize:e=>{var{iteration:t,initialDirtyPathsLength:n}=e,r=42*n;if(t>r)throw Error(\"Could not completely normalize the editor after \".concat(r,\" iterations! This is usually due to incorrect normalization logic that leaves a node in an invalid state.\"));return!0}};return e}"
    }
}