{
    "exports": {
        "default": {
            "initializedCount": 0,
            "actions": {
                "QUESTS_ENROLL_SUCCESS": "e=>{let{enrolledQuestUserStatus:{questId:t}}=e,n=h();if(null==n||n.id!==t)return;let i=o.default.getCurrentUserActiveStream();null!=i&&this.initiateHeartbeat({streamKey:(0,r.encodeStreamKey)(i),applicationId:n.config.applicationId,questId:n.id})}",
                "QUESTS_SEND_HEARTBEAT_SUCCESS": "e=>{let{streamKey:t,userStatus:n}=e;null!=n.completedAt&&this.terminateHeartbeat(t)}",
                "POST_CONNECTION_OPEN": "()=>{if(0===c.default.lastFetchedCurrentQuests)window.setTimeout(this.maybeFetchCurrentQuests,Math.floor(Math.random()*N))}",
                "RUNNING_GAMES_CHANGE": "()=>{!(this.instantiatedAt+O>Date.now()||c.default.lastFetchedCurrentQuests+O>Date.now())&&this.maybeFetchCurrentQuests()}",
                "STREAM_START": "e=>{let{streamType:t,guildId:n,channelId:i}=e,_=h();if(null==_)return;(0,u.trackQuestEvent)(_.id,A.AnalyticEvents.QUEST_STREAMING_STARTED,{media_session_id:E.default.getMediaSessionId(),channel_type:s.default.getChannel(i)?.type,guild_id:n});let l=(0,r.encodeStreamKey)({streamType:t,guildId:n,channelId:i,ownerId:a.default.getId()});0!==o.default.getViewerIds(l).length&&this.initiateHeartbeat({streamKey:l,applicationId:_.config.applicationId,questId:_.id})}",
                "STREAM_CLOSE": "e=>{let{streamKey:t}=e;this.terminateHeartbeat(t)}",
                "STREAM_UPDATE": "e=>{let{streamKey:t,viewerIds:n}=e,i=h();if(null!=i){if(0===n.length){this.sendHeartbeatTimeoutIds.has(t)&&((0,I.sendHeartbeat)({questId:i.id,streamKey:t,applicationId:i.config.applicationId}),this.terminateHeartbeat(t));return}this.initiateHeartbeat({streamKey:t,applicationId:i.config.applicationId,questId:i.id})}}"
            },
            "stores": {
                "toJSON": "function(){return Array.from(this)}",
                "get": "function get() { [native code] }",
                "set": "function set() { [native code] }",
                "has": "function has() { [native code] }",
                "delete": "function delete() { [native code] }",
                "clear": "function clear() { [native code] }",
                "entries": "function entries() { [native code] }",
                "forEach": "function forEach() { [native code] }",
                "keys": "function keys() { [native code] }",
                "size": 0,
                "values": "function values() { [native code] }"
            },
            "instantiatedAt": 1709163078070,
            "sendHeartbeatTimeoutIds": {
                "toJSON": "function(){return Array.from(this)}",
                "get": "function get() { [native code] }",
                "set": "function set() { [native code] }",
                "has": "function has() { [native code] }",
                "delete": "function delete() { [native code] }",
                "clear": "function clear() { [native code] }",
                "entries": "function entries() { [native code] }",
                "forEach": "function forEach() { [native code] }",
                "keys": "function keys() { [native code] }",
                "size": 0,
                "values": "function values() { [native code] }"
            },
            "initiateHeartbeat": "e=>{let{questId:t,streamKey:n,applicationId:i}=e;window.clearTimeout(this.sendHeartbeatTimeoutIds.get(n));let r=()=>{(null!=o.default.getRTCStream(n)||o.default.getViewerIds(n).length>0)&&(0,I.sendHeartbeat)({questId:t,streamKey:n,applicationId:i});let e=this.calculateHeartbeatDurationMs(i);this.sendHeartbeatTimeoutIds.set(n,window.setTimeout(r,e))};r()}",
            "calculateHeartbeatDurationMs": "e=>{let t=c.default.quests.get(e);if(null==t||null==t.config||null==t.userStatus)return R;let{streamProgressSeconds:n}=t.userStatus,i=60*t.config.streamDurationRequirementMinutes;return i-n<=.1*i?C:R}",
            "terminateHeartbeat": "e=>{window.clearTimeout(this.sendHeartbeatTimeoutIds.get(e)),this.sendHeartbeatTimeoutIds.delete(e)}",
            "handleEnrollmentSuccess": "e=>{let{enrolledQuestUserStatus:{questId:t}}=e,n=h();if(null==n||n.id!==t)return;let i=o.default.getCurrentUserActiveStream();null!=i&&this.initiateHeartbeat({streamKey:(0,r.encodeStreamKey)(i),applicationId:n.config.applicationId,questId:n.id})}",
            "handlePostConnectionOpen": "()=>{if(0===c.default.lastFetchedCurrentQuests)window.setTimeout(this.maybeFetchCurrentQuests,Math.floor(Math.random()*N))}",
            "handleSendHeartbeatSuccess": "e=>{let{streamKey:t,userStatus:n}=e;null!=n.completedAt&&this.terminateHeartbeat(t)}",
            "handleRunningGamesChange": "()=>{!(this.instantiatedAt+O>Date.now()||c.default.lastFetchedCurrentQuests+O>Date.now())&&this.maybeFetchCurrentQuests()}",
            "handleStreamUpdate": "e=>{let{streamKey:t,viewerIds:n}=e,i=h();if(null!=i){if(0===n.length){this.sendHeartbeatTimeoutIds.has(t)&&((0,I.sendHeartbeat)({questId:i.id,streamKey:t,applicationId:i.config.applicationId}),this.terminateHeartbeat(t));return}this.initiateHeartbeat({streamKey:t,applicationId:i.config.applicationId,questId:i.id})}}",
            "handleStreamStart": "e=>{let{streamType:t,guildId:n,channelId:i}=e,_=h();if(null==_)return;(0,u.trackQuestEvent)(_.id,A.AnalyticEvents.QUEST_STREAMING_STARTED,{media_session_id:E.default.getMediaSessionId(),channel_type:s.default.getChannel(i)?.type,guild_id:n});let l=(0,r.encodeStreamKey)({streamType:t,guildId:n,channelId:i,ownerId:a.default.getId()});0!==o.default.getViewerIds(l).length&&this.initiateHeartbeat({streamKey:l,applicationId:_.config.applicationId,questId:_.id})}",
            "handleStreamClose": "e=>{let{streamKey:t}=e;this.terminateHeartbeat(t)}",
            "maybeFetchCurrentQuests": "maybeFetchCurrentQuests(){(0,T.getIsEligibleForQuests)({location:S.QuestsExperimentLocations.QUESTS_MANAGER,autoTrackExposure:!1})&&!c.default.isFetchingCurrentQuests&&(0,I.fetchCurrentQuests)()}"
        }
    }
}