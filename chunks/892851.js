function(e, t, n) {
    "use strict";
    n.r(t), n.d(t, {
        default: function() {
            return u
        }
    });
    var r = n("392711"),
        o = n.n(r),
        i = n("757167"),
        a = n("943546");

    function u(e) {
        var t = !(arguments.length > 1) || void 0 === arguments[1] || arguments[1],
            n = !(arguments.length > 2) || void 0 === arguments[2] || arguments[2];
        return i.default.logGroups.map(function(r) {
            var i, u, l = r.index,
                c = r.timestamp,
                f = r.logs,
                d = r.nativeLogs,
                _ = r.serverTrace,
                E = 0 === l ? null !== (u = null === (i = o().find(f, function(e) {
                    return e.log.indexOf("Logger loaded") >= 0
                })) || void 0 === i ? void 0 : i.timestamp) && void 0 !== u ? u : e : c,
                p = function(e, t) {
                    var n, r, i = (function(e) {
                            for (var t = [], n = 0; n < e.length; n++) {
                                var r = e[n],
                                    o = e[n + 1];
                                null != o && o.log === r.log.replace("Start ", "Finish ") ? (o.log = o.log.replace("Finish ", ""), t.push(o), n++) : t.push(r)
                            }
                            return t
                        })(e).map(function(e) {
                            return {
                                totalTime: null == e.timestamp ? "" : ((e.timestamp - t) / 1e3).toFixed(3),
                                deltaTime: null == e.delta ? "" : String(Math.round(e.delta)),
                                log: "".concat(e.emoji.length > 0 ? "".concat(e.emoji, " ") : "").concat(e.prefix).concat(e.log, "\n")
                            }
                        }),
                        a = null !== (n = o().max(i.map(function(e) {
                            return e.totalTime.length
                        }))) && void 0 !== n ? n : 0,
                        u = null !== (r = o().max(i.map(function(e) {
                            return e.deltaTime.length
                        }))) && void 0 !== r ? r : 0;
                    return i.map(function(e) {
                        var t = e.totalTime,
                            n = e.deltaTime,
                            r = e.log;
                        return "".concat(o().padStart(t, a), " ").concat(o().padStart(n, u), " ").concat(r)
                    }).join("")
                }(function(e, t, n, r) {
                    e = e.slice();
                    var o = new Set(t.map(s)),
                        i = "",
                        a = [];
                    t.forEach(function(t) {
                        var r = s(t),
                            u = 0,
                            l = n || !t.autoGenerated,
                            c = r.startsWith("Start ") && !r.includes("RUN_JS_BUNDLE") && o.has(r.replace("Start ", "Finish "));
                        if (r.startsWith("Finish ") && !r.includes("RUN_JS_BUNDLE") && o.has(r.replace("Finish ", "Start "))) {
                            i = i.substring(2);
                            var f = a.pop();
                            null != f && (u = t.timestamp - f.timestamp, l = l || u > 5 && ! function(e) {
                                return ["GET_CONSTANTS", "CONVERT_CONSTANTS"].some(function(t) {
                                    return e.includes(t)
                                })
                            }(r), f.shouldKeep = f.shouldKeep || l)
                        }
                        var d = {
                            emoji: "☕",
                            timestamp: t.timestamp,
                            delta: u > 0 ? u : void 0,
                            prefix: i,
                            log: r,
                            shouldKeep: l
                        };
                        (function(e, t) {
                            for (var n = 0; n < e.length; n++) {
                                var r = e[n].timestamp;
                                if (null != r && r > t.timestamp) break
                            }
                            e.splice(n, 0, t)
                        })(e, d), c && (i += "| ", a.push(d))
                    });
                    var u = !1;
                    return e.filter(function(e) {
                        return !(u && e.log.includes("↪")) && !(u = !r && "\uD83C\uDFA8" === e.emoji || !1 === e.shouldKeep)
                    })
                }(f, d, t, n), E),
                m = "Trace #".concat(l + 1, " started ").concat((0, a.getTimestampString)(c), "\n").concat(p);
            return null != _ && (m += "\n Server trace for trace #".concat(l + 1).concat(_)), m
        }).join("\n\n")
    }

    function s(e) {
        var t = null == e.tag ? e.label : "".concat(e.label, " ").concat(e.tag);
        return t.includes("_START") && (t = "Start " + t.replace("_START", "")), t.includes("_END") && (t = "Finish " + t.replace("_END", "")), t
    }
}