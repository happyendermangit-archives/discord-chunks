{
    "exports": {
        "default": {
            "getCurrentUser": "()=>null",
            "onConnect": "()=>{}",
            "onDisconnect": "()=>{}",
            "events": {},
            "commands": {},
            "sockets": {
                "toJSON": "function(){return Array.from(this)}",
                "has": "function has() { [native code] }",
                "add": "function add() { [native code] }",
                "delete": "function delete() { [native code] }",
                "clear": "function clear() { [native code] }",
                "entries": "function entries() { [native code] }",
                "forEach": "function forEach() { [native code] }",
                "size": 0,
                "values": "function values() { [native code] }",
                "keys": "function values() { [native code] }",
                "union": "function union() { [native code] }",
                "intersection": "function intersection() { [native code] }",
                "difference": "function difference() { [native code] }",
                "symmetricDifference": "function symmetricDifference() { [native code] }",
                "isSubsetOf": "function isSubsetOf() { [native code] }",
                "isSupersetOf": "function isSupersetOf() { [native code] }",
                "isDisjointFrom": "function isDisjointFrom() { [native code] }"
            },
            "subscriptions": [],
            "getJoi": "async()=>{let{default:e}=await (0,i.importWithRetry)({createPromise:()=>n.el(\"709547@217:269\").then(n.t.bind(n,\"826753\",23)),webpackId:\"826753\"});return e}",
            "registerTransport": "registerTransport(e){e.on(\"connect\",e=>this.handleConnect(e)),e.on(\"request\",(e,t)=>this.handleRequest(e,t)),e.on(\"disconnect\",(e,t)=>this.handleDisconnect(e,t))}",
            "handleConnect": "handleConnect(e){this.sockets.add(e),this.onConnect(e);let t={v:e.version,config:{cdn_host:window.GLOBAL_ENV.CDN_HOST,api_endpoint:window.GLOBAL_ENV.API_ENDPOINT,environment:\"production\"}};if(e.transport===T.TransportTypes.IPC){let n=this.getCurrentUser();if(null==n){e.close(c.RPCCloseCodes.CLOSE_NORMAL,\"User logged out\");return}t.user=(0,u.default)(n)}this.dispatch(e,null,c.RPCCommands.DISPATCH,c.RPCEvents.READY,t)}",
            "handleDisconnect": "handleDisconnect(e,t){this.removeSubscriptions(e),this.sockets.delete(e),this.onDisconnect(e,t)}",
            "handleRequest": "handleRequest(e,t){new Promise(n=>{if(null==t.nonce||\"\"===t.nonce)throw new l.default({errorCode:c.RPCErrors.INVALID_PAYLOAD},\"Payload requires a nonce\");let i=t.cmd,r=this.commands[i];if(null==r)throw new l.default({errorCode:c.RPCErrors.INVALID_COMMAND},`Invalid command: ${t.cmd}`);if(!(0,I.default)(e.authorization.scopes,r.scope))throw new l.default({errorCode:c.RPCErrors.INVALID_PERMISSIONS},\"Not authenticated or invalid scope\");E.ExperimentRPCServerAnalyticsKillswitch.getCurrentConfig({location:\"RPCServer\"}).enabled&&s.default.track(c.AnalyticEvents.RPC_COMMAND_SENT,{command:i,scope:\"object\"==typeof r.scope?JSON.stringify(r.scope):r.scope,application_id:e.application.id}),n(r)}).then(e=>new Promise(async(n,i)=>{if(null!=e.validation){let o=await this.getJoi();r()(null!=e.validation,\"command.validation must not be null\"),o.validate(t.args,e.validation(o),{convert:!1},t=>{if(null!=t){i(new l.default({errorCode:c.RPCErrors.INVALID_PAYLOAD},t.message));return}n(e)})}else n(e)})).then(n=>n.handler({socket:e,server:this,cmd:t.cmd,evt:t.evt,nonce:t.nonce,args:t.args??{},isSocketConnected:()=>this.sockets.has(e)})).then(n=>this.dispatch(e,t.nonce,t.cmd,null,n)).catch(n=>{let{code:i,message:r}=n;return this.error(e,t.nonce,t.cmd,i,r)})}",
            "setCommandHandler": "setCommandHandler(e,t){this.commands[e]=t}",
            "setEventHandler": "setEventHandler(e,t){this.events[e]=t}",
            "dispatch": "dispatch(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:null,n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:c.RPCCommands.DISPATCH,i=arguments.length>3&&void 0!==arguments[3]?arguments[3]:null,r=arguments.length>4&&void 0!==arguments[4]?arguments[4]:null;e.send({cmd:n,data:r,evt:i,nonce:t})}",
            "error": "error(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:null,n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:c.RPCCommands.DISPATCH,i=arguments.length>3&&void 0!==arguments[3]?arguments[3]:c.RPCErrors.UNKNOWN_ERROR,r=arguments.length>4&&void 0!==arguments[4]?arguments[4]:\"Unknown Error\";s.default.track(c.AnalyticEvents.RPC_SERVER_ERROR_CAUGHT,{command:n,code:i,message:r}),this.dispatch(e,t,n,c.RPCEvents.ERROR,{code:i,message:r})}",
            "isSubscribed": "isSubscribed(e,t){return void 0!==this.subscriptions.find(n=>n.socket.application.id===e&&n.evt===t)}",
            "getSubscription": "getSubscription(e,t,n){return this.subscriptions.find(i=>i.socket===e&&i.evt===t&&a().isEqual(i.args,n))}",
            "addSubscription": "addSubscription(e,t,n){let i=arguments.length>3&&void 0!==arguments[3]?arguments[3]:null,r=this.dispatch.bind(this,e,null,c.RPCCommands.DISPATCH,t);null==this.getSubscription(e,t,n)&&this.subscriptions.push({update:i,dispatch:r,prevState:i?i({prevState:null,dispatch:r}):null,socket:e,evt:t,args:n})}",
            "removeSubscription": "removeSubscription(e,t,n){a().remove(this.subscriptions,i=>i.socket===e&&i.evt===t&&a().isEqual(i.args,n))}",
            "removeSubscriptions": "removeSubscriptions(e){a().remove(this.subscriptions,t=>t.socket===e)}",
            "dispatchToSubscriptions": "dispatchToSubscriptions(e,t,n,i){var r;if(!(null!=i&&\"\"!==i&&(r=i,S.includes(r)||(S.unshift(r),S.splice(50),0))))this.subscriptions.forEach(i=>{var r,o;if(i.evt===e){if((\"function\"!=typeof t||t(i))&&(\"object\"!=typeof t||(r=t,o=i.args??{},a().isEqual(r,a().pick(o,Object.keys(r))))))this.dispatch(i.socket,null,c.RPCCommands.DISPATCH,i.evt,n)}})}",
            "updateSubscriptions": "updateSubscriptions(){this.subscriptions.forEach(e=>{e.update&&(e.prevState=e.update(e))})}",
            "storeWait": "storeWait(e,t,n){let i=t();if(i||0===n)return Promise.resolve(i);let r=a().uniqueId(),o=()=>this.removeSubscription(e,d,{uniqueId:r});return new Promise((i,a)=>{let s=setTimeout(()=>{o(),a(Error(\"timeout\"))},n*_.default.Millis.SECOND);this.addSubscription(e,d,{uniqueId:r},()=>{let e=t();e&&(clearTimeout(s),i(e))})}).then(e=>(o(),e))}"
        }
    }
}