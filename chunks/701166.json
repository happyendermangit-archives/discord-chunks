{
    "exports": {
        "default": {
            "initializedCount": 0,
            "actions": {
                "POST_CONNECTION_OPEN": "()=>this.handleConnectionOpen()",
                "GUILD_DELETE": "e=>this.handleGuildDelete(e)",
                "GUILD_UNAVAILABLE": "e=>this.handleGuildUnavailable(e)",
                "INVITE_RESOLVE_SUCCESS": "e=>this.handleInviteResolveSuccess(e)",
                "CHANNEL_SELECT": "e=>this.handleChannelSelect(e)"
            },
            "stores": {
                "toJSON": "function(){return Array.from(this)}",
                "get": "function get() { [native code] }",
                "set": "function set() { [native code] }",
                "has": "function has() { [native code] }",
                "delete": "function delete() { [native code] }",
                "clear": "function clear() { [native code] }",
                "entries": "function entries() { [native code] }",
                "forEach": "function forEach() { [native code] }",
                "keys": "function keys() { [native code] }",
                "size": 0,
                "values": "function values() { [native code] }"
            },
            "getGuildEventUserCounts": "async getGuildEventUserCounts(e,t,n){let i=n.filter(n=>null==u[`${e}-${t}-${n}`]||Date.now()-u[`${e}-${t}-${n}`]>18e5);if(!(Date.now()-u[`${e}-${t}`]<18e5)||0!==i.length){u[`${e}-${t}`]=Date.now(),i.forEach(n=>u[`${e}-${t}-${n}`]=Date.now());try{await l.default.fetchGuildEventUserCounts(e,t,i)}catch(e){}}}",
            "getGuildEventUsers": "getGuildEventUsers(e,t,n){return l.default.fetchUsersForGuildEvent(e,t,n)}",
            "getGuildEventsForCurrentUser": "getGuildEventsForCurrentUser(e){return o(e)}",
            "handleConnectionOpen": "handleConnectionOpen(){d.clear(),u={};let e=(0,a.isInMainTabsExperiment)(),t=s.default.getLastSelectedGuildId();e&&null!=t&&r.default.getGuildScheduledEventsForGuild(t).forEach(e=>this.getGuildEventUserCounts(t,e.id,[]))}",
            "handleGuildUnavailable": "handleGuildUnavailable(e){let{guildId:t}=e;d.delete(t),delete u[t]}",
            "handleGuildDelete": "handleGuildDelete(e){let{guild:t}=e,n=t.id;d.delete(n),delete u[n]}",
            "handleInviteResolveSuccess": "handleInviteResolveSuccess(e){let{invite:t}=e,n=t.guild_scheduled_event,i=t.guild?.id;null!=n&&null!=i&&o(i)}",
            "handleChannelSelect": "handleChannelSelect(e){let{guildId:t}=e;if(null!=t)r.default.getGuildScheduledEventsForGuild(t).forEach(e=>this.getGuildEventUserCounts(t,e.id,[]))}"
        }
    }
}