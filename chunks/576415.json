{
    "exports": {
        "default": {
            "rewrites": {
                "toJSON": "function(){return Array.from(this)}",
                "has": "function has() { [native code] }",
                "add": "function add() { [native code] }",
                "delete": "function delete() { [native code] }",
                "clear": "function clear() { [native code] }",
                "entries": "function entries() { [native code] }",
                "forEach": "function forEach() { [native code] }",
                "size": 0,
                "values": "function values() { [native code] }",
                "keys": "function values() { [native code] }",
                "union": "function union() { [native code] }",
                "intersection": "function intersection() { [native code] }",
                "difference": "function difference() { [native code] }",
                "symmetricDifference": "function symmetricDifference() { [native code] }",
                "isSubsetOf": "function isSubsetOf() { [native code] }",
                "isSupersetOf": "function isSupersetOf() { [native code] }",
                "isDisjointFrom": "function isDisjointFrom() { [native code] }"
            },
            "listeners": {
                "toJSON": "function(){return Array.from(this)}",
                "has": "function has() { [native code] }",
                "add": "function add() { [native code] }",
                "delete": "function delete() { [native code] }",
                "clear": "function clear() { [native code] }",
                "entries": "function entries() { [native code] }",
                "forEach": "function forEach() { [native code] }",
                "size": 0,
                "values": "function values() { [native code] }",
                "keys": "function values() { [native code] }",
                "union": "function union() { [native code] }",
                "intersection": "function intersection() { [native code] }",
                "difference": "function difference() { [native code] }",
                "symmetricDifference": "function symmetricDifference() { [native code] }",
                "isSubsetOf": "function isSubsetOf() { [native code] }",
                "isSupersetOf": "function isSupersetOf() { [native code] }",
                "isDisjointFrom": "function isDisjointFrom() { [native code] }"
            },
            "routeChangeCount": 0,
            "timer": -1,
            "connected": false,
            "handleConnectionChange": "()=>{let e=c.default.isConnected(),t=e&&!this.connected;this.connected=e,t&&(this.routeChangeCount=0,this.executeRouteRewrites((0,h.getHistory)().location,\"REPLACE\"))}",
            "handleRouteChange": "(e,t)=>{if(this.executeRouteRewrites(e,t))return;let a=b.default.getState();for(let d of(a.basePath!==e.pathname&&a.resetPath(e.pathname),this.listeners))try{d(e,t)}catch(e){console.warn(\"RouteManager.listen: A route listener has caused an error\",e.message)}this.convertRouteToNavigation(e,t),this.routeChangeCount=0}",
            "handleKeybindRouteChange": "e=>{let{path:t}=e;null!=t?(clearTimeout(this.timer),this.timer=setTimeout(this.flushRoute,200)):null==t&&clearTimeout(this.timer)}",
            "flushRoute": "()=>{clearTimeout(this.timer);let e=b.default.getState();null!=e.path&&(0,h.transitionTo)(e.path)}",
            "unlistenHistory": "function(){N(-1),t()}",
            "unlistenKeyboardChange": "()=>n.delete(e)",
            "initialize": "initialize(){this.cleanup(),this.unlistenHistory=(0,h.getHistory)().listen(this.handleRouteChange);let{pathname:e}=(0,h.getHistory)().location;b.default.getState().resetPath(e),this.unlistenKeyboardChange=b.default.subscribe(this.handleKeybindRouteChange),c.default.addChangeListener(this.handleConnectionChange)}",
            "convertRouteToNavigation": "convertRouteToNavigation(e,t){let{pathname:a}=e,d=(0,r.getRootNavigationRef)(),c=(0,i.isInMainTabsExperiment)(),{showYouBar:b}=(0,o.getNavYouBarExperiment)({location:\"convertRouteToNavigation\"});if(null==d||!d.isReady())return;let h=e.navigationReplace,m=e.useScreen??!1;if(c&&(0,l.isSplitMessagesTab)()&&a===p.Routes.ME){(0,s.navigateToRootTab)({screen:\"messages\",resetRoot:h});return}if(c&&a===p.Routes.NOTIFICATIONS){(0,s.navigateToRootTab)({screen:\"notifications\",resetRoot:h});return}if(a.startsWith(\"/channels/\")){let e=(0,n.matchPath)(a,{path:p.Routes.CHANNEL(\":guildId\",\":channelId?\",\":messageId?\")}),t=(0,n.matchPath)(a,{path:`${p.Routes.CHANNEL(\":guildId\",\":channelId?\")}${p.Routes.VOICE_CHAT_CHANNEL_PARTIAL(\":voiceGuildId\",\":voiceChannelId\",\":voiceMessageId?\")}`});if(!c){let e=d.getRootState();e?.routes?.[0]?.name!==\"panels\"&&(0,s.resetToPanelsUI)();return}if(null!=t){let{voiceGuildId:e,voiceChannelId:a,voiceMessageId:d}=t.params;(0,u.isOldVoiceUIEnabled)()&&(0,s.navigateToChannel)({channelId:a,guildId:e,messageId:d,replaceChannelAndFixRoot:h,useScreen:m});return}if(null!=e){let{channelId:t,guildId:a,messageId:n}=e.params;if(!(0,l.isSplitMessagesTab)()&&!b){(0,s.navigateToRootTab)({screen:\"guilds\",guildId:a,resetRoot:h});return}if((0,l.isOnNewPanels)()){let[e,n]=(0,f.default)(d.getCurrentRoute());if(e===a&&n===t)return}null==t||(0,l.shouldHandleNewPanelsRoute)(a)&&!1!==h?a!==p.ME||b?(0,s.navigateToRootTab)({screen:\"guilds\",guildId:a,channelId:(0,l.isOnNewPanels)()?t:void 0,resetRoot:h}):(0,s.navigateToRootTab)({screen:\"messages\",resetRoot:h}):null!=a&&(0,s.navigateToChannel)({channelId:t,guildId:a,messageId:n,replaceChannelAndFixRoot:h,useScreen:m})}return}if(a.startsWith(\"/member-verification/\")){let e=(0,n.matchPath)(a,{path:p.Routes.GUILD_MEMBER_VERIFICATION(\":guildId\",\":inviteCode?\")});null!=e&&(0,s.navigateToMemberVerification)(e.params.guildId,e.params.inviteCode);return}if(a.startsWith(\"/login\")||a.startsWith(\"/register\")){(0,s.resetToAuthRoute)();return}if(a.startsWith(\"/account-standing\")){d.navigate({name:\"account-standing\",params:void 0});return}c&&(0,s.navigateToRootTab)({screen:\"messages\",resetRoot:h})}",
            "executeRouteRewrites": "executeRouteRewrites(e,t){if(this.routeChangeCount+=1,this.routeChangeCount<10)for(let a of this.rewrites){let n=(0,h.getHistory)().location.pathname,c=a(e,t);if(null!=c)return(0,d.addBreadcrumb)({message:\"RouteManager.handleRouteChange: A route rewrite is replacing the current route\",data:{replacePath:c.path,previousPath:n}}),(0,h.replaceWith)(c.path,c.state),!0}else throw Error(\"RouteManager: Something has gone horribly wrong with rewrites\");return!1}",
            "cleanup": "cleanup(){this.unlistenHistory?.(),this.unlistenHistory=void 0,this.unlistenKeyboardChange?.(),this.unlistenKeyboardChange=void 0,c.default.removeChangeListener(this.handleConnectionChange)}",
            "addRouteChangeListener": "addRouteChangeListener(e){return null!=this.unlistenHistory&&e((0,h.getHistory)().location,\"REPLACE\"),this.listeners.add(e),()=>this.removeRouteChangeListener(e)}",
            "addRouteRewriter": "addRouteRewriter(e){if(null!=this.unlistenHistory){let t=e((0,h.getHistory)().location,(0,h.getHistory)().action);null!=t&&(0,h.replaceWith)(t.path,t.state)}return this.rewrites.add(e),()=>this.removeRouteRewriter(e)}",
            "removeRouteChangeListener": "removeRouteChangeListener(e){this.listeners.delete(e)}",
            "removeRouteRewriter": "removeRouteRewriter(e){this.rewrites.delete(e)}",
            "getHistory": "getHistory(){return(0,h.getHistory)()}"
        }
    }
}