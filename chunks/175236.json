{
    "exports": {
        "default": {
            "init": "init(e){let{userToken:t,userId:n,installPaths:o,platform:a,stateCallback:s,errorCallback:E}=e;null==r&&(null!=i?Promise.resolve(i):(0,u.isDesktop)()?Promise.all([I.default.ensureModule(\"discord_dispatch\"),I.default.ensureModule(\"discord_modules\")]).then(()=>{I.default.requireModule(\"discord_modules\");let e=I.default.getDispatch();return null!=e?(i=e,e):Promise.reject(Error(\"dispatch not found\"))}):Promise.reject(Error(\"not desktop client\"))).then(e=>{let i={environment:window.GLOBAL_ENV.RELEASE_CHANNEL,build_number:\"271041\"},u=_.default.getCurrentUser();null!=u&&(i.user_id=u.id,i.user_name=u.tag,null!=u.email&&(i.email=u.email));let I={user_token:t,user_id:n,install_paths:o.map(e=>{let{path:t}=e;return t}),api_endpoint:`https:${window.GLOBAL_ENV.API_ENDPOINT}`,environment:window.GLOBAL_ENV.PROJECT_ENV,sentry:i,platform:a};r=new e.Dispatch(JSON.stringify(I),e=>{let t=JSON.parse(e);s({applications:t.applications,paused:t.paused,currentTask:null!=t.current_task?{applicationId:t.current_task.application_id,branchId:t.current_task.branch_id}:null,nextTask:null!=t.next_task?{applicationId:t.next_task.application_id,branchId:t.next_task.branch_id}:null})},e=>{E(A(e))},e=>{!function(e){let{properties:t}=e;switch(null!=t.stage&&null!=t.stage.type&&(t.stage=t.stage.type),e.event_name){case T.AnalyticEvents.DISPATCH_PATCH_STARTED:case T.AnalyticEvents.DISPATCH_PATCH_PAUSED:case T.AnalyticEvents.DISPATCH_PATCH_FAILED:case T.AnalyticEvents.DISPATCH_PATCH_VERIFICATION_FAILED:case T.AnalyticEvents.DISPATCH_PATCH_COMPLETE:case T.AnalyticEvents.DISPATCH_PATCH_CANCELLED:case T.AnalyticEvents.DISPATCH_APPLICATION_UNINSTALLED:l.default.track(e.event_name,t)}}(JSON.parse(e))})})}",
            "destroy": "destroy(){let e=S();null!=e&&void 0!==e.destroy&&(e.destroy(),r=null)}",
            "setTargetManifest": "setTargetManifest(e){let{applicationId:t,applicationName:n,applicationIcon:i,branchId:r,buildId:o,manifestIds:a,installationPath:s}=e,_=S();null!=_&&_.command(JSON.stringify({command:\"SetTargetManifest\",application_id:t,application_name:n,application_icon:i,branch_id:r,build_id:o,manifest_ids:a,install_path:s}),N)}",
            "setCurrentTask": "setCurrentTask(e,t,n,i,r){let o=S();return null!=o&&(o.command(JSON.stringify({command:\"SetCurrentTask\",application_id:e,branch_id:t,action:n,user_id:i,user_token:r}),N),!0)}",
            "setCredentials": "setCredentials(e,t){let n=S();null!=n&&n.command(JSON.stringify({command:\"SetCredentials\",user_id:e,user_token:t}),N)}",
            "cancel": "cancel(e,t){let n=S();null!=n&&n.command(JSON.stringify({command:\"Cancel\",application_id:e,branch_id:t}),N)}",
            "uninstall": "uninstall(e,t){let n=S();null!=n&&n.command(JSON.stringify({command:\"Uninstall\",application_id:e,branch_id:t}),N)}",
            "pause": "pause(){let e=S();null!=e&&e.command(JSON.stringify({command:\"Pause\"}),N)}",
            "resume": "resume(){let e=S();null!=e&&e.command(JSON.stringify({command:\"Resume\"}),N)}",
            "queryDirectory": "queryDirectory(e,t){let n=S();null!=n&&n.command(JSON.stringify({command:\"QueryDirectory\",path:e}),(e,n)=>{if(\"\"!==e)t(JSON.parse(e));else if(null!=n){let e=JSON.parse(n);t(null,{hasPermission:e.has_permission,availableKB:parseInt(e.available_kb),totalKB:parseInt(e.total_kb)})}})}",
            "runLaunchSetup": "(e,t)=>E.default.isRunning()?Promise.reject(Error(\"Already running launch setup.\")):(o.default.dispatch({type:\"DISPATCH_APPLICATION_LAUNCH_SETUP_START\"}),new Promise((n,i)=>{let r=S();if(null==r){i(Error(\"native dispatch instance not found\"));return}r.command(JSON.stringify({command:\"RunLaunchSetup\",application_id:e,branch_id:t}),(e,t,r)=>{if(\"\"!==e){o.default.dispatch({type:\"DISPATCH_APPLICATION_LAUNCH_SETUP_COMPLETE\"});let t=A(e);o.default.dispatch({type:\"DISPATCH_APPLICATION_ERROR\",error:t}),null!=t.code&&t.code===c.DispatchErrorCodes.POST_INSTALL_CANCELLED?i(t):n();return}if(\"\"!==t){o.default.dispatch({type:\"DISPATCH_APPLICATION_LAUNCH_SETUP_COMPLETE\"}),n();return}if(\"\"!==r){let e=JSON.parse(r);o.default.dispatch({type:\"DISPATCH_APPLICATION_INSTALL_SCRIPTS_PROGRESS_UPDATE\",progress:e.progress,total:e.total,name:e.name})}})}))",
            "launch": "(e,t,n,i)=>new Promise((r,o)=>{let a=S();if(null==a){o(Error(\"native dispatch instance not found\"));return}a.command(JSON.stringify({command:\"Launch\",application_id:e,branch_id:t,option_name:n,environment:i}),function(e,t){\"\"!==e?o(A(e)):r([JSON.parse(t).pid])})})"
        }
    }
}