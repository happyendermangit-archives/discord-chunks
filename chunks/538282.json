{
    "exports": {
        "openExpressionPicker": "(e,t)=>{u.setState({activeView:e,activeViewType:t,lastActiveView:u.getState().activeView})}",
        "closeExpressionPicker": "e=>{let t=u.getState();if(void 0===e||e===t.activeViewType)null!==t.activeView&&u.setState({activeView:null,activeViewType:null,lastActiveView:t.activeView})}",
        "toggleMultiExpressionPicker": "e=>{let t=u.getState();if(null==t.activeView){var s;c(null!==(s=t.lastActiveView)&&void 0!==s?s:a.ExpressionPickerViewType.EMOJI,e)}else d()}",
        "toggleExpressionPicker": "(e,t)=>{u.getState().activeView===e?d():c(e,t)}",
        "setExpressionPickerView": "e=>{u.setState({activeView:e,lastActiveView:u.getState().activeView})}",
        "setSearchQuery": "function(e){let t=arguments.length>1&&void 0!==arguments[1]&&arguments[1];u.setState({searchQuery:e,isSearchSuggestion:t})}",
        "useExpressionPickerStore": "function(){let t,n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:e.getState,i=arguments.length>1&&void 0!==arguments[1]?arguments[1]:Object.is,[,a]=(0,r.useReducer)(t=>t+1,0),u=e.getState(),s=(0,r.useRef)(u),c=(0,r.useRef)(n),l=(0,r.useRef)(i),f=(0,r.useRef)(!1),h=(0,r.useRef)();void 0===h.current&&(h.current=n(u));let p=!1;(s.current!==u||c.current!==n||l.current!==i||f.current)&&(t=n(u),p=!i(h.current,t)),o(()=>{p&&(h.current=t),s.current=u,c.current=n,l.current=i,f.current=!1});let d=(0,r.useRef)(u);o(()=>{let t=()=>{try{let t=e.getState(),n=c.current(t);!l.current(h.current,n)&&(s.current=t,h.current=n,a())}catch(t){f.current=!0,a()}},n=e.subscribe(t);return e.getState()!==d.current&&t(),n},[]);let v=p?t:h.current;return(0,r.useDebugValue)(v),v}"
    }
}