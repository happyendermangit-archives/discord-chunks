{
    "exports": {
        "isGuildSelectableChannelType": "function _(e){return h.has(e)}",
        "ALL_CHANNEL_TYPES": {
            "toJSON": "function(){return Array.from(this)}",
            "has": "function has() { [native code] }",
            "add": "function add() { [native code] }",
            "delete": "function delete() { [native code] }",
            "clear": "function clear() { [native code] }",
            "entries": "function entries() { [native code] }",
            "forEach": "function forEach() { [native code] }",
            "size": 14,
            "values": "function values() { [native code] }",
            "keys": "function values() { [native code] }",
            "union": "function union() { [native code] }",
            "intersection": "function intersection() { [native code] }",
            "difference": "function difference() { [native code] }",
            "symmetricDifference": "function symmetricDifference() { [native code] }",
            "isSubsetOf": "function isSubsetOf() { [native code] }",
            "isSupersetOf": "function isSupersetOf() { [native code] }",
            "isDisjointFrom": "function isDisjointFrom() { [native code] }"
        },
        "isGuildTextChannelType": "function T(e){return m.has(e)}",
        "GUILD_WEBHOOK_CHANNEL_TYPES": {
            "toJSON": "function(){return Array.from(this)}",
            "has": "function has() { [native code] }",
            "add": "function add() { [native code] }",
            "delete": "function delete() { [native code] }",
            "clear": "function clear() { [native code] }",
            "entries": "function entries() { [native code] }",
            "forEach": "function forEach() { [native code] }",
            "size": 6,
            "values": "function values() { [native code] }",
            "keys": "function values() { [native code] }",
            "union": "function union() { [native code] }",
            "intersection": "function intersection() { [native code] }",
            "difference": "function difference() { [native code] }",
            "symmetricDifference": "function symmetricDifference() { [native code] }",
            "isSubsetOf": "function isSubsetOf() { [native code] }",
            "isSupersetOf": "function isSupersetOf() { [native code] }",
            "isDisjointFrom": "function isDisjointFrom() { [native code] }"
        },
        "GUILD_CHANNEL_TYPES": {
            "toJSON": "function(){return Array.from(this)}",
            "has": "function has() { [native code] }",
            "add": "function add() { [native code] }",
            "delete": "function delete() { [native code] }",
            "clear": "function clear() { [native code] }",
            "entries": "function entries() { [native code] }",
            "forEach": "function forEach() { [native code] }",
            "size": 12,
            "values": "function values() { [native code] }",
            "keys": "function values() { [native code] }",
            "union": "function union() { [native code] }",
            "intersection": "function intersection() { [native code] }",
            "difference": "function difference() { [native code] }",
            "symmetricDifference": "function symmetricDifference() { [native code] }",
            "isSubsetOf": "function isSubsetOf() { [native code] }",
            "isSupersetOf": "function isSupersetOf() { [native code] }",
            "isDisjointFrom": "function isDisjointFrom() { [native code] }"
        },
        "isGuildChannelType": "function C(e){return I.has(e)}",
        "GUILD_VOCAL_CHANNEL_TYPES": {
            "toJSON": "function(){return Array.from(this)}",
            "has": "function has() { [native code] }",
            "add": "function add() { [native code] }",
            "delete": "function delete() { [native code] }",
            "clear": "function clear() { [native code] }",
            "entries": "function entries() { [native code] }",
            "forEach": "function forEach() { [native code] }",
            "size": 2,
            "values": "function values() { [native code] }",
            "keys": "function values() { [native code] }",
            "union": "function union() { [native code] }",
            "intersection": "function intersection() { [native code] }",
            "difference": "function difference() { [native code] }",
            "symmetricDifference": "function symmetricDifference() { [native code] }",
            "isSubsetOf": "function isSubsetOf() { [native code] }",
            "isSupersetOf": "function isSupersetOf() { [native code] }",
            "isDisjointFrom": "function isDisjointFrom() { [native code] }"
        },
        "isGuildVocalChannelType": "function A(e){return\"SELECTABLE\"!==e&&v.has(e)}",
        "SILENT_JOIN_LEAVE_CHANNEL_TYPES": {
            "toJSON": "function(){return Array.from(this)}",
            "has": "function has() { [native code] }",
            "add": "function add() { [native code] }",
            "delete": "function delete() { [native code] }",
            "clear": "function clear() { [native code] }",
            "entries": "function entries() { [native code] }",
            "forEach": "function forEach() { [native code] }",
            "size": 1,
            "values": "function values() { [native code] }",
            "keys": "function values() { [native code] }",
            "union": "function union() { [native code] }",
            "intersection": "function intersection() { [native code] }",
            "difference": "function difference() { [native code] }",
            "symmetricDifference": "function symmetricDifference() { [native code] }",
            "isSubsetOf": "function isSubsetOf() { [native code] }",
            "isSupersetOf": "function isSupersetOf() { [native code] }",
            "isDisjointFrom": "function isDisjointFrom() { [native code] }"
        },
        "isPrivate": "function O(e){return N.has(e)}",
        "isMultiUserDM": "function y(e){return D.has(e)}",
        "TEXT_CHANNEL_TYPES": {
            "toJSON": "function(){return Array.from(this)}",
            "has": "function has() { [native code] }",
            "add": "function add() { [native code] }",
            "delete": "function delete() { [native code] }",
            "clear": "function clear() { [native code] }",
            "entries": "function entries() { [native code] }",
            "forEach": "function forEach() { [native code] }",
            "size": 7,
            "values": "function values() { [native code] }",
            "keys": "function values() { [native code] }",
            "union": "function union() { [native code] }",
            "intersection": "function intersection() { [native code] }",
            "difference": "function difference() { [native code] }",
            "symmetricDifference": "function symmetricDifference() { [native code] }",
            "isSubsetOf": "function isSubsetOf() { [native code] }",
            "isSupersetOf": "function isSupersetOf() { [native code] }",
            "isDisjointFrom": "function isDisjointFrom() { [native code] }"
        },
        "isTextChannel": "function L(e){return P.has(e)}",
        "isVoiceChannel": "function M(e){return b.has(e)}",
        "isGuildReadableType": "function G(e){return U.has(e)}",
        "THREAD_CHANNEL_TYPES": {
            "toJSON": "function(){return Array.from(this)}",
            "has": "function has() { [native code] }",
            "add": "function add() { [native code] }",
            "delete": "function delete() { [native code] }",
            "clear": "function clear() { [native code] }",
            "entries": "function entries() { [native code] }",
            "forEach": "function forEach() { [native code] }",
            "size": 3,
            "values": "function values() { [native code] }",
            "keys": "function values() { [native code] }",
            "union": "function union() { [native code] }",
            "intersection": "function intersection() { [native code] }",
            "difference": "function difference() { [native code] }",
            "symmetricDifference": "function symmetricDifference() { [native code] }",
            "isSubsetOf": "function isSubsetOf() { [native code] }",
            "isSupersetOf": "function isSupersetOf() { [native code] }",
            "isDisjointFrom": "function isDisjointFrom() { [native code] }"
        },
        "THREADED_CHANNEL_TYPES": {
            "toJSON": "function(){return Array.from(this)}",
            "has": "function has() { [native code] }",
            "add": "function add() { [native code] }",
            "delete": "function delete() { [native code] }",
            "clear": "function clear() { [native code] }",
            "entries": "function entries() { [native code] }",
            "forEach": "function forEach() { [native code] }",
            "size": 4,
            "values": "function values() { [native code] }",
            "keys": "function values() { [native code] }",
            "union": "function union() { [native code] }",
            "intersection": "function intersection() { [native code] }",
            "difference": "function difference() { [native code] }",
            "symmetricDifference": "function symmetricDifference() { [native code] }",
            "isSubsetOf": "function isSubsetOf() { [native code] }",
            "isSupersetOf": "function isSupersetOf() { [native code] }",
            "isDisjointFrom": "function isDisjointFrom() { [native code] }"
        },
        "isThread": "function x(e){return w.has(e)}",
        "isReadableType": "function V(e){return F.has(e)}",
        "GUILD_NON_CATEGORY_CHANNEL_TYPES": {
            "toJSON": "function(){return Array.from(this)}",
            "has": "function has() { [native code] }",
            "add": "function add() { [native code] }",
            "delete": "function delete() { [native code] }",
            "clear": "function clear() { [native code] }",
            "entries": "function entries() { [native code] }",
            "forEach": "function forEach() { [native code] }",
            "size": 11,
            "values": "function values() { [native code] }",
            "keys": "function values() { [native code] }",
            "union": "function union() { [native code] }",
            "intersection": "function intersection() { [native code] }",
            "difference": "function difference() { [native code] }",
            "symmetricDifference": "function symmetricDifference() { [native code] }",
            "isSubsetOf": "function isSubsetOf() { [native code] }",
            "isSupersetOf": "function isSupersetOf() { [native code] }",
            "isDisjointFrom": "function isDisjointFrom() { [native code] }"
        },
        "EDITABLE_CHANNEL_TYPES": {
            "toJSON": "function(){return Array.from(this)}",
            "has": "function has() { [native code] }",
            "add": "function add() { [native code] }",
            "delete": "function delete() { [native code] }",
            "clear": "function clear() { [native code] }",
            "entries": "function entries() { [native code] }",
            "forEach": "function forEach() { [native code] }",
            "size": 9,
            "values": "function values() { [native code] }",
            "keys": "function values() { [native code] }",
            "union": "function union() { [native code] }",
            "intersection": "function intersection() { [native code] }",
            "difference": "function difference() { [native code] }",
            "symmetricDifference": "function symmetricDifference() { [native code] }",
            "isSubsetOf": "function isSubsetOf() { [native code] }",
            "isSupersetOf": "function isSupersetOf() { [native code] }",
            "isDisjointFrom": "function isDisjointFrom() { [native code] }"
        },
        "TOGGLE_ANNOUNCEMENT_CHANNEL_TYPES": {
            "toJSON": "function(){return Array.from(this)}",
            "has": "function has() { [native code] }",
            "add": "function add() { [native code] }",
            "delete": "function delete() { [native code] }",
            "clear": "function clear() { [native code] }",
            "entries": "function entries() { [native code] }",
            "forEach": "function forEach() { [native code] }",
            "size": 2,
            "values": "function values() { [native code] }",
            "keys": "function values() { [native code] }",
            "union": "function union() { [native code] }",
            "intersection": "function intersection() { [native code] }",
            "difference": "function difference() { [native code] }",
            "symmetricDifference": "function symmetricDifference() { [native code] }",
            "isSubsetOf": "function isSubsetOf() { [native code] }",
            "isSupersetOf": "function isSupersetOf() { [native code] }",
            "isDisjointFrom": "function isDisjointFrom() { [native code] }"
        },
        "TOPIC_CHANNEL_TYPES": {
            "toJSON": "function(){return Array.from(this)}",
            "has": "function has() { [native code] }",
            "add": "function add() { [native code] }",
            "delete": "function delete() { [native code] }",
            "clear": "function clear() { [native code] }",
            "entries": "function entries() { [native code] }",
            "forEach": "function forEach() { [native code] }",
            "size": 4,
            "values": "function values() { [native code] }",
            "keys": "function values() { [native code] }",
            "union": "function union() { [native code] }",
            "intersection": "function intersection() { [native code] }",
            "difference": "function difference() { [native code] }",
            "symmetricDifference": "function symmetricDifference() { [native code] }",
            "isSubsetOf": "function isSubsetOf() { [native code] }",
            "isSupersetOf": "function isSupersetOf() { [native code] }",
            "isDisjointFrom": "function isDisjointFrom() { [native code] }"
        },
        "NSFW_CHANNEL_TYPES": {
            "toJSON": "function(){return Array.from(this)}",
            "has": "function has() { [native code] }",
            "add": "function add() { [native code] }",
            "delete": "function delete() { [native code] }",
            "clear": "function clear() { [native code] }",
            "entries": "function entries() { [native code] }",
            "forEach": "function forEach() { [native code] }",
            "size": 6,
            "values": "function values() { [native code] }",
            "keys": "function values() { [native code] }",
            "union": "function union() { [native code] }",
            "intersection": "function intersection() { [native code] }",
            "difference": "function difference() { [native code] }",
            "symmetricDifference": "function symmetricDifference() { [native code] }",
            "isSubsetOf": "function isSubsetOf() { [native code] }",
            "isSupersetOf": "function isSupersetOf() { [native code] }",
            "isDisjointFrom": "function isDisjointFrom() { [native code] }"
        },
        "CREATEABLE_NON_VOCAL_CHANNEL_NAME_TYPES": {
            "toJSON": "function(){return Array.from(this)}",
            "has": "function has() { [native code] }",
            "add": "function add() { [native code] }",
            "delete": "function delete() { [native code] }",
            "clear": "function clear() { [native code] }",
            "entries": "function entries() { [native code] }",
            "forEach": "function forEach() { [native code] }",
            "size": 5,
            "values": "function values() { [native code] }",
            "keys": "function values() { [native code] }",
            "union": "function union() { [native code] }",
            "intersection": "function intersection() { [native code] }",
            "difference": "function difference() { [native code] }",
            "symmetricDifference": "function symmetricDifference() { [native code] }",
            "isSubsetOf": "function isSubsetOf() { [native code] }",
            "isSupersetOf": "function isSupersetOf() { [native code] }",
            "isDisjointFrom": "function isDisjointFrom() { [native code] }"
        },
        "SLOWMODE_CHANNEL_TYPES": {
            "toJSON": "function(){return Array.from(this)}",
            "has": "function has() { [native code] }",
            "add": "function add() { [native code] }",
            "delete": "function delete() { [native code] }",
            "clear": "function clear() { [native code] }",
            "entries": "function entries() { [native code] }",
            "forEach": "function forEach() { [native code] }",
            "size": 8,
            "values": "function values() { [native code] }",
            "keys": "function values() { [native code] }",
            "union": "function union() { [native code] }",
            "intersection": "function intersection() { [native code] }",
            "difference": "function difference() { [native code] }",
            "symmetricDifference": "function symmetricDifference() { [native code] }",
            "isSubsetOf": "function isSubsetOf() { [native code] }",
            "isSupersetOf": "function isSupersetOf() { [native code] }",
            "isDisjointFrom": "function isDisjointFrom() { [native code] }"
        },
        "EDITABLE_VOICE_SETTINGS_TYPES": {
            "toJSON": "function(){return Array.from(this)}",
            "has": "function has() { [native code] }",
            "add": "function add() { [native code] }",
            "delete": "function delete() { [native code] }",
            "clear": "function clear() { [native code] }",
            "entries": "function entries() { [native code] }",
            "forEach": "function forEach() { [native code] }",
            "size": 4,
            "values": "function values() { [native code] }",
            "keys": "function values() { [native code] }",
            "union": "function union() { [native code] }",
            "intersection": "function intersection() { [native code] }",
            "difference": "function difference() { [native code] }",
            "symmetricDifference": "function symmetricDifference() { [native code] }",
            "isSubsetOf": "function isSubsetOf() { [native code] }",
            "isSupersetOf": "function isSupersetOf() { [native code] }",
            "isDisjointFrom": "function isDisjointFrom() { [native code] }"
        },
        "VOICE_THREAD_PARENT_CHANNEL_TYPES": {
            "toJSON": "function(){return Array.from(this)}",
            "has": "function has() { [native code] }",
            "add": "function add() { [native code] }",
            "delete": "function delete() { [native code] }",
            "clear": "function clear() { [native code] }",
            "entries": "function entries() { [native code] }",
            "forEach": "function forEach() { [native code] }",
            "size": 3,
            "values": "function values() { [native code] }",
            "keys": "function values() { [native code] }",
            "union": "function union() { [native code] }",
            "intersection": "function intersection() { [native code] }",
            "difference": "function difference() { [native code] }",
            "symmetricDifference": "function symmetricDifference() { [native code] }",
            "isSubsetOf": "function isSubsetOf() { [native code] }",
            "isSupersetOf": "function isSupersetOf() { [native code] }",
            "isDisjointFrom": "function isDisjointFrom() { [native code] }"
        },
        "CHANNEL_ELIGIBLE_FOR_UNREAD_SETTING": {
            "toJSON": "function(){return Array.from(this)}",
            "has": "function has() { [native code] }",
            "add": "function add() { [native code] }",
            "delete": "function delete() { [native code] }",
            "clear": "function clear() { [native code] }",
            "entries": "function entries() { [native code] }",
            "forEach": "function forEach() { [native code] }",
            "size": 4,
            "values": "function values() { [native code] }",
            "keys": "function values() { [native code] }",
            "union": "function union() { [native code] }",
            "intersection": "function intersection() { [native code] }",
            "difference": "function difference() { [native code] }",
            "symmetricDifference": "function symmetricDifference() { [native code] }",
            "isSubsetOf": "function isSubsetOf() { [native code] }",
            "isSupersetOf": "function isSupersetOf() { [native code] }",
            "isDisjointFrom": "function isDisjointFrom() { [native code] }"
        },
        "GUILD_FAVORITES_CHANNEL_TYPES": {
            "toJSON": "function(){return Array.from(this)}",
            "has": "function has() { [native code] }",
            "add": "function add() { [native code] }",
            "delete": "function delete() { [native code] }",
            "clear": "function clear() { [native code] }",
            "entries": "function entries() { [native code] }",
            "forEach": "function forEach() { [native code] }",
            "size": 4,
            "values": "function values() { [native code] }",
            "keys": "function values() { [native code] }",
            "union": "function union() { [native code] }",
            "intersection": "function intersection() { [native code] }",
            "difference": "function difference() { [native code] }",
            "symmetricDifference": "function symmetricDifference() { [native code] }",
            "isSubsetOf": "function isSubsetOf() { [native code] }",
            "isSupersetOf": "function isSupersetOf() { [native code] }",
            "isDisjointFrom": "function isDisjointFrom() { [native code] }"
        },
        "getAccessPermissions": "function es(e){return A(e)?ei:f.Permissions.VIEW_CHANNEL}",
        "getBasicAccessPermissions": "function ea(e){return A(e)?er:f.BasicPermissions.VIEW_CHANNEL}",
        "ChannelRecordBase": "class ec extends eo{get permissionOverwrites(){var e;return null!==(e=this.permissionOverwrites_)&&void 0!==e?e:eu}get topic(){var e;return null!==(e=this.topic_)&&void 0!==e?e:\"\"}get position(){var e;return null!==(e=this.position_)&&void 0!==e?e:0}get bitrate(){var e;return null!==(e=this.bitrate_)&&void 0!==e?e:f.BITRATE_DEFAULT}get userLimit(){var e;return null!==(e=this.userLimit_)&&void 0!==e?e:0}get nsfw(){var e;return null!==(e=this.nsfw_)&&void 0!==e&&e}get rateLimitPerUser(){var e;return null!==(e=this.rateLimitPerUser_)&&void 0!==e?e:0}get flags(){var e;return null!==(e=this.flags_)&&void 0!==e?e:0}toJS(){return{...this}}set(e,t){return this.merge(el({[e]:t}))}merge(e){let t=null,n=el(e);for(let e in n)n.hasOwnProperty(e)&&this[e]!==n[e]&&(null==t&&(t=this.toJS()),t[e]=n[e]);return null!=t?new this.constructor(t):this}computeLurkerPermissionsAllowList(){if(this.isGuildStageVoice()&&c.default.isPublic(this.id))return u.LURKER_STAGE_CHANNEL_PERMISSIONS_ALLOWLIST}isNSFW(){return this.nsfw}isManaged(){return null!=this.application_id}isPrivate(){return O(this.type)}isGroupDM(){return this.type===f.ChannelTypes.GROUP_DM}isMultiUserDM(){return y(this.type)}isDM(){return this.type===f.ChannelTypes.DM}isSystemDM(){return!1}isArchivedThread(){var e;return this.isThread()&&(null===(e=this.threadMetadata)||void 0===e?void 0:e.archived)===!0}isLockedThread(){var e;return this.isThread()&&(null===(e=this.threadMetadata)||void 0===e?void 0:e.locked)===!0}isScheduledForDeletion(){return this.hasFlag(E.ChannelFlags.IS_SCHEDULED_FOR_DELETION)}isBroadcastChannel(){return this.hasFlag(E.ChannelFlags.IS_BROADCASTING)}isArchivedLockedThread(){var e,t;return w.has(this.type)&&(null===(e=this.threadMetadata)||void 0===e?void 0:e.archived)===!0&&(null===(t=this.threadMetadata)||void 0===t?void 0:t.locked)===!0}isForumPost(){return this.type===f.ChannelTypes.PUBLIC_THREAD&&null!=this.parentChannelThreadType&&f.ChannelTypesSets.GUILD_THREADS_ONLY.has(this.parentChannelThreadType)}isCategory(){return this.type===f.ChannelTypes.GUILD_CATEGORY}isVocal(){return M(this.type)}isGuildVocal(){return A(this.type)}isGuildVocalOrThread(){return this.isGuildVocal()||this.isVocalThread()}isGuildVoice(){return this.type===f.ChannelTypes.GUILD_VOICE}isGuildStageVoice(){return this.type===f.ChannelTypes.GUILD_STAGE_VOICE}isListenModeCapable(){return this.isGuildStageVoice()}isThread(){return x(this.type)}isAnnouncementThread(){return this.type===f.ChannelTypes.ANNOUNCEMENT_THREAD}isVocalThread(){return this.type===f.ChannelTypes.PUBLIC_THREAD||this.type===f.ChannelTypes.PRIVATE_THREAD}isActiveThread(){var e;return this.isThread()&&(null===(e=this.threadMetadata)||void 0===e?void 0:e.archived)!==!0}isDirectory(){return this.type===f.ChannelTypes.GUILD_DIRECTORY}isForumLikeChannel(){return this.isForumChannel()||this.isMediaChannel()}isForumChannel(){return this.type===f.ChannelTypes.GUILD_FORUM}isMediaChannel(){return this.type===f.ChannelTypes.GUILD_MEDIA}isMediaPost(){return this.type===f.ChannelTypes.PUBLIC_THREAD&&this.parentChannelThreadType===f.ChannelTypes.GUILD_MEDIA}isRoleSubscriptionTemplatePreviewChannel(){return this.hasFlag(E.ChannelFlags.IS_ROLE_SUBSCRIPTION_TEMPLATE_PREVIEW_CHANNEL)}isOwner(e){return this.ownerId===e}getGuildId(){return this.guild_id}getApplicationId(){return this.application_id}getDefaultSortOrder(){var e;return null!==(e=this.defaultSortOrder)&&void 0!==e?e:a.ThreadSortOrder.LATEST_ACTIVITY}getDefaultLayout(){return this.isMediaChannel()?s.ForumLayout.GRID:null==this.defaultForumLayout||this.defaultForumLayout===s.ForumLayout.DEFAULT?s.ForumLayout.LIST:this.defaultForumLayout}get accessPermissions(){return es(this.type)}hasFlag(e){return(0,d.hasFlag)(this.flags,e)}}",
        "UnknownChannelRecord": "class ed extends ec{static fromServer(e,t){var n,i,r;let s={application_id:e.application_id,appliedTags:e.applied_tags,availableTags:null!=e.available_tags?ee(e.available_tags):void 0,bitrate_:e.bitrate,defaultAutoArchiveDuration:e.default_auto_archive_duration,defaultForumLayout:e.default_forum_layout,defaultReactionEmoji:null!=e.default_reaction_emoji?{emojiId:0!==e.default_reaction_emoji.emoji_id?e.default_reaction_emoji.emoji_id:void 0,emojiName:e.default_reaction_emoji.emoji_name}:void 0,defaultSortOrder:e.default_sort_order,defaultThreadRateLimitPerUser:e.default_thread_rate_limit_per_user,flags_:e.flags,guild_id:null!==(n=null!=t?t:e.guild_id)&&void 0!==n?n:null,icon:e.icon,iconEmoji:et(e.icon_emoji),id:e.id,isMessageRequest:e.is_message_request,isMessageRequestTimestamp:e.is_message_request_timestamp,isSpam:e.is_spam,lastMessageId:e.last_message_id,lastPinTimestamp:e.last_pin_timestamp,member:null!=e.member?{flags:e.member.flags,muted:e.member.muted,muteConfig:e.member.mute_config,joinTimestamp:e.member.join_timestamp}:void 0,memberCount:e.member_count,memberIdsPreview:e.member_ids_preview,memberListId:e.member_list_id,messageCount:e.message_count,name:null!==(i=e.name)&&void 0!==i?i:\"\",nicks:$(e.nicks),nsfw_:e.nsfw,originChannelId:e.origin_channel_id,ownerId:e.owner_id,parent_id:e.parent_id,parentChannelThreadType:void 0,permissionOverwrites_:J(e.permission_overwrites),position_:e.position,rateLimitPerUser_:e.rate_limit_per_user,rawRecipients:null!=e.recipients?e.recipients:[],recipients:null!=e.recipients?e.recipients.map(e=>e.id):[],rtcRegion:e.rtc_region,safetyWarnings:e.safety_warnings,template:e.template,themeColor:e.theme_color,threadMetadata:null!=e.thread_metadata?{archived:e.thread_metadata.archived,autoArchiveDuration:e.thread_metadata.auto_archive_duration,archiveTimestamp:e.thread_metadata.archive_timestamp,createTimestamp:e.thread_metadata.create_timestamp,locked:e.thread_metadata.locked,invitable:null===(r=e.thread_metadata.invitable)||void 0===r||r}:void 0,topic_:e.topic,totalMessageSent:e.total_message_sent,type:null!=e.type?e.type:f.ChannelTypes.UNKNOWN,userLimit_:e.user_limit,version:e.version,videoQualityMode:e.video_quality_mode,voiceBackgroundDisplay:en(e.voice_background_display)};return(0,l.dangerouslyCast)(s,ed)}constructor(e){super(e),this.application_id=e.application_id,this.appliedTags=e.appliedTags,this.availableTags=e.availableTags,this.bitrate_=e.bitrate_,this.defaultAutoArchiveDuration=e.defaultAutoArchiveDuration,this.defaultForumLayout=e.defaultForumLayout,this.defaultReactionEmoji=e.defaultReactionEmoji,this.defaultSortOrder=e.defaultSortOrder,this.defaultThreadRateLimitPerUser=e.defaultThreadRateLimitPerUser,this.flags_=e.flags_,this.icon=e.icon,this.iconEmoji=e.iconEmoji,this.isMessageRequest=e.isMessageRequest,this.isMessageRequestTimestamp=e.isMessageRequestTimestamp,this.isSpam=e.isSpam,this.lastMessageId=e.lastMessageId,this.lastPinTimestamp=e.lastPinTimestamp,this.member=e.member,this.memberCount=e.memberCount,this.memberIdsPreview=e.memberIdsPreview,this.memberListId=e.memberListId,this.messageCount=e.messageCount,this.nicks=e.nicks,this.nsfw_=e.nsfw_,this.originChannelId=e.originChannelId,this.ownerId=e.ownerId,this.parent_id=e.parent_id,this.parentChannelThreadType=e.parentChannelThreadType,this.permissionOverwrites_=e.permissionOverwrites_,this.position_=e.position_,this.rateLimitPerUser_=e.rateLimitPerUser_,this.rawRecipients=e.rawRecipients,this.recipients=e.recipients,this.rtcRegion=e.rtcRegion,this.safetyWarnings=e.safetyWarnings,this.template=e.template,this.themeColor=e.themeColor,this.threadMetadata=e.threadMetadata,this.topic_=e.topic_,this.userLimit_=e.userLimit_,this.version=e.version,this.videoQualityMode=e.videoQualityMode,this.voiceBackgroundDisplay=e.voiceBackgroundDisplay}}",
        "GuildTextualChannelRecord": "class eE extends ec{static fromServer(e,t){var n,i,r,s;let a={application_id:e.application_id,defaultAutoArchiveDuration:e.default_auto_archive_duration,defaultThreadRateLimitPerUser:e.default_thread_rate_limit_per_user,flags_:e.flags,guild_id:null!==(n=null!=t?t:e.guild_id)&&void 0!==n?n:null,iconEmoji:et(e.icon_emoji),id:e.id,lastMessageId:e.last_message_id,lastPinTimestamp:e.last_pin_timestamp,memberListId:e.member_list_id,name:null!==(i=e.name)&&void 0!==i?i:\"\",nsfw_:null!==(r=e.nsfw)&&void 0!==r&&r,parent_id:e.parent_id,permissionOverwrites_:J(e.permission_overwrites),position_:e.position,rateLimitPerUser_:null!==(s=e.rate_limit_per_user)&&void 0!==s?s:0,themeColor:e.theme_color,topic_:e.topic,type:null!=e.type?e.type:f.ChannelTypes.GUILD_TEXT,version:e.version};return eC(a)}constructor(e){var t;super(e),this.application_id=e.application_id,this.defaultAutoArchiveDuration=e.defaultAutoArchiveDuration,this.defaultThreadRateLimitPerUser=e.defaultThreadRateLimitPerUser,this.flags_=e.flags_,this.iconEmoji=e.iconEmoji,this.lastMessageId=e.lastMessageId,this.lastPinTimestamp=e.lastPinTimestamp,this.memberListId=e.memberListId,this.nsfw_=e.nsfw_,this.parent_id=e.parent_id,this.permissionOverwrites_=null!==(t=e.permissionOverwrites_)&&void 0!==t?t:{},this.position_=e.position_,this.rateLimitPerUser_=e.rateLimitPerUser_,this.themeColor=e.themeColor,this.topic_=e.topic_,this.version=e.version}}",
        "PrivateChannelRecord": "class eh extends ec{static fromServer(e){var t,n;let i={application_id:e.application_id,flags_:e.flags,guild_id:null,icon:e.icon,id:e.id,isMessageRequest:e.is_message_request,isMessageRequestTimestamp:e.is_message_request_timestamp,isSpam:null!==(t=e.is_spam)&&void 0!==t&&t,lastMessageId:e.last_message_id,lastPinTimestamp:e.last_pin_timestamp,name:null!==(n=e.name)&&void 0!==n?n:\"\",nicks:$(e.nicks),ownerId:e.owner_id,rawRecipients:null!=e.recipients?e.recipients:[],recipients:null!=e.recipients?e.recipients.map(e=>e.id):[],safetyWarnings:e.safety_warnings,type:null!=e.type?e.type:f.ChannelTypes.DM};return(0,l.dangerouslyCast)(i,eh)}isSystemDM(){let e=this.rawRecipients[0];return this.type===f.ChannelTypes.DM&&null!=e&&!0===e.system}getRecipientId(){return this.recipients[0]}addRecipient(e,t,n){if(e===n)return this;{var i;let n=this.set(\"recipients\",r.uniq([...null!==(i=this.recipients)&&void 0!==i?i:[],e]));return null==t?n:n.set(\"nicks\",{...n.nicks,[e]:t})}}removeRecipient(e){return this.set(\"recipients\",r.without(this.recipients,e))}constructor(e){var t,n,i;super(e),this.application_id=e.application_id,this.flags_=e.flags_,this.icon=e.icon,this.isMessageRequest=e.isMessageRequest,this.isMessageRequestTimestamp=e.isMessageRequestTimestamp,this.isSpam=e.isSpam,this.lastMessageId=e.lastMessageId,this.lastPinTimestamp=e.lastPinTimestamp,this.nicks=e.nicks,this.ownerId=e.ownerId,this.rawRecipients=null!==(t=e.rawRecipients)&&void 0!==t?t:[],this.recipients=null!==(n=e.recipients)&&void 0!==n?n:[],this.safetyWarnings=null!==(i=e.safetyWarnings)&&void 0!==i?i:[]}}",
        "DMChannelRecord": "class e_ extends eh{}",
        "createChannelRecordFromServer": "function eT(e,t){var n,i;let r=null!==(i=em[null!==(n=e.type)&&void 0!==n?n:f.ChannelTypes.GUILD_TEXT])&&void 0!==i?i:ed.fromServer;return r(e,t)}",
        "createChannelRecordFromInvite": "function eg(e){return ev(e)}",
        "castChannelRecord": "function eC(e){var t,n;let i=null!==(n=eI[null!==(t=e.type)&&void 0!==t?t:f.ChannelTypes.GUILD_TEXT])&&void 0!==n?n:ed;return(0,l.dangerouslyCast)(e,i)}",
        "createChannelRecord": "function ev(e){var t,n;let i=null!==(n=eI[null!==(t=e.type)&&void 0!==t?t:f.ChannelTypes.GUILD_TEXT])&&void 0!==n?n:ed;return new i(el(e))}"
    }
}