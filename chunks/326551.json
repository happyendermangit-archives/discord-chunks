{
    "exports": {
        "default": "class l extends r.default{constructor(e){super(e),this.mediaEngineConnectionId=`Native-${E++}`,this.codecs=[],this.qos=!0,this.reconnectInterval=6e4,this.pingInterval=s.PING_INTERVAL,this.handlePing=(e,t,n)=>{this.emit(o.BaseSpeedTesterEvent.Ping,e)},this.handlePingTimeout=(e,t,n,i)=>{this.emit(o.BaseSpeedTesterEvent.PingTimeout,n,i>0?i:4e3)},this.handleNewListenerNative=e=>{if(e===o.BaseSpeedTesterEvent.ConnectionStateChange)this.emit(e,this.connectionState)}}static create(e,t){let n=new l(e);return _.info(`Creating connection to ${t.address}:${t.port} with audio ssrc: ${t.ssrc}`),n.initialize(t),n}initialize(e){let t;this.audioSSRC=e.ssrc,this.streamUserId=e.streamUserId,this.pingInterval=s.PING_INTERVAL,this.initializeStreamParameters(e.streamParameters),e.streamParameters=this.videoStreamParameters;let n=(0,a.getVoiceEngine)();t=this.conn=n.createSpeedTestConnectionWithOptions(this.ids.userId,e,(n,i)=>{if(this.destroyed)return;if(null!=n&&\"\"!==n){this.setConnectionState(s.ConnectionStates.NO_ROUTE),this.emit(o.BaseSpeedTesterEvent.Error,n);return}if(null==i)throw Error(\"Invalid transport info\");let{protocol:r,address:a,port:E}=i;_.info(`Connected with local address ${a}:${E} and protocol: ${r}`),this.codecs=[{type:\"audio\",name:s.Codecs.OPUS,priority:1,payloadType:120},{type:\"test\",name:s.Codecs.TEST,priority:1,payloadType:127}],t.getEncryptionModes(n=>{_.info(`Encryption modes: ${n}`),t.setTransportOptions(this.getConnectionTransportOptions()),t.setPingInterval?.(this.pingInterval),t.setPingCallback(this.handlePing),t.setPingTimeoutCallback?.(this.handlePingTimeout),this.setConnectionState(s.ConnectionStates.CONNECTED),this.emit(o.BaseSpeedTesterEvent.Connected,r,{address:a,port:E,mode:this.chooseEncryptionMode(e.modes,n),codecs:this.codecs})})}),this.on(\"newListener\",this.handleNewListenerNative)}destroy(){this.conn.destroy(),this.setConnectionState(s.ConnectionStates.DISCONNECTED),super.destroy()}setCodecs(e,t){this.conn.setTransportOptions(this.getCodecOptions(e,t))}setEncryption(e,t){this.conn.setTransportOptions({encryptionSettings:{mode:e,secretKey:t}})}setSDP(e){}getNetworkOverhead(e){this.conn.getNetworkOverhead(e)}setPingInterval(e){this.pingInterval=e,this.conn.setPingInterval?.(this.pingInterval)}startSpeedTestSender(e,t,n,i){null!=this.conn.startSpeedTestSender?this.conn.startSpeedTestSender({clusterSize:t,clusterIntervalMs:n,numClusters:i},e):this.conn.startClientToServerSpeedTest({doneCb:e,clusterSize:t,clusterIntervalMs:n,numClusters:i})}stopSpeedTestSender(){null!=this.conn.stopSpeedTestSender?this.conn.stopSpeedTestSender():this.conn.endClientToServerSpeedTest({})}startSpeedTestReceiver(e,t){null!=this.conn.startSpeedTestReceiver?this.conn.startSpeedTestReceiver({packetLimit:t},e):this.conn.startServerToClientSpeedTest({readyCb:e,packetLimit:t})}stopSpeedTestReceiver(e){null!=this.conn.stopSpeedTestReceiver?this.conn.stopSpeedTestReceiver(e):this.conn.endServerToClientSpeedTest({doneCb:e})}chooseEncryptionMode(e,t){for(let n of t)for(let t of e)if(n===t)return n;return\"xsalsa20_poly1305\"}getConnectionTransportOptions(){return{qos:this.qos,reconnectInterval:this.reconnectInterval,userChannelIds:this.ids}}getCodecOptions(e,t){let n;n=this.codecs.find(t=>t.name===e);let i={type:n?.payloadType??0,name:e,freq:48e3,pacsize:960,channels:1,rate:64e3},r=[{type:n?.payloadType??0,name:e,freq:48e3,channels:2,params:{stereo:\"1\"}}];n=this.codecs.find(e=>e.name===t);let o={type:n?.payloadType??0};return{audioEncoder:i,audioDecoders:r,testEncoder:o,testDecoder:{type:n?.payloadType??0}}}getUserIdBySsrc(e){}}"
    }
}