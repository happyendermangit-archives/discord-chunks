{
    "exports": {
        "default": {
            "loadIndex": {
                "emoji": "❗",
                "name": "Load index.tsx",
                "start_": 0,
                "startNumImports": 0,
                "startImportTime": 0,
                "end_": 0,
                "endNumImports": 0,
                "endImportTime": 0,
                "start": 0,
                "end": 0,
                "hasStart": "hasStart(){return this.start_>0}",
                "hasData": "hasData(){return this.end_>0}",
                "recordStart": "recordStart(){0===this.start_&&this.recordStart_(),s.default.mark(this.emoji,\"Start \".concat(this.name)),r()}",
                "recordStart_": "recordStart_(){this.start_=Date.now(),this.startNumImports=i.size(),this.startImportTime=a()}",
                "recordEnd": "recordEnd(){0===this.end_&&0!==this.start_?(this.recordEnd_(),s.default.mark(this.emoji,\"Finish \".concat(this.name),this.end_-this.start_)):s.default.mark(this.emoji,\"Finish \".concat(this.name)),r()}",
                "recordEnd_": "recordEnd_(){this.end_=Date.now(),this.endNumImports=i.size(),this.endImportTime=a()}",
                "set": "set(e,t){0===this.start_&&(this.start_=e,this.end_=e+t,this.endNumImports=i.size(),this.endImportTime=a()),s.default.mark(this.emoji,this.name,t),r()}",
                "serializeStart": "serializeStart(e){return o(e,this.start_)}",
                "serializeEnd": "serializeEnd(e){return o(e,this.end_)}",
                "measure": "measure(e){if(this.start_>0)return s.default.time(this.emoji,this.name,e);this.recordStart_();let t=s.default.time(this.emoji,this.name,e);return this.recordEnd_(),r(),t}",
                "measureAsync": "async measureAsync(e){if(this.start_>0)return s.default.timeAsync(this.emoji,this.name,e);this.recordStart_();let t=await s.default.timeAsync(this.emoji,this.name,e);return this.recordEnd_(),r(),t}",
                "measureAsyncWithoutNesting": "async measureAsyncWithoutNesting(e){if(this.start_>0)return s.default.timeAsync(this.emoji,this.name,e);this.recordStart_();let t=Date.now();s.default.mark(this.emoji,\"Start \".concat(this.name));let n=await e();return s.default.mark(this.emoji,\"Finish \".concat(this.name),Date.now()-t),this.recordEnd_(),r(),n}"
            },
            "loadFastConnectNativeModule": {
                "emoji": "💾",
                "name": "Load fast_connect native module",
                "start_": 0,
                "startNumImports": 0,
                "startImportTime": 0,
                "end_": 0,
                "endNumImports": 0,
                "endImportTime": 0,
                "start": 0,
                "end": 0,
                "hasStart": "hasStart(){return this.start_>0}",
                "hasData": "hasData(){return this.end_>0}",
                "recordStart": "recordStart(){0===this.start_&&this.recordStart_(),s.default.mark(this.emoji,\"Start \".concat(this.name)),r()}",
                "recordStart_": "recordStart_(){this.start_=Date.now(),this.startNumImports=i.size(),this.startImportTime=a()}",
                "recordEnd": "recordEnd(){0===this.end_&&0!==this.start_?(this.recordEnd_(),s.default.mark(this.emoji,\"Finish \".concat(this.name),this.end_-this.start_)):s.default.mark(this.emoji,\"Finish \".concat(this.name)),r()}",
                "recordEnd_": "recordEnd_(){this.end_=Date.now(),this.endNumImports=i.size(),this.endImportTime=a()}",
                "set": "set(e,t){0===this.start_&&(this.start_=e,this.end_=e+t,this.endNumImports=i.size(),this.endImportTime=a()),s.default.mark(this.emoji,this.name,t),r()}",
                "serializeStart": "serializeStart(e){return o(e,this.start_)}",
                "serializeEnd": "serializeEnd(e){return o(e,this.end_)}",
                "measure": "measure(e){if(this.start_>0)return s.default.time(this.emoji,this.name,e);this.recordStart_();let t=s.default.time(this.emoji,this.name,e);return this.recordEnd_(),r(),t}",
                "measureAsync": "async measureAsync(e){if(this.start_>0)return s.default.timeAsync(this.emoji,this.name,e);this.recordStart_();let t=await s.default.timeAsync(this.emoji,this.name,e);return this.recordEnd_(),r(),t}",
                "measureAsyncWithoutNesting": "async measureAsyncWithoutNesting(e){if(this.start_>0)return s.default.timeAsync(this.emoji,this.name,e);this.recordStart_();let t=Date.now();s.default.mark(this.emoji,\"Start \".concat(this.name));let n=await e();return s.default.mark(this.emoji,\"Finish \".concat(this.name),Date.now()-t),this.recordEnd_(),r(),n}"
            },
            "beginFastConnect": {
                "emoji": "🌐",
                "name": "Fast Connect IDENTIFY",
                "start_": 0,
                "startNumImports": 0,
                "startImportTime": 0,
                "end_": 0,
                "endNumImports": 0,
                "endImportTime": 0,
                "start": 0,
                "end": 0,
                "hasStart": "hasStart(){return this.start_>0}",
                "hasData": "hasData(){return this.end_>0}",
                "recordStart": "recordStart(){0===this.start_&&this.recordStart_(),s.default.mark(this.emoji,\"Start \".concat(this.name)),r()}",
                "recordStart_": "recordStart_(){this.start_=Date.now(),this.startNumImports=i.size(),this.startImportTime=a()}",
                "recordEnd": "recordEnd(){0===this.end_&&0!==this.start_?(this.recordEnd_(),s.default.mark(this.emoji,\"Finish \".concat(this.name),this.end_-this.start_)):s.default.mark(this.emoji,\"Finish \".concat(this.name)),r()}",
                "recordEnd_": "recordEnd_(){this.end_=Date.now(),this.endNumImports=i.size(),this.endImportTime=a()}",
                "set": "set(e,t){0===this.start_&&(this.start_=e,this.end_=e+t,this.endNumImports=i.size(),this.endImportTime=a()),s.default.mark(this.emoji,this.name,t),r()}",
                "serializeStart": "serializeStart(e){return o(e,this.start_)}",
                "serializeEnd": "serializeEnd(e){return o(e,this.end_)}",
                "measure": "measure(e){if(this.start_>0)return s.default.time(this.emoji,this.name,e);this.recordStart_();let t=s.default.time(this.emoji,this.name,e);return this.recordEnd_(),r(),t}",
                "measureAsync": "async measureAsync(e){if(this.start_>0)return s.default.timeAsync(this.emoji,this.name,e);this.recordStart_();let t=await s.default.timeAsync(this.emoji,this.name,e);return this.recordEnd_(),r(),t}",
                "measureAsyncWithoutNesting": "async measureAsyncWithoutNesting(e){if(this.start_>0)return s.default.timeAsync(this.emoji,this.name,e);this.recordStart_();let t=Date.now();s.default.mark(this.emoji,\"Start \".concat(this.name));let n=await e();return s.default.mark(this.emoji,\"Finish \".concat(this.name),Date.now()-t),this.recordEnd_(),r(),n}"
            },
            "loadImports": {
                "emoji": "🏃",
                "name": "Load Imports",
                "start_": 0,
                "startNumImports": 0,
                "startImportTime": 0,
                "end_": 0,
                "endNumImports": 0,
                "endImportTime": 0,
                "start": 0,
                "end": 0,
                "hasStart": "hasStart(){return this.start_>0}",
                "hasData": "hasData(){return this.end_>0}",
                "recordStart": "recordStart(){0===this.start_&&this.recordStart_(),s.default.mark(this.emoji,\"Start \".concat(this.name)),r()}",
                "recordStart_": "recordStart_(){this.start_=Date.now(),this.startNumImports=i.size(),this.startImportTime=a()}",
                "recordEnd": "recordEnd(){0===this.end_&&0!==this.start_?(this.recordEnd_(),s.default.mark(this.emoji,\"Finish \".concat(this.name),this.end_-this.start_)):s.default.mark(this.emoji,\"Finish \".concat(this.name)),r()}",
                "recordEnd_": "recordEnd_(){this.end_=Date.now(),this.endNumImports=i.size(),this.endImportTime=a()}",
                "set": "set(e,t){0===this.start_&&(this.start_=e,this.end_=e+t,this.endNumImports=i.size(),this.endImportTime=a()),s.default.mark(this.emoji,this.name,t),r()}",
                "serializeStart": "serializeStart(e){return o(e,this.start_)}",
                "serializeEnd": "serializeEnd(e){return o(e,this.end_)}",
                "measure": "measure(e){if(this.start_>0)return s.default.time(this.emoji,this.name,e);this.recordStart_();let t=s.default.time(this.emoji,this.name,e);return this.recordEnd_(),r(),t}",
                "measureAsync": "async measureAsync(e){if(this.start_>0)return s.default.timeAsync(this.emoji,this.name,e);this.recordStart_();let t=await s.default.timeAsync(this.emoji,this.name,e);return this.recordEnd_(),r(),t}",
                "measureAsyncWithoutNesting": "async measureAsyncWithoutNesting(e){if(this.start_>0)return s.default.timeAsync(this.emoji,this.name,e);this.recordStart_();let t=Date.now();s.default.mark(this.emoji,\"Start \".concat(this.name));let n=await e();return s.default.mark(this.emoji,\"Finish \".concat(this.name),Date.now()-t),this.recordEnd_(),r(),n}"
            },
            "init": {
                "emoji": "🏃",
                "name": "Initial Initialization",
                "start_": 0,
                "startNumImports": 0,
                "startImportTime": 0,
                "end_": 0,
                "endNumImports": 0,
                "endImportTime": 0,
                "start": 0,
                "end": 0,
                "hasStart": "hasStart(){return this.start_>0}",
                "hasData": "hasData(){return this.end_>0}",
                "recordStart": "recordStart(){0===this.start_&&this.recordStart_(),s.default.mark(this.emoji,\"Start \".concat(this.name)),r()}",
                "recordStart_": "recordStart_(){this.start_=Date.now(),this.startNumImports=i.size(),this.startImportTime=a()}",
                "recordEnd": "recordEnd(){0===this.end_&&0!==this.start_?(this.recordEnd_(),s.default.mark(this.emoji,\"Finish \".concat(this.name),this.end_-this.start_)):s.default.mark(this.emoji,\"Finish \".concat(this.name)),r()}",
                "recordEnd_": "recordEnd_(){this.end_=Date.now(),this.endNumImports=i.size(),this.endImportTime=a()}",
                "set": "set(e,t){0===this.start_&&(this.start_=e,this.end_=e+t,this.endNumImports=i.size(),this.endImportTime=a()),s.default.mark(this.emoji,this.name,t),r()}",
                "serializeStart": "serializeStart(e){return o(e,this.start_)}",
                "serializeEnd": "serializeEnd(e){return o(e,this.end_)}",
                "measure": "measure(e){if(this.start_>0)return s.default.time(this.emoji,this.name,e);this.recordStart_();let t=s.default.time(this.emoji,this.name,e);return this.recordEnd_(),r(),t}",
                "measureAsync": "async measureAsync(e){if(this.start_>0)return s.default.timeAsync(this.emoji,this.name,e);this.recordStart_();let t=await s.default.timeAsync(this.emoji,this.name,e);return this.recordEnd_(),r(),t}",
                "measureAsyncWithoutNesting": "async measureAsyncWithoutNesting(e){if(this.start_>0)return s.default.timeAsync(this.emoji,this.name,e);this.recordStart_();let t=Date.now();s.default.mark(this.emoji,\"Start \".concat(this.name));let n=await e();return s.default.mark(this.emoji,\"Finish \".concat(this.name),Date.now()-t),this.recordEnd_(),r(),n}"
            },
            "loadStorage": {
                "emoji": "💾",
                "name": "Load Storage",
                "start_": 0,
                "startNumImports": 0,
                "startImportTime": 0,
                "end_": 0,
                "endNumImports": 0,
                "endImportTime": 0,
                "start": 0,
                "end": 0,
                "hasStart": "hasStart(){return this.start_>0}",
                "hasData": "hasData(){return this.end_>0}",
                "recordStart": "recordStart(){0===this.start_&&this.recordStart_(),s.default.mark(this.emoji,\"Start \".concat(this.name)),r()}",
                "recordStart_": "recordStart_(){this.start_=Date.now(),this.startNumImports=i.size(),this.startImportTime=a()}",
                "recordEnd": "recordEnd(){0===this.end_&&0!==this.start_?(this.recordEnd_(),s.default.mark(this.emoji,\"Finish \".concat(this.name),this.end_-this.start_)):s.default.mark(this.emoji,\"Finish \".concat(this.name)),r()}",
                "recordEnd_": "recordEnd_(){this.end_=Date.now(),this.endNumImports=i.size(),this.endImportTime=a()}",
                "set": "set(e,t){0===this.start_&&(this.start_=e,this.end_=e+t,this.endNumImports=i.size(),this.endImportTime=a()),s.default.mark(this.emoji,this.name,t),r()}",
                "serializeStart": "serializeStart(e){return o(e,this.start_)}",
                "serializeEnd": "serializeEnd(e){return o(e,this.end_)}",
                "measure": "measure(e){if(this.start_>0)return s.default.time(this.emoji,this.name,e);this.recordStart_();let t=s.default.time(this.emoji,this.name,e);return this.recordEnd_(),r(),t}",
                "measureAsync": "async measureAsync(e){if(this.start_>0)return s.default.timeAsync(this.emoji,this.name,e);this.recordStart_();let t=await s.default.timeAsync(this.emoji,this.name,e);return this.recordEnd_(),r(),t}",
                "measureAsyncWithoutNesting": "async measureAsyncWithoutNesting(e){if(this.start_>0)return s.default.timeAsync(this.emoji,this.name,e);this.recordStart_();let t=Date.now();s.default.mark(this.emoji,\"Start \".concat(this.name));let n=await e();return s.default.mark(this.emoji,\"Finish \".concat(this.name),Date.now()-t),this.recordEnd_(),r(),n}"
            },
            "parseStorage": {
                "emoji": "💾",
                "name": "Parse Storage",
                "start_": 0,
                "startNumImports": 0,
                "startImportTime": 0,
                "end_": 0,
                "endNumImports": 0,
                "endImportTime": 0,
                "start": 0,
                "end": 0,
                "hasStart": "hasStart(){return this.start_>0}",
                "hasData": "hasData(){return this.end_>0}",
                "recordStart": "recordStart(){0===this.start_&&this.recordStart_(),s.default.mark(this.emoji,\"Start \".concat(this.name)),r()}",
                "recordStart_": "recordStart_(){this.start_=Date.now(),this.startNumImports=i.size(),this.startImportTime=a()}",
                "recordEnd": "recordEnd(){0===this.end_&&0!==this.start_?(this.recordEnd_(),s.default.mark(this.emoji,\"Finish \".concat(this.name),this.end_-this.start_)):s.default.mark(this.emoji,\"Finish \".concat(this.name)),r()}",
                "recordEnd_": "recordEnd_(){this.end_=Date.now(),this.endNumImports=i.size(),this.endImportTime=a()}",
                "set": "set(e,t){0===this.start_&&(this.start_=e,this.end_=e+t,this.endNumImports=i.size(),this.endImportTime=a()),s.default.mark(this.emoji,this.name,t),r()}",
                "serializeStart": "serializeStart(e){return o(e,this.start_)}",
                "serializeEnd": "serializeEnd(e){return o(e,this.end_)}",
                "measure": "measure(e){if(this.start_>0)return s.default.time(this.emoji,this.name,e);this.recordStart_();let t=s.default.time(this.emoji,this.name,e);return this.recordEnd_(),r(),t}",
                "measureAsync": "async measureAsync(e){if(this.start_>0)return s.default.timeAsync(this.emoji,this.name,e);this.recordStart_();let t=await s.default.timeAsync(this.emoji,this.name,e);return this.recordEnd_(),r(),t}",
                "measureAsyncWithoutNesting": "async measureAsyncWithoutNesting(e){if(this.start_>0)return s.default.timeAsync(this.emoji,this.name,e);this.recordStart_();let t=Date.now();s.default.mark(this.emoji,\"Start \".concat(this.name));let n=await e();return s.default.mark(this.emoji,\"Finish \".concat(this.name),Date.now()-t),this.recordEnd_(),r(),n}"
            },
            "loadMiniCache": {
                "emoji": "💾",
                "name": "Load Mini Cache",
                "start_": 0,
                "startNumImports": 0,
                "startImportTime": 0,
                "end_": 0,
                "endNumImports": 0,
                "endImportTime": 0,
                "start": 0,
                "end": 0,
                "hasStart": "hasStart(){return this.start_>0}",
                "hasData": "hasData(){return this.end_>0}",
                "recordStart": "recordStart(){0===this.start_&&this.recordStart_(),s.default.mark(this.emoji,\"Start \".concat(this.name)),r()}",
                "recordStart_": "recordStart_(){this.start_=Date.now(),this.startNumImports=i.size(),this.startImportTime=a()}",
                "recordEnd": "recordEnd(){0===this.end_&&0!==this.start_?(this.recordEnd_(),s.default.mark(this.emoji,\"Finish \".concat(this.name),this.end_-this.start_)):s.default.mark(this.emoji,\"Finish \".concat(this.name)),r()}",
                "recordEnd_": "recordEnd_(){this.end_=Date.now(),this.endNumImports=i.size(),this.endImportTime=a()}",
                "set": "set(e,t){0===this.start_&&(this.start_=e,this.end_=e+t,this.endNumImports=i.size(),this.endImportTime=a()),s.default.mark(this.emoji,this.name,t),r()}",
                "serializeStart": "serializeStart(e){return o(e,this.start_)}",
                "serializeEnd": "serializeEnd(e){return o(e,this.end_)}",
                "measure": "measure(e){if(this.start_>0)return s.default.time(this.emoji,this.name,e);this.recordStart_();let t=s.default.time(this.emoji,this.name,e);return this.recordEnd_(),r(),t}",
                "measureAsync": "async measureAsync(e){if(this.start_>0)return s.default.timeAsync(this.emoji,this.name,e);this.recordStart_();let t=await s.default.timeAsync(this.emoji,this.name,e);return this.recordEnd_(),r(),t}",
                "measureAsyncWithoutNesting": "async measureAsyncWithoutNesting(e){if(this.start_>0)return s.default.timeAsync(this.emoji,this.name,e);this.recordStart_();let t=Date.now();s.default.mark(this.emoji,\"Start \".concat(this.name));let n=await e();return s.default.mark(this.emoji,\"Finish \".concat(this.name),Date.now()-t),this.recordEnd_(),r(),n}"
            },
            "fetchInitialGuildCache": {
                "emoji": "💾",
                "name": "Fetch Initial Guild Cache",
                "start_": 0,
                "startNumImports": 0,
                "startImportTime": 0,
                "end_": 0,
                "endNumImports": 0,
                "endImportTime": 0,
                "start": 0,
                "end": 0,
                "hasStart": "hasStart(){return this.start_>0}",
                "hasData": "hasData(){return this.end_>0}",
                "recordStart": "recordStart(){0===this.start_&&this.recordStart_(),s.default.mark(this.emoji,\"Start \".concat(this.name)),r()}",
                "recordStart_": "recordStart_(){this.start_=Date.now(),this.startNumImports=i.size(),this.startImportTime=a()}",
                "recordEnd": "recordEnd(){0===this.end_&&0!==this.start_?(this.recordEnd_(),s.default.mark(this.emoji,\"Finish \".concat(this.name),this.end_-this.start_)):s.default.mark(this.emoji,\"Finish \".concat(this.name)),r()}",
                "recordEnd_": "recordEnd_(){this.end_=Date.now(),this.endNumImports=i.size(),this.endImportTime=a()}",
                "set": "set(e,t){0===this.start_&&(this.start_=e,this.end_=e+t,this.endNumImports=i.size(),this.endImportTime=a()),s.default.mark(this.emoji,this.name,t),r()}",
                "serializeStart": "serializeStart(e){return o(e,this.start_)}",
                "serializeEnd": "serializeEnd(e){return o(e,this.end_)}",
                "measure": "measure(e){if(this.start_>0)return s.default.time(this.emoji,this.name,e);this.recordStart_();let t=s.default.time(this.emoji,this.name,e);return this.recordEnd_(),r(),t}",
                "measureAsync": "async measureAsync(e){if(this.start_>0)return s.default.timeAsync(this.emoji,this.name,e);this.recordStart_();let t=await s.default.timeAsync(this.emoji,this.name,e);return this.recordEnd_(),r(),t}",
                "measureAsyncWithoutNesting": "async measureAsyncWithoutNesting(e){if(this.start_>0)return s.default.timeAsync(this.emoji,this.name,e);this.recordStart_();let t=Date.now();s.default.mark(this.emoji,\"Start \".concat(this.name));let n=await e();return s.default.mark(this.emoji,\"Finish \".concat(this.name),Date.now()-t),this.recordEnd_(),r(),n}"
            },
            "loadCachedMessages": {
                "emoji": "💾",
                "name": "Load Cached Messages",
                "start_": 0,
                "startNumImports": 0,
                "startImportTime": 0,
                "end_": 0,
                "endNumImports": 0,
                "endImportTime": 0,
                "start": 0,
                "end": 0,
                "hasStart": "hasStart(){return this.start_>0}",
                "hasData": "hasData(){return this.end_>0}",
                "recordStart": "recordStart(){0===this.start_&&this.recordStart_(),s.default.mark(this.emoji,\"Start \".concat(this.name)),r()}",
                "recordStart_": "recordStart_(){this.start_=Date.now(),this.startNumImports=i.size(),this.startImportTime=a()}",
                "recordEnd": "recordEnd(){0===this.end_&&0!==this.start_?(this.recordEnd_(),s.default.mark(this.emoji,\"Finish \".concat(this.name),this.end_-this.start_)):s.default.mark(this.emoji,\"Finish \".concat(this.name)),r()}",
                "recordEnd_": "recordEnd_(){this.end_=Date.now(),this.endNumImports=i.size(),this.endImportTime=a()}",
                "set": "set(e,t){0===this.start_&&(this.start_=e,this.end_=e+t,this.endNumImports=i.size(),this.endImportTime=a()),s.default.mark(this.emoji,this.name,t),r()}",
                "serializeStart": "serializeStart(e){return o(e,this.start_)}",
                "serializeEnd": "serializeEnd(e){return o(e,this.end_)}",
                "measure": "measure(e){if(this.start_>0)return s.default.time(this.emoji,this.name,e);this.recordStart_();let t=s.default.time(this.emoji,this.name,e);return this.recordEnd_(),r(),t}",
                "measureAsync": "async measureAsync(e){if(this.start_>0)return s.default.timeAsync(this.emoji,this.name,e);this.recordStart_();let t=await s.default.timeAsync(this.emoji,this.name,e);return this.recordEnd_(),r(),t}",
                "measureAsyncWithoutNesting": "async measureAsyncWithoutNesting(e){if(this.start_>0)return s.default.timeAsync(this.emoji,this.name,e);this.recordStart_();let t=Date.now();s.default.mark(this.emoji,\"Start \".concat(this.name));let n=await e();return s.default.mark(this.emoji,\"Finish \".concat(this.name),Date.now()-t),this.recordEnd_(),r(),n}"
            },
            "renderApp": {
                "emoji": "🎨",
                "name": "First React Render",
                "onlyOnce": false,
                "time_": 0,
                "numImports": null,
                "importTime": 0,
                "time": 0,
                "record": "record(){0===this.time_?(this.time_=Date.now(),this.numImports=i.size(),this.importTime=a(),s.default.mark(this.emoji,this.name)):!this.onlyOnce&&s.default.mark(this.emoji,this.name),r()}",
                "hasData": "hasData(){return this.time_>0}",
                "serialize": "serialize(e){return o(e,this.time_)}"
            },
            "renderAppEffect": {
                "emoji": "🎨",
                "name": "First React Render useEffect",
                "onlyOnce": false,
                "time_": 0,
                "numImports": null,
                "importTime": 0,
                "time": 0,
                "record": "record(){0===this.time_?(this.time_=Date.now(),this.numImports=i.size(),this.importTime=a(),s.default.mark(this.emoji,this.name)):!this.onlyOnce&&s.default.mark(this.emoji,this.name),r()}",
                "hasData": "hasData(){return this.time_>0}",
                "serialize": "serialize(e){return o(e,this.time_)}"
            },
            "renderMessages": {
                "emoji": "🎨",
                "name": "React Render Messages",
                "onlyOnce": true,
                "time_": 0,
                "numImports": null,
                "importTime": 0,
                "time": 0,
                "record": "record(){0===this.time_?(this.time_=Date.now(),this.numImports=i.size(),this.importTime=a(),s.default.mark(this.emoji,this.name)):!this.onlyOnce&&s.default.mark(this.emoji,this.name),r()}",
                "hasData": "hasData(){return this.time_>0}",
                "serialize": "serialize(e){return o(e,this.time_)}"
            },
            "renderMessagesWithCache": {
                "emoji": "🎨",
                "name": "React Render Cached Messages",
                "onlyOnce": true,
                "time_": 0,
                "numImports": null,
                "importTime": 0,
                "time": 0,
                "record": "record(){0===this.time_?(this.time_=Date.now(),this.numImports=i.size(),this.importTime=a(),s.default.mark(this.emoji,this.name)):!this.onlyOnce&&s.default.mark(this.emoji,this.name),r()}",
                "hasData": "hasData(){return this.time_>0}",
                "serialize": "serialize(e){return o(e,this.time_)}"
            },
            "firstRowGenerator": {
                "emoji": "🎨",
                "name": "RowGenerator.generate()",
                "start_": 0,
                "startNumImports": 0,
                "startImportTime": 0,
                "end_": 0,
                "endNumImports": 0,
                "endImportTime": 0,
                "start": 0,
                "end": 0,
                "hasStart": "hasStart(){return this.start_>0}",
                "hasData": "hasData(){return this.end_>0}",
                "recordStart": "recordStart(){0===this.start_&&this.recordStart_(),s.default.mark(this.emoji,\"Start \".concat(this.name)),r()}",
                "recordStart_": "recordStart_(){this.start_=Date.now(),this.startNumImports=i.size(),this.startImportTime=a()}",
                "recordEnd": "recordEnd(){0===this.end_&&0!==this.start_?(this.recordEnd_(),s.default.mark(this.emoji,\"Finish \".concat(this.name),this.end_-this.start_)):s.default.mark(this.emoji,\"Finish \".concat(this.name)),r()}",
                "recordEnd_": "recordEnd_(){this.end_=Date.now(),this.endNumImports=i.size(),this.endImportTime=a()}",
                "set": "set(e,t){0===this.start_&&(this.start_=e,this.end_=e+t,this.endNumImports=i.size(),this.endImportTime=a()),s.default.mark(this.emoji,this.name,t),r()}",
                "serializeStart": "serializeStart(e){return o(e,this.start_)}",
                "serializeEnd": "serializeEnd(e){return o(e,this.end_)}",
                "measure": "measure(e){if(this.start_>0)return s.default.time(this.emoji,this.name,e);this.recordStart_();let t=s.default.time(this.emoji,this.name,e);return this.recordEnd_(),r(),t}",
                "measureAsync": "async measureAsync(e){if(this.start_>0)return s.default.timeAsync(this.emoji,this.name,e);this.recordStart_();let t=await s.default.timeAsync(this.emoji,this.name,e);return this.recordEnd_(),r(),t}",
                "measureAsyncWithoutNesting": "async measureAsyncWithoutNesting(e){if(this.start_>0)return s.default.timeAsync(this.emoji,this.name,e);this.recordStart_();let t=Date.now();s.default.mark(this.emoji,\"Start \".concat(this.name));let n=await e();return s.default.mark(this.emoji,\"Finish \".concat(this.name),Date.now()-t),this.recordEnd_(),r(),n}"
            },
            "renderLatestMessages": {
                "emoji": "🎨",
                "name": "React Render Latest Messages",
                "onlyOnce": false,
                "time_": 0,
                "numImports": null,
                "importTime": 0,
                "time": 0,
                "record": "record(){0===this.time_?(this.time_=Date.now(),this.numImports=i.size(),this.importTime=a(),s.default.mark(this.emoji,this.name)):!this.onlyOnce&&s.default.mark(this.emoji,this.name),r()}",
                "hasData": "hasData(){return this.time_>0}",
                "serialize": "serialize(e){return o(e,this.time_)}"
            },
            "initialGuild": {
                "emoji": "🌐",
                "name": "Initial Guild",
                "start_": 0,
                "startNumImports": 0,
                "startImportTime": 0,
                "end_": 0,
                "endNumImports": 0,
                "endImportTime": 0,
                "start": 0,
                "end": 0,
                "hasStart": "hasStart(){return this.start_>0}",
                "hasData": "hasData(){return this.end_>0}",
                "recordStart": "recordStart(){0===this.start_&&this.recordStart_(),s.default.mark(this.emoji,\"Start \".concat(this.name)),r()}",
                "recordStart_": "recordStart_(){this.start_=Date.now(),this.startNumImports=i.size(),this.startImportTime=a()}",
                "recordEnd": "recordEnd(){0===this.end_&&0!==this.start_?(this.recordEnd_(),s.default.mark(this.emoji,\"Finish \".concat(this.name),this.end_-this.start_)):s.default.mark(this.emoji,\"Finish \".concat(this.name)),r()}",
                "recordEnd_": "recordEnd_(){this.end_=Date.now(),this.endNumImports=i.size(),this.endImportTime=a()}",
                "set": "set(e,t){0===this.start_&&(this.start_=e,this.end_=e+t,this.endNumImports=i.size(),this.endImportTime=a()),s.default.mark(this.emoji,this.name,t),r()}",
                "serializeStart": "serializeStart(e){return o(e,this.start_)}",
                "serializeEnd": "serializeEnd(e){return o(e,this.end_)}",
                "measure": "measure(e){if(this.start_>0)return s.default.time(this.emoji,this.name,e);this.recordStart_();let t=s.default.time(this.emoji,this.name,e);return this.recordEnd_(),r(),t}",
                "measureAsync": "async measureAsync(e){if(this.start_>0)return s.default.timeAsync(this.emoji,this.name,e);this.recordStart_();let t=await s.default.timeAsync(this.emoji,this.name,e);return this.recordEnd_(),r(),t}",
                "measureAsyncWithoutNesting": "async measureAsyncWithoutNesting(e){if(this.start_>0)return s.default.timeAsync(this.emoji,this.name,e);this.recordStart_();let t=Date.now();s.default.mark(this.emoji,\"Start \".concat(this.name));let n=await e();return s.default.mark(this.emoji,\"Finish \".concat(this.name),Date.now()-t),this.recordEnd_(),r(),n}"
            },
            "loadLazyCache": {
                "emoji": "💾",
                "name": "Load Lazy Cache",
                "start_": 0,
                "startNumImports": 0,
                "startImportTime": 0,
                "end_": 0,
                "endNumImports": 0,
                "endImportTime": 0,
                "start": 0,
                "end": 0,
                "hasStart": "hasStart(){return this.start_>0}",
                "hasData": "hasData(){return this.end_>0}",
                "recordStart": "recordStart(){0===this.start_&&this.recordStart_(),s.default.mark(this.emoji,\"Start \".concat(this.name)),r()}",
                "recordStart_": "recordStart_(){this.start_=Date.now(),this.startNumImports=i.size(),this.startImportTime=a()}",
                "recordEnd": "recordEnd(){0===this.end_&&0!==this.start_?(this.recordEnd_(),s.default.mark(this.emoji,\"Finish \".concat(this.name),this.end_-this.start_)):s.default.mark(this.emoji,\"Finish \".concat(this.name)),r()}",
                "recordEnd_": "recordEnd_(){this.end_=Date.now(),this.endNumImports=i.size(),this.endImportTime=a()}",
                "set": "set(e,t){0===this.start_&&(this.start_=e,this.end_=e+t,this.endNumImports=i.size(),this.endImportTime=a()),s.default.mark(this.emoji,this.name,t),r()}",
                "serializeStart": "serializeStart(e){return o(e,this.start_)}",
                "serializeEnd": "serializeEnd(e){return o(e,this.end_)}",
                "measure": "measure(e){if(this.start_>0)return s.default.time(this.emoji,this.name,e);this.recordStart_();let t=s.default.time(this.emoji,this.name,e);return this.recordEnd_(),r(),t}",
                "measureAsync": "async measureAsync(e){if(this.start_>0)return s.default.timeAsync(this.emoji,this.name,e);this.recordStart_();let t=await s.default.timeAsync(this.emoji,this.name,e);return this.recordEnd_(),r(),t}",
                "measureAsyncWithoutNesting": "async measureAsyncWithoutNesting(e){if(this.start_>0)return s.default.timeAsync(this.emoji,this.name,e);this.recordStart_();let t=Date.now();s.default.mark(this.emoji,\"Start \".concat(this.name));let n=await e();return s.default.mark(this.emoji,\"Finish \".concat(this.name),Date.now()-t),this.recordEnd_(),r(),n}"
            },
            "fetchLazyCache": {
                "emoji": "💾",
                "name": "Fetch Lazy Cache",
                "start_": 0,
                "startNumImports": 0,
                "startImportTime": 0,
                "end_": 0,
                "endNumImports": 0,
                "endImportTime": 0,
                "start": 0,
                "end": 0,
                "hasStart": "hasStart(){return this.start_>0}",
                "hasData": "hasData(){return this.end_>0}",
                "recordStart": "recordStart(){0===this.start_&&this.recordStart_(),s.default.mark(this.emoji,\"Start \".concat(this.name)),r()}",
                "recordStart_": "recordStart_(){this.start_=Date.now(),this.startNumImports=i.size(),this.startImportTime=a()}",
                "recordEnd": "recordEnd(){0===this.end_&&0!==this.start_?(this.recordEnd_(),s.default.mark(this.emoji,\"Finish \".concat(this.name),this.end_-this.start_)):s.default.mark(this.emoji,\"Finish \".concat(this.name)),r()}",
                "recordEnd_": "recordEnd_(){this.end_=Date.now(),this.endNumImports=i.size(),this.endImportTime=a()}",
                "set": "set(e,t){0===this.start_&&(this.start_=e,this.end_=e+t,this.endNumImports=i.size(),this.endImportTime=a()),s.default.mark(this.emoji,this.name,t),r()}",
                "serializeStart": "serializeStart(e){return o(e,this.start_)}",
                "serializeEnd": "serializeEnd(e){return o(e,this.end_)}",
                "measure": "measure(e){if(this.start_>0)return s.default.time(this.emoji,this.name,e);this.recordStart_();let t=s.default.time(this.emoji,this.name,e);return this.recordEnd_(),r(),t}",
                "measureAsync": "async measureAsync(e){if(this.start_>0)return s.default.timeAsync(this.emoji,this.name,e);this.recordStart_();let t=await s.default.timeAsync(this.emoji,this.name,e);return this.recordEnd_(),r(),t}",
                "measureAsyncWithoutNesting": "async measureAsyncWithoutNesting(e){if(this.start_>0)return s.default.timeAsync(this.emoji,this.name,e);this.recordStart_();let t=Date.now();s.default.mark(this.emoji,\"Start \".concat(this.name));let n=await e();return s.default.mark(this.emoji,\"Finish \".concat(this.name),Date.now()-t),this.recordEnd_(),r(),n}"
            },
            "parseLazyCache": {
                "emoji": "💾",
                "name": "Parse Lazy Cache",
                "start_": 0,
                "startNumImports": 0,
                "startImportTime": 0,
                "end_": 0,
                "endNumImports": 0,
                "endImportTime": 0,
                "start": 0,
                "end": 0,
                "hasStart": "hasStart(){return this.start_>0}",
                "hasData": "hasData(){return this.end_>0}",
                "recordStart": "recordStart(){0===this.start_&&this.recordStart_(),s.default.mark(this.emoji,\"Start \".concat(this.name)),r()}",
                "recordStart_": "recordStart_(){this.start_=Date.now(),this.startNumImports=i.size(),this.startImportTime=a()}",
                "recordEnd": "recordEnd(){0===this.end_&&0!==this.start_?(this.recordEnd_(),s.default.mark(this.emoji,\"Finish \".concat(this.name),this.end_-this.start_)):s.default.mark(this.emoji,\"Finish \".concat(this.name)),r()}",
                "recordEnd_": "recordEnd_(){this.end_=Date.now(),this.endNumImports=i.size(),this.endImportTime=a()}",
                "set": "set(e,t){0===this.start_&&(this.start_=e,this.end_=e+t,this.endNumImports=i.size(),this.endImportTime=a()),s.default.mark(this.emoji,this.name,t),r()}",
                "serializeStart": "serializeStart(e){return o(e,this.start_)}",
                "serializeEnd": "serializeEnd(e){return o(e,this.end_)}",
                "measure": "measure(e){if(this.start_>0)return s.default.time(this.emoji,this.name,e);this.recordStart_();let t=s.default.time(this.emoji,this.name,e);return this.recordEnd_(),r(),t}",
                "measureAsync": "async measureAsync(e){if(this.start_>0)return s.default.timeAsync(this.emoji,this.name,e);this.recordStart_();let t=await s.default.timeAsync(this.emoji,this.name,e);return this.recordEnd_(),r(),t}",
                "measureAsyncWithoutNesting": "async measureAsyncWithoutNesting(e){if(this.start_>0)return s.default.timeAsync(this.emoji,this.name,e);this.recordStart_();let t=Date.now();s.default.mark(this.emoji,\"Start \".concat(this.name));let n=await e();return s.default.mark(this.emoji,\"Finish \".concat(this.name),Date.now()-t),this.recordEnd_(),r(),n}"
            },
            "fetchStaleChannels": {
                "emoji": "💾",
                "name": "Fetch Stale Channels",
                "start_": 0,
                "startNumImports": 0,
                "startImportTime": 0,
                "end_": 0,
                "endNumImports": 0,
                "endImportTime": 0,
                "start": 0,
                "end": 0,
                "hasStart": "hasStart(){return this.start_>0}",
                "hasData": "hasData(){return this.end_>0}",
                "recordStart": "recordStart(){0===this.start_&&this.recordStart_(),s.default.mark(this.emoji,\"Start \".concat(this.name)),r()}",
                "recordStart_": "recordStart_(){this.start_=Date.now(),this.startNumImports=i.size(),this.startImportTime=a()}",
                "recordEnd": "recordEnd(){0===this.end_&&0!==this.start_?(this.recordEnd_(),s.default.mark(this.emoji,\"Finish \".concat(this.name),this.end_-this.start_)):s.default.mark(this.emoji,\"Finish \".concat(this.name)),r()}",
                "recordEnd_": "recordEnd_(){this.end_=Date.now(),this.endNumImports=i.size(),this.endImportTime=a()}",
                "set": "set(e,t){0===this.start_&&(this.start_=e,this.end_=e+t,this.endNumImports=i.size(),this.endImportTime=a()),s.default.mark(this.emoji,this.name,t),r()}",
                "serializeStart": "serializeStart(e){return o(e,this.start_)}",
                "serializeEnd": "serializeEnd(e){return o(e,this.end_)}",
                "measure": "measure(e){if(this.start_>0)return s.default.time(this.emoji,this.name,e);this.recordStart_();let t=s.default.time(this.emoji,this.name,e);return this.recordEnd_(),r(),t}",
                "measureAsync": "async measureAsync(e){if(this.start_>0)return s.default.timeAsync(this.emoji,this.name,e);this.recordStart_();let t=await s.default.timeAsync(this.emoji,this.name,e);return this.recordEnd_(),r(),t}",
                "measureAsyncWithoutNesting": "async measureAsyncWithoutNesting(e){if(this.start_>0)return s.default.timeAsync(this.emoji,this.name,e);this.recordStart_();let t=Date.now();s.default.mark(this.emoji,\"Start \".concat(this.name));let n=await e();return s.default.mark(this.emoji,\"Finish \".concat(this.name),Date.now()-t),this.recordEnd_(),r(),n}"
            },
            "deserializeCache": {
                "emoji": "💾",
                "name": "Deserialize Cache",
                "start_": 0,
                "startNumImports": 0,
                "startImportTime": 0,
                "end_": 0,
                "endNumImports": 0,
                "endImportTime": 0,
                "start": 0,
                "end": 0,
                "hasStart": "hasStart(){return this.start_>0}",
                "hasData": "hasData(){return this.end_>0}",
                "recordStart": "recordStart(){0===this.start_&&this.recordStart_(),s.default.mark(this.emoji,\"Start \".concat(this.name)),r()}",
                "recordStart_": "recordStart_(){this.start_=Date.now(),this.startNumImports=i.size(),this.startImportTime=a()}",
                "recordEnd": "recordEnd(){0===this.end_&&0!==this.start_?(this.recordEnd_(),s.default.mark(this.emoji,\"Finish \".concat(this.name),this.end_-this.start_)):s.default.mark(this.emoji,\"Finish \".concat(this.name)),r()}",
                "recordEnd_": "recordEnd_(){this.end_=Date.now(),this.endNumImports=i.size(),this.endImportTime=a()}",
                "set": "set(e,t){0===this.start_&&(this.start_=e,this.end_=e+t,this.endNumImports=i.size(),this.endImportTime=a()),s.default.mark(this.emoji,this.name,t),r()}",
                "serializeStart": "serializeStart(e){return o(e,this.start_)}",
                "serializeEnd": "serializeEnd(e){return o(e,this.end_)}",
                "measure": "measure(e){if(this.start_>0)return s.default.time(this.emoji,this.name,e);this.recordStart_();let t=s.default.time(this.emoji,this.name,e);return this.recordEnd_(),r(),t}",
                "measureAsync": "async measureAsync(e){if(this.start_>0)return s.default.timeAsync(this.emoji,this.name,e);this.recordStart_();let t=await s.default.timeAsync(this.emoji,this.name,e);return this.recordEnd_(),r(),t}",
                "measureAsyncWithoutNesting": "async measureAsyncWithoutNesting(e){if(this.start_>0)return s.default.timeAsync(this.emoji,this.name,e);this.recordStart_();let t=Date.now();s.default.mark(this.emoji,\"Start \".concat(this.name));let n=await e();return s.default.mark(this.emoji,\"Finish \".concat(this.name),Date.now()-t),this.recordEnd_(),r(),n}"
            },
            "dispatchLazyCache": {
                "emoji": "💾",
                "name": "Dispatch Lazy Cache",
                "start_": 0,
                "startNumImports": 0,
                "startImportTime": 0,
                "end_": 0,
                "endNumImports": 0,
                "endImportTime": 0,
                "start": 0,
                "end": 0,
                "hasStart": "hasStart(){return this.start_>0}",
                "hasData": "hasData(){return this.end_>0}",
                "recordStart": "recordStart(){0===this.start_&&this.recordStart_(),s.default.mark(this.emoji,\"Start \".concat(this.name)),r()}",
                "recordStart_": "recordStart_(){this.start_=Date.now(),this.startNumImports=i.size(),this.startImportTime=a()}",
                "recordEnd": "recordEnd(){0===this.end_&&0!==this.start_?(this.recordEnd_(),s.default.mark(this.emoji,\"Finish \".concat(this.name),this.end_-this.start_)):s.default.mark(this.emoji,\"Finish \".concat(this.name)),r()}",
                "recordEnd_": "recordEnd_(){this.end_=Date.now(),this.endNumImports=i.size(),this.endImportTime=a()}",
                "set": "set(e,t){0===this.start_&&(this.start_=e,this.end_=e+t,this.endNumImports=i.size(),this.endImportTime=a()),s.default.mark(this.emoji,this.name,t),r()}",
                "serializeStart": "serializeStart(e){return o(e,this.start_)}",
                "serializeEnd": "serializeEnd(e){return o(e,this.end_)}",
                "measure": "measure(e){if(this.start_>0)return s.default.time(this.emoji,this.name,e);this.recordStart_();let t=s.default.time(this.emoji,this.name,e);return this.recordEnd_(),r(),t}",
                "measureAsync": "async measureAsync(e){if(this.start_>0)return s.default.timeAsync(this.emoji,this.name,e);this.recordStart_();let t=await s.default.timeAsync(this.emoji,this.name,e);return this.recordEnd_(),r(),t}",
                "measureAsyncWithoutNesting": "async measureAsyncWithoutNesting(e){if(this.start_>0)return s.default.timeAsync(this.emoji,this.name,e);this.recordStart_();let t=Date.now();s.default.mark(this.emoji,\"Start \".concat(this.name));let n=await e();return s.default.mark(this.emoji,\"Finish \".concat(this.name),Date.now()-t),this.recordEnd_(),r(),n}"
            },
            "parseReady": {
                "emoji": "🌐",
                "name": "Parse READY",
                "start_": 0,
                "startNumImports": 0,
                "startImportTime": 0,
                "end_": 0,
                "endNumImports": 0,
                "endImportTime": 0,
                "start": 0,
                "end": 0,
                "hasStart": "hasStart(){return this.start_>0}",
                "hasData": "hasData(){return this.end_>0}",
                "recordStart": "recordStart(){0===this.start_&&this.recordStart_(),s.default.mark(this.emoji,\"Start \".concat(this.name)),r()}",
                "recordStart_": "recordStart_(){this.start_=Date.now(),this.startNumImports=i.size(),this.startImportTime=a()}",
                "recordEnd": "recordEnd(){0===this.end_&&0!==this.start_?(this.recordEnd_(),s.default.mark(this.emoji,\"Finish \".concat(this.name),this.end_-this.start_)):s.default.mark(this.emoji,\"Finish \".concat(this.name)),r()}",
                "recordEnd_": "recordEnd_(){this.end_=Date.now(),this.endNumImports=i.size(),this.endImportTime=a()}",
                "set": "set(e,t){0===this.start_&&(this.start_=e,this.end_=e+t,this.endNumImports=i.size(),this.endImportTime=a()),s.default.mark(this.emoji,this.name,t),r()}",
                "serializeStart": "serializeStart(e){return o(e,this.start_)}",
                "serializeEnd": "serializeEnd(e){return o(e,this.end_)}",
                "measure": "measure(e){if(this.start_>0)return s.default.time(this.emoji,this.name,e);this.recordStart_();let t=s.default.time(this.emoji,this.name,e);return this.recordEnd_(),r(),t}",
                "measureAsync": "async measureAsync(e){if(this.start_>0)return s.default.timeAsync(this.emoji,this.name,e);this.recordStart_();let t=await s.default.timeAsync(this.emoji,this.name,e);return this.recordEnd_(),r(),t}",
                "measureAsyncWithoutNesting": "async measureAsyncWithoutNesting(e){if(this.start_>0)return s.default.timeAsync(this.emoji,this.name,e);this.recordStart_();let t=Date.now();s.default.mark(this.emoji,\"Start \".concat(this.name));let n=await e();return s.default.mark(this.emoji,\"Finish \".concat(this.name),Date.now()-t),this.recordEnd_(),r(),n}"
            },
            "ready": {
                "emoji": "🌐",
                "name": "READY",
                "start_": 0,
                "startNumImports": 0,
                "startImportTime": 0,
                "end_": 0,
                "endNumImports": 0,
                "endImportTime": 0,
                "start": 0,
                "end": 0,
                "hasStart": "hasStart(){return this.start_>0}",
                "hasData": "hasData(){return this.end_>0}",
                "recordStart": "recordStart(){0===this.start_&&this.recordStart_(),s.default.mark(this.emoji,\"Start \".concat(this.name)),r()}",
                "recordStart_": "recordStart_(){this.start_=Date.now(),this.startNumImports=i.size(),this.startImportTime=a()}",
                "recordEnd": "recordEnd(){0===this.end_&&0!==this.start_?(this.recordEnd_(),s.default.mark(this.emoji,\"Finish \".concat(this.name),this.end_-this.start_)):s.default.mark(this.emoji,\"Finish \".concat(this.name)),r()}",
                "recordEnd_": "recordEnd_(){this.end_=Date.now(),this.endNumImports=i.size(),this.endImportTime=a()}",
                "set": "set(e,t){0===this.start_&&(this.start_=e,this.end_=e+t,this.endNumImports=i.size(),this.endImportTime=a()),s.default.mark(this.emoji,this.name,t),r()}",
                "serializeStart": "serializeStart(e){return o(e,this.start_)}",
                "serializeEnd": "serializeEnd(e){return o(e,this.end_)}",
                "measure": "measure(e){if(this.start_>0)return s.default.time(this.emoji,this.name,e);this.recordStart_();let t=s.default.time(this.emoji,this.name,e);return this.recordEnd_(),r(),t}",
                "measureAsync": "async measureAsync(e){if(this.start_>0)return s.default.timeAsync(this.emoji,this.name,e);this.recordStart_();let t=await s.default.timeAsync(this.emoji,this.name,e);return this.recordEnd_(),r(),t}",
                "measureAsyncWithoutNesting": "async measureAsyncWithoutNesting(e){if(this.start_>0)return s.default.timeAsync(this.emoji,this.name,e);this.recordStart_();let t=Date.now();s.default.mark(this.emoji,\"Start \".concat(this.name));let n=await e();return s.default.mark(this.emoji,\"Finish \".concat(this.name),Date.now()-t),this.recordEnd_(),r(),n}"
            },
            "hydrateReady": {
                "emoji": "🌐",
                "name": "Hydrate READY",
                "start_": 0,
                "startNumImports": 0,
                "startImportTime": 0,
                "end_": 0,
                "endNumImports": 0,
                "endImportTime": 0,
                "start": 0,
                "end": 0,
                "hasStart": "hasStart(){return this.start_>0}",
                "hasData": "hasData(){return this.end_>0}",
                "recordStart": "recordStart(){0===this.start_&&this.recordStart_(),s.default.mark(this.emoji,\"Start \".concat(this.name)),r()}",
                "recordStart_": "recordStart_(){this.start_=Date.now(),this.startNumImports=i.size(),this.startImportTime=a()}",
                "recordEnd": "recordEnd(){0===this.end_&&0!==this.start_?(this.recordEnd_(),s.default.mark(this.emoji,\"Finish \".concat(this.name),this.end_-this.start_)):s.default.mark(this.emoji,\"Finish \".concat(this.name)),r()}",
                "recordEnd_": "recordEnd_(){this.end_=Date.now(),this.endNumImports=i.size(),this.endImportTime=a()}",
                "set": "set(e,t){0===this.start_&&(this.start_=e,this.end_=e+t,this.endNumImports=i.size(),this.endImportTime=a()),s.default.mark(this.emoji,this.name,t),r()}",
                "serializeStart": "serializeStart(e){return o(e,this.start_)}",
                "serializeEnd": "serializeEnd(e){return o(e,this.end_)}",
                "measure": "measure(e){if(this.start_>0)return s.default.time(this.emoji,this.name,e);this.recordStart_();let t=s.default.time(this.emoji,this.name,e);return this.recordEnd_(),r(),t}",
                "measureAsync": "async measureAsync(e){if(this.start_>0)return s.default.timeAsync(this.emoji,this.name,e);this.recordStart_();let t=await s.default.timeAsync(this.emoji,this.name,e);return this.recordEnd_(),r(),t}",
                "measureAsyncWithoutNesting": "async measureAsyncWithoutNesting(e){if(this.start_>0)return s.default.timeAsync(this.emoji,this.name,e);this.recordStart_();let t=Date.now();s.default.mark(this.emoji,\"Start \".concat(this.name));let n=await e();return s.default.mark(this.emoji,\"Finish \".concat(this.name),Date.now()-t),this.recordEnd_(),r(),n}"
            },
            "dispatchReady": {
                "emoji": "🌐",
                "name": "Dispatch READY",
                "start_": 0,
                "startNumImports": 0,
                "startImportTime": 0,
                "end_": 0,
                "endNumImports": 0,
                "endImportTime": 0,
                "start": 0,
                "end": 0,
                "hasStart": "hasStart(){return this.start_>0}",
                "hasData": "hasData(){return this.end_>0}",
                "recordStart": "recordStart(){0===this.start_&&this.recordStart_(),s.default.mark(this.emoji,\"Start \".concat(this.name)),r()}",
                "recordStart_": "recordStart_(){this.start_=Date.now(),this.startNumImports=i.size(),this.startImportTime=a()}",
                "recordEnd": "recordEnd(){0===this.end_&&0!==this.start_?(this.recordEnd_(),s.default.mark(this.emoji,\"Finish \".concat(this.name),this.end_-this.start_)):s.default.mark(this.emoji,\"Finish \".concat(this.name)),r()}",
                "recordEnd_": "recordEnd_(){this.end_=Date.now(),this.endNumImports=i.size(),this.endImportTime=a()}",
                "set": "set(e,t){0===this.start_&&(this.start_=e,this.end_=e+t,this.endNumImports=i.size(),this.endImportTime=a()),s.default.mark(this.emoji,this.name,t),r()}",
                "serializeStart": "serializeStart(e){return o(e,this.start_)}",
                "serializeEnd": "serializeEnd(e){return o(e,this.end_)}",
                "measure": "measure(e){if(this.start_>0)return s.default.time(this.emoji,this.name,e);this.recordStart_();let t=s.default.time(this.emoji,this.name,e);return this.recordEnd_(),r(),t}",
                "measureAsync": "async measureAsync(e){if(this.start_>0)return s.default.timeAsync(this.emoji,this.name,e);this.recordStart_();let t=await s.default.timeAsync(this.emoji,this.name,e);return this.recordEnd_(),r(),t}",
                "measureAsyncWithoutNesting": "async measureAsyncWithoutNesting(e){if(this.start_>0)return s.default.timeAsync(this.emoji,this.name,e);this.recordStart_();let t=Date.now();s.default.mark(this.emoji,\"Start \".concat(this.name));let n=await e();return s.default.mark(this.emoji,\"Finish \".concat(this.name),Date.now()-t),this.recordEnd_(),r(),n}"
            },
            "parseReadySupplemental": {
                "emoji": "🌐",
                "name": "Parse READY Supplemental",
                "start_": 0,
                "startNumImports": 0,
                "startImportTime": 0,
                "end_": 0,
                "endNumImports": 0,
                "endImportTime": 0,
                "start": 0,
                "end": 0,
                "hasStart": "hasStart(){return this.start_>0}",
                "hasData": "hasData(){return this.end_>0}",
                "recordStart": "recordStart(){0===this.start_&&this.recordStart_(),s.default.mark(this.emoji,\"Start \".concat(this.name)),r()}",
                "recordStart_": "recordStart_(){this.start_=Date.now(),this.startNumImports=i.size(),this.startImportTime=a()}",
                "recordEnd": "recordEnd(){0===this.end_&&0!==this.start_?(this.recordEnd_(),s.default.mark(this.emoji,\"Finish \".concat(this.name),this.end_-this.start_)):s.default.mark(this.emoji,\"Finish \".concat(this.name)),r()}",
                "recordEnd_": "recordEnd_(){this.end_=Date.now(),this.endNumImports=i.size(),this.endImportTime=a()}",
                "set": "set(e,t){0===this.start_&&(this.start_=e,this.end_=e+t,this.endNumImports=i.size(),this.endImportTime=a()),s.default.mark(this.emoji,this.name,t),r()}",
                "serializeStart": "serializeStart(e){return o(e,this.start_)}",
                "serializeEnd": "serializeEnd(e){return o(e,this.end_)}",
                "measure": "measure(e){if(this.start_>0)return s.default.time(this.emoji,this.name,e);this.recordStart_();let t=s.default.time(this.emoji,this.name,e);return this.recordEnd_(),r(),t}",
                "measureAsync": "async measureAsync(e){if(this.start_>0)return s.default.timeAsync(this.emoji,this.name,e);this.recordStart_();let t=await s.default.timeAsync(this.emoji,this.name,e);return this.recordEnd_(),r(),t}",
                "measureAsyncWithoutNesting": "async measureAsyncWithoutNesting(e){if(this.start_>0)return s.default.timeAsync(this.emoji,this.name,e);this.recordStart_();let t=Date.now();s.default.mark(this.emoji,\"Start \".concat(this.name));let n=await e();return s.default.mark(this.emoji,\"Finish \".concat(this.name),Date.now()-t),this.recordEnd_(),r(),n}"
            },
            "readySupplemental": {
                "emoji": "🌐",
                "name": "READY Supplemental",
                "start_": 0,
                "startNumImports": 0,
                "startImportTime": 0,
                "end_": 0,
                "endNumImports": 0,
                "endImportTime": 0,
                "start": 0,
                "end": 0,
                "hasStart": "hasStart(){return this.start_>0}",
                "hasData": "hasData(){return this.end_>0}",
                "recordStart": "recordStart(){0===this.start_&&this.recordStart_(),s.default.mark(this.emoji,\"Start \".concat(this.name)),r()}",
                "recordStart_": "recordStart_(){this.start_=Date.now(),this.startNumImports=i.size(),this.startImportTime=a()}",
                "recordEnd": "recordEnd(){0===this.end_&&0!==this.start_?(this.recordEnd_(),s.default.mark(this.emoji,\"Finish \".concat(this.name),this.end_-this.start_)):s.default.mark(this.emoji,\"Finish \".concat(this.name)),r()}",
                "recordEnd_": "recordEnd_(){this.end_=Date.now(),this.endNumImports=i.size(),this.endImportTime=a()}",
                "set": "set(e,t){0===this.start_&&(this.start_=e,this.end_=e+t,this.endNumImports=i.size(),this.endImportTime=a()),s.default.mark(this.emoji,this.name,t),r()}",
                "serializeStart": "serializeStart(e){return o(e,this.start_)}",
                "serializeEnd": "serializeEnd(e){return o(e,this.end_)}",
                "measure": "measure(e){if(this.start_>0)return s.default.time(this.emoji,this.name,e);this.recordStart_();let t=s.default.time(this.emoji,this.name,e);return this.recordEnd_(),r(),t}",
                "measureAsync": "async measureAsync(e){if(this.start_>0)return s.default.timeAsync(this.emoji,this.name,e);this.recordStart_();let t=await s.default.timeAsync(this.emoji,this.name,e);return this.recordEnd_(),r(),t}",
                "measureAsyncWithoutNesting": "async measureAsyncWithoutNesting(e){if(this.start_>0)return s.default.timeAsync(this.emoji,this.name,e);this.recordStart_();let t=Date.now();s.default.mark(this.emoji,\"Start \".concat(this.name));let n=await e();return s.default.mark(this.emoji,\"Finish \".concat(this.name),Date.now()-t),this.recordEnd_(),r(),n}"
            },
            "hydrateReadySupplemental": {
                "emoji": "🌐",
                "name": "Hydrate READY Supplemental",
                "start_": 0,
                "startNumImports": 0,
                "startImportTime": 0,
                "end_": 0,
                "endNumImports": 0,
                "endImportTime": 0,
                "start": 0,
                "end": 0,
                "hasStart": "hasStart(){return this.start_>0}",
                "hasData": "hasData(){return this.end_>0}",
                "recordStart": "recordStart(){0===this.start_&&this.recordStart_(),s.default.mark(this.emoji,\"Start \".concat(this.name)),r()}",
                "recordStart_": "recordStart_(){this.start_=Date.now(),this.startNumImports=i.size(),this.startImportTime=a()}",
                "recordEnd": "recordEnd(){0===this.end_&&0!==this.start_?(this.recordEnd_(),s.default.mark(this.emoji,\"Finish \".concat(this.name),this.end_-this.start_)):s.default.mark(this.emoji,\"Finish \".concat(this.name)),r()}",
                "recordEnd_": "recordEnd_(){this.end_=Date.now(),this.endNumImports=i.size(),this.endImportTime=a()}",
                "set": "set(e,t){0===this.start_&&(this.start_=e,this.end_=e+t,this.endNumImports=i.size(),this.endImportTime=a()),s.default.mark(this.emoji,this.name,t),r()}",
                "serializeStart": "serializeStart(e){return o(e,this.start_)}",
                "serializeEnd": "serializeEnd(e){return o(e,this.end_)}",
                "measure": "measure(e){if(this.start_>0)return s.default.time(this.emoji,this.name,e);this.recordStart_();let t=s.default.time(this.emoji,this.name,e);return this.recordEnd_(),r(),t}",
                "measureAsync": "async measureAsync(e){if(this.start_>0)return s.default.timeAsync(this.emoji,this.name,e);this.recordStart_();let t=await s.default.timeAsync(this.emoji,this.name,e);return this.recordEnd_(),r(),t}",
                "measureAsyncWithoutNesting": "async measureAsyncWithoutNesting(e){if(this.start_>0)return s.default.timeAsync(this.emoji,this.name,e);this.recordStart_();let t=Date.now();s.default.mark(this.emoji,\"Start \".concat(this.name));let n=await e();return s.default.mark(this.emoji,\"Finish \".concat(this.name),Date.now()-t),this.recordEnd_(),r(),n}"
            },
            "dispatchReadySupplemental": {
                "emoji": "🌐",
                "name": "Dispatch READY Supplemental",
                "start_": 0,
                "startNumImports": 0,
                "startImportTime": 0,
                "end_": 0,
                "endNumImports": 0,
                "endImportTime": 0,
                "start": 0,
                "end": 0,
                "hasStart": "hasStart(){return this.start_>0}",
                "hasData": "hasData(){return this.end_>0}",
                "recordStart": "recordStart(){0===this.start_&&this.recordStart_(),s.default.mark(this.emoji,\"Start \".concat(this.name)),r()}",
                "recordStart_": "recordStart_(){this.start_=Date.now(),this.startNumImports=i.size(),this.startImportTime=a()}",
                "recordEnd": "recordEnd(){0===this.end_&&0!==this.start_?(this.recordEnd_(),s.default.mark(this.emoji,\"Finish \".concat(this.name),this.end_-this.start_)):s.default.mark(this.emoji,\"Finish \".concat(this.name)),r()}",
                "recordEnd_": "recordEnd_(){this.end_=Date.now(),this.endNumImports=i.size(),this.endImportTime=a()}",
                "set": "set(e,t){0===this.start_&&(this.start_=e,this.end_=e+t,this.endNumImports=i.size(),this.endImportTime=a()),s.default.mark(this.emoji,this.name,t),r()}",
                "serializeStart": "serializeStart(e){return o(e,this.start_)}",
                "serializeEnd": "serializeEnd(e){return o(e,this.end_)}",
                "measure": "measure(e){if(this.start_>0)return s.default.time(this.emoji,this.name,e);this.recordStart_();let t=s.default.time(this.emoji,this.name,e);return this.recordEnd_(),r(),t}",
                "measureAsync": "async measureAsync(e){if(this.start_>0)return s.default.timeAsync(this.emoji,this.name,e);this.recordStart_();let t=await s.default.timeAsync(this.emoji,this.name,e);return this.recordEnd_(),r(),t}",
                "measureAsyncWithoutNesting": "async measureAsyncWithoutNesting(e){if(this.start_>0)return s.default.timeAsync(this.emoji,this.name,e);this.recordStart_();let t=Date.now();s.default.mark(this.emoji,\"Start \".concat(this.name));let n=await e();return s.default.mark(this.emoji,\"Finish \".concat(this.name),Date.now()-t),this.recordEnd_(),r(),n}"
            },
            "fetchMessages": {
                "emoji": "🌐",
                "name": "Fetch messages",
                "start_": 0,
                "startNumImports": 0,
                "startImportTime": 0,
                "end_": 0,
                "endNumImports": 0,
                "endImportTime": 0,
                "start": 0,
                "end": 0,
                "hasStart": "hasStart(){return this.start_>0}",
                "hasData": "hasData(){return this.end_>0}",
                "recordStart": "recordStart(){0===this.start_&&this.recordStart_(),s.default.mark(this.emoji,\"Start \".concat(this.name)),r()}",
                "recordStart_": "recordStart_(){this.start_=Date.now(),this.startNumImports=i.size(),this.startImportTime=a()}",
                "recordEnd": "recordEnd(){0===this.end_&&0!==this.start_?(this.recordEnd_(),s.default.mark(this.emoji,\"Finish \".concat(this.name),this.end_-this.start_)):s.default.mark(this.emoji,\"Finish \".concat(this.name)),r()}",
                "recordEnd_": "recordEnd_(){this.end_=Date.now(),this.endNumImports=i.size(),this.endImportTime=a()}",
                "set": "set(e,t){0===this.start_&&(this.start_=e,this.end_=e+t,this.endNumImports=i.size(),this.endImportTime=a()),s.default.mark(this.emoji,this.name,t),r()}",
                "serializeStart": "serializeStart(e){return o(e,this.start_)}",
                "serializeEnd": "serializeEnd(e){return o(e,this.end_)}",
                "measure": "measure(e){if(this.start_>0)return s.default.time(this.emoji,this.name,e);this.recordStart_();let t=s.default.time(this.emoji,this.name,e);return this.recordEnd_(),r(),t}",
                "measureAsync": "async measureAsync(e){if(this.start_>0)return s.default.timeAsync(this.emoji,this.name,e);this.recordStart_();let t=await s.default.timeAsync(this.emoji,this.name,e);return this.recordEnd_(),r(),t}",
                "measureAsyncWithoutNesting": "async measureAsyncWithoutNesting(e){if(this.start_>0)return s.default.timeAsync(this.emoji,this.name,e);this.recordStart_();let t=Date.now();s.default.mark(this.emoji,\"Start \".concat(this.name));let n=await e();return s.default.mark(this.emoji,\"Finish \".concat(this.name),Date.now()-t),this.recordEnd_(),r(),n}"
            },
            "dispatchMessages": {
                "emoji": "🌐",
                "name": "Dispatch messages",
                "start_": 0,
                "startNumImports": 0,
                "startImportTime": 0,
                "end_": 0,
                "endNumImports": 0,
                "endImportTime": 0,
                "start": 0,
                "end": 0,
                "hasStart": "hasStart(){return this.start_>0}",
                "hasData": "hasData(){return this.end_>0}",
                "recordStart": "recordStart(){0===this.start_&&this.recordStart_(),s.default.mark(this.emoji,\"Start \".concat(this.name)),r()}",
                "recordStart_": "recordStart_(){this.start_=Date.now(),this.startNumImports=i.size(),this.startImportTime=a()}",
                "recordEnd": "recordEnd(){0===this.end_&&0!==this.start_?(this.recordEnd_(),s.default.mark(this.emoji,\"Finish \".concat(this.name),this.end_-this.start_)):s.default.mark(this.emoji,\"Finish \".concat(this.name)),r()}",
                "recordEnd_": "recordEnd_(){this.end_=Date.now(),this.endNumImports=i.size(),this.endImportTime=a()}",
                "set": "set(e,t){0===this.start_&&(this.start_=e,this.end_=e+t,this.endNumImports=i.size(),this.endImportTime=a()),s.default.mark(this.emoji,this.name,t),r()}",
                "serializeStart": "serializeStart(e){return o(e,this.start_)}",
                "serializeEnd": "serializeEnd(e){return o(e,this.end_)}",
                "measure": "measure(e){if(this.start_>0)return s.default.time(this.emoji,this.name,e);this.recordStart_();let t=s.default.time(this.emoji,this.name,e);return this.recordEnd_(),r(),t}",
                "measureAsync": "async measureAsync(e){if(this.start_>0)return s.default.timeAsync(this.emoji,this.name,e);this.recordStart_();let t=await s.default.timeAsync(this.emoji,this.name,e);return this.recordEnd_(),r(),t}",
                "measureAsyncWithoutNesting": "async measureAsyncWithoutNesting(e){if(this.start_>0)return s.default.timeAsync(this.emoji,this.name,e);this.recordStart_();let t=Date.now();s.default.mark(this.emoji,\"Start \".concat(this.name));let n=await e();return s.default.mark(this.emoji,\"Finish \".concat(this.name),Date.now()-t),this.recordEnd_(),r(),n}"
            },
            "imports": {
                "polyfillsEnd": {
                    "time_": 0,
                    "time": 0,
                    "record": "record(){0===this.time_&&(this.time_=a())}"
                },
                "sentryEnd": {
                    "time_": 0,
                    "time": 0,
                    "record": "record(){0===this.time_&&(this.time_=a())}"
                },
                "appStateChangeStart": {
                    "time_": 0,
                    "time": 0,
                    "record": "record(){0===this.time_&&(this.time_=a())}"
                },
                "appStateChangeEnd": {
                    "time_": 0,
                    "time": 0,
                    "record": "record(){0===this.time_&&(this.time_=a())}"
                },
                "loadMiniCacheStart": {
                    "time_": 0,
                    "time": 0,
                    "record": "record(){0===this.time_&&(this.time_=a())}"
                },
                "loadStorageStart": {
                    "time_": 0,
                    "time": 0,
                    "record": "record(){0===this.time_&&(this.time_=a())}"
                },
                "loadStorageEnd": {
                    "time_": 0,
                    "time": 0,
                    "record": "record(){0===this.time_&&(this.time_=a())}"
                }
            },
            "readyProperties": {},
            "didBackgroundApp": false,
            "wasEverActive": false,
            "wasAuthenticated": false,
            "interstitial": null,
            "cachedChannelCounts": {
                "toJSON": "function(){return Array.from(this)}",
                "get": "function get() { [native code] }",
                "set": "function set() { [native code] }",
                "has": "function has() { [native code] }",
                "delete": "function delete() { [native code] }",
                "clear": "function clear() { [native code] }",
                "entries": "function entries() { [native code] }",
                "forEach": "function forEach() { [native code] }",
                "keys": "function keys() { [native code] }",
                "size": 0,
                "values": "function values() { [native code] }"
            },
            "cachedChannelId": null,
            "cachedMessageIds": null,
            "messageCacheMissingReason": "never-loaded",
            "messageCacheAgeSeconds": null,
            "messageCacheCount": null,
            "messageCacheHavingCount": null,
            "messageCacheMissingCount": null,
            "messageRenderFullCount": null,
            "messageRenderCachedCount": null,
            "messageRenderHasMoreAfter": null,
            "firstAppActiveTime": null,
            "cacheInfo": null,
            "extraProperties": {},
            "setTTICallback": "setTTICallback(e){r=()=>{!0===e()&&(r=()=>!1)}}",
            "setCacheInfo": "setCacheInfo(e){this.cacheInfo=e}",
            "setInterstitial": "setInterstitial(e){this.interstitial=e,r()}",
            "addLocalMessages": "addLocalMessages(e,t){for(this.cachedChannelCounts.set(e,t);this.cachedChannelCounts.size>100;){let e=this.cachedChannelCounts.keys();this.cachedChannelCounts.delete(e.next().value)}}",
            "attachReadyPayloadProperties": "attachReadyPayloadProperties(e){this.readyProperties=e}",
            "appStateChanged": "appStateChanged(e){\"active\"===e&&(null==this.firstAppActiveTime&&(this.firstAppActiveTime=Date.now()),this.wasEverActive=!0),null==this.readyProperties.num_guilds&&(this.didBackgroundApp=this.didBackgroundApp||\"active\"!==e)}",
            "recordRender": "recordRender(e,t){this.renderMessages.record(),(t||e>0)&&this.renderMessagesWithCache.record(),t&&this.renderLatestMessages.record()}",
            "recordMessageRender": "recordMessageRender(e,t,s,i){let{default:r}=n(\"299039\");if(!this.renderLatestMessages.hasData()){if(this.renderMessages.record(),t.length>0&&this.renderMessagesWithCache.record(),s){if(this.renderLatestMessages.record(),null==this.cachedChannelId){this.messageCacheMissingReason=\"no-cache\";return}if(this.cachedChannelId!==e){this.messageCacheMissingReason=\"channel-changed\";return}if(null==this.cachedMessageIds||0===this.cachedMessageIds.length){this.messageCacheMissingReason=\"no-cache\";return}if(0===t.length){this.messageCacheMissingReason=\"channel-empty\";return}if(e===this.cachedChannelId){var a;let n=this.cachedMessageIds.sort(r.compare).reverse()[0],s=t.sort(r.compare).reverse()[0];this.messageCacheAgeSeconds=Math.floor((r.extractTimestamp(s)-r.extractTimestamp(n))/1e3);let o=t.filter(e=>{var t;return null===(t=this.cachedMessageIds)||void 0===t?void 0:t.includes(e)}).length;this.messageCacheCount=null!==(a=this.cachedChannelCounts.get(e))&&void 0!==a?a:null,this.messageCacheHavingCount=o,this.messageCacheMissingCount=t.length-o,this.messageRenderFullCount=t.length,this.messageRenderCachedCount=this.cachedMessageIds.length,this.messageRenderHasMoreAfter=i}}else(null==this.cachedChannelId||e===this.cachedChannelId)&&(this.cachedChannelId=e,this.cachedMessageIds=t,t.length>0&&(this.messageCacheMissingReason=null))}}",
            "getStartTime": "getStartTime(e){return this.extraProperties.headless_task_ran&&null!=this.firstAppActiveTime?this.firstAppActiveTime:null==e||e<=0?this.loadIndex.start:e}",
            "processNativeLogs": "processNativeLogs(e,t){let n=this.getStartTime(t);for(let t of e)switch(t.label){case\"Finish MainApplication.initialize()\":this.extraProperties.time_main_application_initialize_end=o(n,t.timestamp);break;case\"GET_REACT_INSTANCE_MANAGER_START\":this.extraProperties.time_get_react_instance_manager_start=o(n,t.timestamp);break;case\"GET_REACT_INSTANCE_MANAGER_END\":this.extraProperties.time_get_react_instance_manager_end=o(n,t.timestamp);break;case\"PROCESS_PACKAGES_START\":this.extraProperties.time_process_packages_start=o(n,t.timestamp);break;case\"PROCESS_PACKAGES_END\":this.extraProperties.time_process_packages_end=o(n,t.timestamp);break;case\"CREATE_CATALYST_INSTANCE_START\":this.extraProperties.time_create_catalyst_instance_start=o(n,t.timestamp);break;case\"CREATE_CATALYST_INSTANCE_END\":this.extraProperties.time_create_catalyst_instance_end=o(n,t.timestamp);break;case\"CREATE_UI_MANAGER_MODULE_START\":this.extraProperties.time_create_ui_manager_module_start=o(n,t.timestamp);break;case\"CREATE_UI_MANAGER_MODULE_END\":this.extraProperties.time_create_ui_manager_module_end=o(n,t.timestamp);break;case\"REACT_BRIDGE_LOADING_START\":this.extraProperties.time_react_bridge_loading_start=o(n,t.timestamp);break;case\"REACT_BRIDGE_LOADING_END\":this.extraProperties.time_react_bridge_loading_end=o(n,t.timestamp);break;case\"CacheStorage Init Start\":this.extraProperties.time_init_native_storage_start=o(n,t.timestamp);break;case\"CacheStorage Init End\":this.extraProperties.time_init_native_storage_end=o(n,t.timestamp);break;case\"ChatModule.updateRows() Start\":if(null!=this.extraProperties.time_first_native_message_render_start)continue;this.extraProperties.time_first_native_message_render_start=o(n,t.timestamp);break;case\"ChatModule.updateRows() Finish\":if(null!=this.extraProperties.time_first_native_message_render_end)continue;this.extraProperties.time_first_native_message_render_end=o(n,t.timestamp)}}",
            "serializeTTITracker": "serializeTTITracker(e){var t,i,r,a,o,d;let u=this.getStartTime(e),l=n(\"917351\"),f=l(s.default.logGroups[0].logs).filter(e=>e.log.startsWith(\"Require \")).map(e=>{var t;return null!==(t=e.delta)&&void 0!==t?t:0}).sum();return{...this.extraProperties,time_load_index_start:this.loadIndex.serializeStart(u),time_load_index_end:this.loadIndex.serializeEnd(u),time_begin_fast_connect_start:this.beginFastConnect.serializeStart(u),time_begin_fast_connect_end:this.beginFastConnect.serializeEnd(u),time_load_imports_start:this.loadImports.serializeStart(u),time_load_imports_end:this.loadImports.serializeEnd(u),time_init_start:this.init.serializeStart(u),time_init_end:this.init.serializeEnd(u),time_load_storage_start:this.loadStorage.serializeStart(u),time_load_storage_end:this.loadStorage.serializeEnd(u),time_parse_storage_start:this.parseStorage.serializeStart(u),time_parse_storage_end:this.parseStorage.serializeEnd(u),time_load_mini_cache_start:this.loadMiniCache.serializeStart(u),time_load_mini_cache_end:this.loadMiniCache.serializeEnd(u),time_fetch_initial_guild_start:this.fetchInitialGuildCache.serializeStart(u),time_fetch_initial_guild_end:this.fetchInitialGuildCache.serializeEnd(u),time_load_cached_messages_start:this.loadCachedMessages.serializeStart(u),time_load_cached_messages_end:this.loadCachedMessages.serializeEnd(u),time_render_app_start:this.renderApp.serialize(u),time_render_app_effect_start:this.renderAppEffect.serialize(u),time_render_messages_end:this.renderMessages.serialize(u),time_render_messages_with_cache_end:this.renderMessagesWithCache.serialize(u),time_render_latest_messages_end:this.renderLatestMessages.serialize(u),time_first_row_generator_start:this.firstRowGenerator.serializeStart(u),time_first_row_generator_end:this.firstRowGenerator.serializeEnd(u),time_initial_guild_start:this.initialGuild.serializeStart(u),time_initial_guild_end:this.initialGuild.serializeEnd(u),time_load_lazy_cache_start:this.loadLazyCache.serializeStart(u),time_load_lazy_cache_end:this.loadLazyCache.serializeEnd(u),time_fetch_lazy_cache_start:this.fetchLazyCache.serializeStart(u),time_fetch_lazy_cache_end:this.fetchLazyCache.serializeEnd(u),time_parse_lazy_cache_start:this.parseLazyCache.serializeStart(u),time_parse_lazy_cache_end:this.parseLazyCache.serializeEnd(u),time_fetch_stale_channels_start:this.fetchStaleChannels.serializeStart(u),time_fetch_stale_channels_end:this.fetchStaleChannels.serializeEnd(u),time_deserialize_cache_start:this.deserializeCache.serializeStart(u),time_deserialize_cache_end:this.deserializeCache.serializeEnd(u),time_dispatch_lazy_cache_start:this.dispatchLazyCache.serializeStart(u),time_dispatch_lazy_cache_end:this.dispatchLazyCache.serializeEnd(u),time_parse_ready_start:this.parseReady.serializeStart(u),time_parse_ready_end:this.parseReady.serializeEnd(u),time_ready_start:this.ready.serializeStart(u),time_ready_end:this.ready.serializeEnd(u),time_hydrate_ready_start:this.hydrateReady.serializeStart(u),time_hydrate_ready_end:this.hydrateReady.serializeEnd(u),time_dispatch_ready_start:this.dispatchReady.serializeStart(u),time_dispatch_ready_end:this.dispatchReady.serializeEnd(u),time_parse_ready_supplemental_start:this.parseReadySupplemental.serializeStart(u),time_parse_ready_supplemental_end:this.parseReadySupplemental.serializeEnd(u),time_ready_supplemental_start:this.readySupplemental.serializeStart(u),time_ready_supplemental_end:this.readySupplemental.serializeEnd(u),time_hydrate_ready_supplemental_start:this.hydrateReadySupplemental.serializeStart(u),time_hydrate_ready_supplemental_end:this.hydrateReadySupplemental.serializeEnd(u),time_dispatch_ready_supplemental_start:this.dispatchReadySupplemental.serializeStart(u),time_dispatch_ready_supplemental_end:this.dispatchReadySupplemental.serializeEnd(u),time_fetch_messages_start:this.fetchMessages.serializeStart(u),time_fetch_messages_end:this.fetchMessages.serializeEnd(u),time_dispatch_messages_start:this.dispatchMessages.serializeStart(u),time_dispatch_messages_end:this.dispatchMessages.serializeEnd(u),time_load_fast_connect_native_module_start:this.loadFastConnectNativeModule.serializeStart(u),time_load_fast_connect_native_module_end:this.loadFastConnectNativeModule.serializeEnd(u),identify_total_server_duration_ms:this.readyProperties.identify_total_server_duration_ms,identify_api_duration_ms:this.readyProperties.identify_api_duration_ms,identify_guilds_duration_ms:this.readyProperties.identify_guilds_duration_ms,ready_compressed_byte_size:this.readyProperties.compressed_byte_size,ready_uncompressed_byte_size:this.readyProperties.uncompressed_byte_size,identify_compressed_byte_size:this.readyProperties.identify_compressed_byte_size,identify_uncompressed_byte_size:this.readyProperties.identify_uncompressed_byte_size,ready_compression_algorithm:this.readyProperties.compression_algorithm,ready_packing_algorithm:this.readyProperties.packing_algorithm,ready_unpack_duration_ms:this.readyProperties.unpack_duration_ms,is_reconnect:this.readyProperties.is_reconnect,is_fast_connect:this.readyProperties.is_fast_connect,did_force_clear_guild_hashes:this.readyProperties.did_force_clear_guild_hashes,num_guilds:this.readyProperties.num_guilds,num_changed_guild_channels:this.readyProperties.num_guild_channels,ready_presences_size:this.readyProperties.presences_size,ready_users_size:this.readyProperties.users_size,ready_read_states_size:this.readyProperties.read_states_size,ready_private_channels_size:this.readyProperties.private_channels_size,ready_user_guild_settings_size:this.readyProperties.user_guild_settings_size,ready_relationships_size:this.readyProperties.relationships_size,ready_experiments_size:this.readyProperties.experiments_size,ready_user_settings_size:this.readyProperties.user_settings_size,ready_remaining_data_size:this.readyProperties.remaining_data_size,ready_guild_channels_size:this.readyProperties.guild_channels_size,ready_guild_members_size:this.readyProperties.guild_members_size,ready_guild_presences_size:this.readyProperties.guild_presences_size,ready_guild_roles_size:this.readyProperties.guild_roles_size,ready_guild_emojis_size:this.readyProperties.guild_emojis_size,ready_guild_remaining_data_size:this.readyProperties.guild_remaining_data_size,ready_guild_threads_size:this.readyProperties.guild_threads_size,ready_guild_stickers_size:this.readyProperties.guild_stickers_size,ready_guild_events_size:this.readyProperties.guild_events_size,ready_guild_features_size:this.readyProperties.guild_features_size,ready_size_metrics_duration_ms:this.readyProperties.size_metrics_duration_ms,had_cache_at_startup:this.readyProperties.had_cache_at_startup,used_cache_at_startup:this.readyProperties.used_cache_at_startup,was_authenticated:this.wasAuthenticated,did_background_app:this.didBackgroundApp,interstitial:this.interstitial,message_cache_missing_reason:this.messageCacheMissingReason,message_cache_age_seconds:this.messageCacheAgeSeconds,message_cache_count:this.messageCacheCount,message_cache_having_count:this.messageCacheHavingCount,message_cache_missing_count:this.messageCacheMissingCount,message_render_full_count:this.messageRenderFullCount,message_render_cached_count:this.messageRenderCachedCount,message_render_has_more_after:this.messageRenderHasMoreAfter,duration_major_js_imports:this.loadImports.end-this.loadIndex.start+f,cache_num_guilds:null===(t=this.cacheInfo)||void 0===t?void 0:t.guilds,cache_num_private_channels:null===(i=this.cacheInfo)||void 0===i?void 0:i.privateChannels,cache_num_basic_channels:null===(r=this.cacheInfo)||void 0===r?void 0:r.basicChannels,cache_num_basic_channels_stale:null===(a=this.cacheInfo)||void 0===a?void 0:a.basicChannelsStale,cache_num_full_channels:null===(o=this.cacheInfo)||void 0===o?void 0:o.fullChannels,cache_num_full_channel_guilds:null===(d=this.cacheInfo)||void 0===d?void 0:d.fullChannelGuilds,num_imports_at_load_index_end:this.loadIndex.endNumImports,num_imports_at_init_end:this.init.endNumImports,num_imports_at_load_mini_cache_end:this.loadMiniCache.endNumImports,num_imports_at_render_app_start:this.renderApp.numImports,num_imports_at_render_app_effect_start:this.renderAppEffect.numImports,num_imports_at_render_messages_end:this.renderMessages.numImports,num_imports_at_render_messages_with_cache_end:this.renderMessagesWithCache.numImports,num_imports_at_render_latest_messages_end:this.renderLatestMessages.numImports,num_imports_at_load_lazy_cache_start:this.loadLazyCache.startNumImports,num_imports_at_load_lazy_cache_end:this.loadLazyCache.endNumImports,num_imports_at_ready_start:this.ready.startNumImports,num_imports_at_ready_end:this.ready.endNumImports,num_imports_at_ready_supplemental_start:this.readySupplemental.startNumImports,num_imports_at_ready_supplemental_end:this.readySupplemental.endNumImports,duration_imports_at_load_index_start:Math.ceil(this.loadIndex.startImportTime),duration_imports_at_load_index_end:Math.ceil(this.loadIndex.endImportTime),duration_imports_at_init_end:Math.ceil(this.init.endImportTime),duration_imports_at_load_mini_cache_end:Math.ceil(this.loadMiniCache.endImportTime),duration_imports_at_render_app_start:Math.ceil(this.renderApp.importTime),duration_imports_at_render_app_effect_start:Math.ceil(this.renderAppEffect.importTime),duration_imports_at_render_messages_end:Math.ceil(this.renderMessages.importTime),duration_imports_at_render_messages_with_cache_end:Math.ceil(this.renderMessagesWithCache.importTime),duration_imports_at_render_latest_messages_end:Math.ceil(this.renderLatestMessages.importTime),duration_imports_at_load_lazy_cache_start:Math.ceil(this.loadLazyCache.startImportTime),duration_imports_at_load_lazy_cache_end:Math.ceil(this.loadLazyCache.endImportTime),duration_imports_at_ready_start:Math.ceil(this.ready.startImportTime),duration_imports_at_ready_end:Math.ceil(this.ready.endImportTime),duration_imports_at_ready_supplemental_start:Math.ceil(this.readySupplemental.startImportTime),duration_imports_at_ready_supplemental_end:Math.ceil(this.readySupplemental.endImportTime),duration_imports_at_polyfills_end:Math.ceil(this.imports.polyfillsEnd.time),duration_imports_at_sentry_end:Math.ceil(this.imports.sentryEnd.time),duration_imports_at_fast_connect_start:Math.ceil(this.beginFastConnect.startImportTime),duration_imports_at_fast_connect_end:Math.ceil(this.beginFastConnect.endImportTime),duration_imports_at_app_state_change_start:Math.ceil(this.imports.appStateChangeStart.time),duration_imports_at_app_state_change_end:Math.ceil(this.imports.appStateChangeEnd.time),duration_imports_at_load_mini_cache_start:Math.ceil(this.imports.loadMiniCacheStart.time),duration_imports_at_load_storage_start:Math.ceil(this.imports.loadStorageStart.time),duration_imports_at_load_storage_end:Math.ceil(this.imports.loadStorageEnd.time)}}"
        }
    }
}