{
    "exports": {
        "default": {
            "initializedCount": 0,
            "actions": {
                "POST_CONNECTION_OPEN": "e=>this.handleConnectionOpen(e)"
            },
            "stores": {
                "toJSON": "function(){return Array.from(this)}",
                "get": "function get() { [native code] }",
                "set": "function set() { [native code] }",
                "has": "function has() { [native code] }",
                "delete": "function delete() { [native code] }",
                "clear": "function clear() { [native code] }",
                "entries": "function entries() { [native code] }",
                "forEach": "function forEach() { [native code] }",
                "keys": "function keys() { [native code] }",
                "size": 0,
                "values": "function values() { [native code] }"
            },
            "handleConnectionOpen": "async e=>{let t=await r.default.fetchChangelogConfig(),n=t.body,o=function(e,t){let n=0,i=null;for(var[r,{min_version:o}]of Object.entries(e))o<=t&&o>n&&(n=o,i=r);return i}(n,(0,E.getClientVersionForChangelog)());if(i.default.dispatch({type:\"CHANGE_LOG_SET_CONFIG\",config:t.body,latestChangelogId:o}),null==o||!0!==n[o].show_on_startup)return;let u=_.default.lastSeenChangelogId(),I=_.default.lastSeenChangelogDate();if(null!=u&&0>=s.default.compare(o,u))return;let T=await r.default.fetchChangelog(o,a.default.locale);if(null!=T){if(null==I||null==_.default.lastSeenChangelogDate()){r.default.markChangelogAsSeen(o,T.date);return}!_.default.isLocked()&&new Date(T.date)>new Date(I)&&(0,l.openChangelog)()}}"
        }
    }
}