{
    "exports": {
        "SearchContext": "class T{setLimit(e){this._limit=e,null!=this._nextQuery&&(this._nextQuery.limit=e)}subscribe(){null!=this._worker&&!this._subscribed&&(this._worker.addEventListener(\"message\",this.handleMessages,!1),this._subscribed=!0,this._setNextQuery())}unsubscribe(){null!=this._worker&&this._subscribed&&(this._worker.removeEventListener(\"message\",this.handleMessages,!1),this._subscribed=!1)}destroy(){this.clearQuery(),this.unsubscribe()}clearQuery(){this._currentQuery=!1,this._nextQuery=null,null!=this._worker&&this._subscribed&&this._worker.postMessage({uuid:this._uuid,type:\"QUERY_CLEAR\"})}setQuery(e,t,s,l){null!=e&&(this._nextQuery={query:e,filters:t,blacklist:s,boosters:null!=l?l:{},limit:this._limit},this._setNextQuery())}_setNextQuery(){(null==this._currentQuery||!1===this._currentQuery)&&null!=this._nextQuery&&(null!=this._worker&&this._subscribed?(this._currentQuery=this._nextQuery,this._nextQuery=null,this._worker.postMessage({uuid:this._uuid,type:\"QUERY_SET\",payload:this._currentQuery})):!this._subscribed&&this.subscribe())}constructor(e,t,s=10){this.handleMessages=e=>{let t=e.data;null!=t&&\"USER_RESULTS\"===t.type&&t.uuid===this._uuid&&(!1!==this._currentQuery&&this._callback(t.payload),null!=this._currentQuery&&(this._currentQuery=null),this._setNextQuery())},this._worker=e,this._uuid=(0,r.v4)(),this._callback=t,this._limit=s,this._currentQuery=null,this._nextQuery=null,this._subscribed=!1,this.subscribe()}}",
        "default": {
            "initializedCount": 0,
            "actions": {
                "LOGOUT": "()=>this._handleLogout()",
                "POST_CONNECTION_OPEN": "()=>this._handleConnectionOpen()",
                "CONNECTION_OPEN_SUPPLEMENTAL": "e=>this._handleConnectionOpenSupplemental(e)",
                "OVERLAY_INITIALIZE": "e=>this._handleOverlayInitialize(e)",
                "CURRENT_USER_UPDATE": "e=>this._handleCurrentUserUpdate(e)",
                "GUILD_CREATE": "e=>this._handleGuildCreate(e)",
                "GUILD_MEMBERS_CHUNK": "e=>this._handleGuildMembersChunk(e)",
                "GUILD_MEMBER_ADD": "e=>this._handleGuildMemberUpdate(e)",
                "GUILD_MEMBER_UPDATE": "e=>this._handleGuildMemberUpdate(e)",
                "RELATIONSHIP_ADD": "e=>this._handleRelationshipAdd(e)",
                "RELATIONSHIP_UPDATE": "e=>this._handleRelationshipUpdate(e)",
                "RELATIONSHIP_REMOVE": "e=>this._handleRelationshipRemove(e)",
                "CHANNEL_CREATE": "e=>this._handleDMCreate(e)",
                "CHANNEL_UPDATES": "e=>this._handleDMUpdates(e)",
                "CHANNEL_RECIPIENT_ADD": "e=>this._handleRecipientChanges(e)",
                "PASSIVE_UPDATE_V1": "e=>this._handlePassiveUpdateV1(e)"
            },
            "stores": {
                "toJSON": "function(){return Array.from(this)}",
                "get": "function get() { [native code] }",
                "set": "function set() { [native code] }",
                "has": "function has() { [native code] }",
                "delete": "function delete() { [native code] }",
                "clear": "function clear() { [native code] }",
                "entries": "function entries() { [native code] }",
                "forEach": "function forEach() { [native code] }",
                "keys": "function keys() { [native code] }",
                "size": 0,
                "values": "function values() { [native code] }"
            },
            "_handleLogout": "()=>{this.rebootWebworker()}",
            "_handleConnectionOpen": "()=>{setTimeout(()=>{let e=p.default.getCurrentUser();if(null==e)return;let t=y(e),s={[t.id]:t};Object.values(p.default.getUsers()).forEach(e=>{s[e.id]=y(e)});let l=d.default.getMutableAllGuildsAndMembers();for(let e in l)for(let t in l[e]){var u,i;let n=s[t],r=null!==(i=null===(u=l[e][t])||void 0===u?void 0:u.nick)&&void 0!==i?i:R.default.getGlobalName(n);null!=n&&(n[e]=null!=r&&\"\"!==r?r:null)}this.updateUsers(Object.values(s))},3e3)}",
            "_handleConnectionOpenSupplemental": "e=>{let{guilds:t}=e;setTimeout(()=>{let e=n.flatMap(t,e=>g(e.members,e.id));this.updateUsers(e)},3e3)}",
            "_handleOverlayInitialize": "e=>{let{users:t,guildMembers:s}=e,l=new Map;for(let e of t)l.set(e.id,y(e));let u=f.default.keys(s);for(let e of u){let t=s[e];if(null==t)continue;let u=Object.keys(t);for(let s of u){let u=l.get(s),i=t[s];null!=u&&null!=i&&null!=i.nick&&(E(u,e,i.nick),l.set(s,u))}}this.updateUsers(Array.from(l.values())),l.clear()}",
            "_handleCurrentUserUpdate": "e=>{let{user:t}=e,s=y(t);null!=s&&this.updateUsers([s])}",
            "_handleGuildCreate": "e=>{let{guild:t}=e,{members:s}=t;this.updateUsers(g(s,t.id))}",
            "_handleGuildMembersChunk": "e=>{let{members:t,guildId:s}=e;this.updateUsers(g(t,s))}",
            "_handleGuildMemberUpdate": "e=>{let{guildId:t,user:s,nick:l}=e,u=y(s);null!=u&&(E(u,t,l),this.updateUsers([u]))}",
            "_handlePassiveUpdateV1": "e=>{null!=e.members&&this.updateUsers(g(e.members,e.guildId))}",
            "_handleRelationshipAdd": "e=>{let t=y(e.relationship.user);this.updateUsers([t])}",
            "_handleRelationshipUpdate": "e=>{let t=y(p.default.getUser(e.relationship.id));this.updateUsers([t])}",
            "_handleRelationshipRemove": "e=>{let t=y(p.default.getUser(e.relationship.id));this.updateUsers([t])}",
            "_handleDMCreate": "e=>{let{channel:{id:t}}=e,s=C(h.default.getChannel(t));if(0===s.length)return;let l=y(p.default.getCurrentUser());E(l,t),s.push(l),this.updateUsers(s)}",
            "_handleDMUpdates": "e=>{let{channels:t}=e;for(let e of t){let t=C(h.default.getChannel(e.id));if(0===t.length)continue;let s=y(p.default.getCurrentUser());E(s,e.id),t.push(s),this.updateUsers(t)}}",
            "_handleRecipientChanges": "e=>{let{channelId:t,user:s,isMember:l}=e;if(!l)return;let u=y(s);E(u,t),this.updateUsers([u])}",
            "_initialize": "_initialize(){this.rebootWebworker()}",
            "_terminate": "_terminate(){null!=this._worker&&(this._worker.terminate(),this._worker=null)}",
            "rebootWebworker": "rebootWebworker(){null!=this._worker&&(this._worker.terminate(),this._worker=null),this._worker=new Worker(new URL(s.p+s.u(\"76730\"),s.b))}",
            "updateUsers": "updateUsers(e){let{_worker:t}=this;null!=t&&(e=e.filter(_.isNotNullish),t.postMessage({type:\"UPDATE_USERS\",payload:e}))}",
            "getSearchContext": "getSearchContext(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:10;this.initialize();let{_worker:s}=this;if(null==s)throw Error(\"SearchContextManager: No webworker initialized\");return new T(s,e,t)}"
        }
    }
}