{
    "exports": {
        "Globals": {
            "assign": "function(e){var t;return a=(t=Object.assign({to:a,now:s,frameLoop:u,colorNames:l,skipAnimation:c,createStringInterpolator:r,requestAnimationFrame:d,batchedUpdates:f,willAdvance:p},function(e){var t={};for(var n in e)void 0!==e[n]&&(t[n]=e[n]);return t}(e))).to,s=t.now,u=t.frameLoop,l=t.colorNames,c=t.skipAnimation,r=t.createStringInterpolator,d=t.requestAnimationFrame,f=t.batchedUpdates,p=t.willAdvance,t}",
            "batchedUpdates": "function uC(e,t){var n=i5;i5|=1;try{return e(t)}finally{0===(i5=n)&&(ul=eQ()+500,r4&&r5())}}",
            "colorNames": {
                "transparent": 0,
                "aliceblue": 4042850303,
                "antiquewhite": 4209760255,
                "aqua": 16777215,
                "aquamarine": 2147472639,
                "azure": 4043309055,
                "beige": 4126530815,
                "bisque": 4293182719,
                "black": 255,
                "blanchedalmond": 4293643775,
                "blue": 65535,
                "blueviolet": 2318131967,
                "brown": 2771004159,
                "burlywood": 3736635391,
                "burntsienna": 3934150143,
                "cadetblue": 1604231423,
                "chartreuse": 2147418367,
                "chocolate": 3530104575,
                "coral": 4286533887,
                "cornflowerblue": 1687547391,
                "cornsilk": 4294499583,
                "crimson": 3692313855,
                "cyan": 16777215,
                "darkblue": 35839,
                "darkcyan": 9145343,
                "darkgoldenrod": 3095792639,
                "darkgray": 2846468607,
                "darkgreen": 6553855,
                "darkgrey": 2846468607,
                "darkkhaki": 3182914559,
                "darkmagenta": 2332068863,
                "darkolivegreen": 1433087999,
                "darkorange": 4287365375,
                "darkorchid": 2570243327,
                "darkred": 2332033279,
                "darksalmon": 3918953215,
                "darkseagreen": 2411499519,
                "darkslateblue": 1211993087,
                "darkslategray": 793726975,
                "darkslategrey": 793726975,
                "darkturquoise": 13554175,
                "darkviolet": 2483082239,
                "deeppink": 4279538687,
                "deepskyblue": 12582911,
                "dimgray": 1768516095,
                "dimgrey": 1768516095,
                "dodgerblue": 512819199,
                "firebrick": 2988581631,
                "floralwhite": 4294635775,
                "forestgreen": 579543807,
                "fuchsia": 4278255615,
                "gainsboro": 3705462015,
                "ghostwhite": 4177068031,
                "gold": 4292280575,
                "goldenrod": 3668254975,
                "gray": 2155905279,
                "green": 8388863,
                "greenyellow": 2919182335,
                "grey": 2155905279,
                "honeydew": 4043305215,
                "hotpink": 4285117695,
                "indianred": 3445382399,
                "indigo": 1258324735,
                "ivory": 4294963455,
                "khaki": 4041641215,
                "lavender": 3873897215,
                "lavenderblush": 4293981695,
                "lawngreen": 2096890111,
                "lemonchiffon": 4294626815,
                "lightblue": 2916673279,
                "lightcoral": 4034953471,
                "lightcyan": 3774873599,
                "lightgoldenrodyellow": 4210742015,
                "lightgray": 3553874943,
                "lightgreen": 2431553791,
                "lightgrey": 3553874943,
                "lightpink": 4290167295,
                "lightsalmon": 4288707327,
                "lightseagreen": 548580095,
                "lightskyblue": 2278488831,
                "lightslategray": 2005441023,
                "lightslategrey": 2005441023,
                "lightsteelblue": 2965692159,
                "lightyellow": 4294959359,
                "lime": 16711935,
                "limegreen": 852308735,
                "linen": 4210091775,
                "magenta": 4278255615,
                "maroon": 2147483903,
                "mediumaquamarine": 1724754687,
                "mediumblue": 52735,
                "mediumorchid": 3126187007,
                "mediumpurple": 2473647103,
                "mediumseagreen": 1018393087,
                "mediumslateblue": 2070474495,
                "mediumspringgreen": 16423679,
                "mediumturquoise": 1221709055,
                "mediumvioletred": 3340076543,
                "midnightblue": 421097727,
                "mintcream": 4127193855,
                "mistyrose": 4293190143,
                "moccasin": 4293178879,
                "navajowhite": 4292783615,
                "navy": 33023,
                "oldlace": 4260751103,
                "olive": 2155872511,
                "olivedrab": 1804477439,
                "orange": 4289003775,
                "orangered": 4282712319,
                "orchid": 3664828159,
                "palegoldenrod": 4008225535,
                "palegreen": 2566625535,
                "paleturquoise": 2951671551,
                "palevioletred": 3681588223,
                "papayawhip": 4293907967,
                "peachpuff": 4292524543,
                "peru": 3448061951,
                "pink": 4290825215,
                "plum": 3718307327,
                "powderblue": 2967529215,
                "purple": 2147516671,
                "rebeccapurple": 1714657791,
                "red": 4278190335,
                "rosybrown": 3163525119,
                "royalblue": 1097458175,
                "saddlebrown": 2336560127,
                "salmon": 4202722047,
                "sandybrown": 4104413439,
                "seagreen": 780883967,
                "seashell": 4294307583,
                "sienna": 2689740287,
                "silver": 3233857791,
                "skyblue": 2278484991,
                "slateblue": 1784335871,
                "slategray": 1887473919,
                "slategrey": 1887473919,
                "snow": 4294638335,
                "springgreen": 16744447,
                "steelblue": 1182971135,
                "tan": 3535047935,
                "teal": 8421631,
                "thistle": 3636451583,
                "tomato": 4284696575,
                "turquoise": 1088475391,
                "violet": 4001558271,
                "wheat": 4125012991,
                "white": 4294967295,
                "whitesmoke": 4126537215,
                "yellow": 4294902015,
                "yellowgreen": 2597139199
            },
            "createStringInterpolator": "function(e){!r&&(r=s.colorNames?RegExp(\"(\"+Object.keys(s.colorNames).join(\"|\")+\")\",\"g\"):/^\\b$/);var t=e.output.map(function(e){return(0,o.getFluidValue)(e).replace(c,u.colorToRgba).replace(r,u.colorToRgba)}),n=t.map(function(e){return e.match(l).map(Number)}),p=n[0].map(function(e,t){return n.map(function(e){if(!(t in e))throw Error('The arity of each \"output\" value must be equal');return e[t]})}).map(function(t){return(0,i.createInterpolator)((0,a.__assign)((0,a.__assign)({},e),{output:t}))});return function(e){var n=0;return t[0].replace(l,function(){return String(p[n++](e))}).replace(d,f)}}",
            "frameLoop": {
                "setTimeout": "(e,t)=>{let n=i.Globals.now()+t,r=()=>{let e=this.timeoutQueue.findIndex(e=>e.cancel===r);e>=0&&this.timeoutQueue.splice(e,1)},a=o(this.timeoutQueue,e=>e.time>n),s={time:n,handler:e,cancel:r};return this.timeoutQueue.splice(a,0,s),this.startLoop(),s}",
                "advance": "()=>{let e=i.Globals.now();if(this.startQueue.size>0&&(this.startQueue.forEach(this.addAnimation),this.startQueue.clear()),this.timeoutQueue.length>0&&i.Globals.batchedUpdates(()=>{let t=o(this.timeoutQueue,t=>t.time>e);this.timeoutQueue.splice(0,t).forEach(e=>e.handler())}),e>this.lastTime){let t=Math.min(64,e-this.lastTime);this.lastTime=e,i.Globals.batchedUpdates(()=>{this.animations.length>0&&(i.Globals.willAdvance(this.animations),this.animations=this.animations.filter(e=>(this.priority=e.priority,!e.idle&&e.advance(t),!e.idle)),this.priority=0),this.frameQueue.size>0&&(this.frameQueue.forEach(t=>t(e)),this.frameQueue.clear()),this.writeQueue.size>0&&(this.writing=!0,this.writeQueue.forEach(t=>t(e)),this.writeQueue.clear(),this.writing=!1)})}}",
                "start": "e=>{this.priority>e.priority?this.startQueue.add(e):(this.addAnimation(e),this.startLoop())}",
                "onFrame": "e=>{this.frameQueue.add(e),this.startLoop()}",
                "onWrite": "e=>{this.writing?e(this.lastTime):this.writeQueue.add(e)}",
                "_requestAnimationFrame": "e=>requestAnimationFrame(e)",
                "_cancelAnimationFrame": "e=>cancelAnimationFrame(e)",
                "writing": false,
                "id": 5,
                "lastTime": 1096.5,
                "animations": [
                    {
                        "id": 1,
                        "key": "background",
                        "_priority": 0,
                        "_children": {
                            "toJSON": "function(){return Array.from(this)}",
                            "has": "function has() { [native code] }",
                            "add": "function add() { [native code] }",
                            "delete": "function delete() { [native code] }",
                            "clear": "function clear() { [native code] }",
                            "entries": "function entries() { [native code] }",
                            "forEach": "function forEach() { [native code] }",
                            "size": 1,
                            "values": "function values() { [native code] }",
                            "keys": "function values() { [native code] }",
                            "union": "function union() { [native code] }",
                            "intersection": "function intersection() { [native code] }",
                            "difference": "function difference() { [native code] }",
                            "symmetricDifference": "function symmetricDifference() { [native code] }",
                            "isSubsetOf": "function isSubsetOf() { [native code] }",
                            "isSupersetOf": "function isSupersetOf() { [native code] }",
                            "isDisjointFrom": "function isDisjointFrom() { [native code] }"
                        },
                        "animation": {
                            "changed": true,
                            "values": [
                                {
                                    "_value": 0.21466666666664727,
                                    "done": false,
                                    "elapsedTime": 64.39999999999418,
                                    "lastPosition": 0.21466666666664727,
                                    "lastVelocity": 0.0033333333333333344,
                                    "v0": 0,
                                    "_string": "rgba(0, 0, 0, 0.15068758169933277)",
                                    "_toString": "function(e){var n=0;return t[0].replace(l,function(){return String(p[n++](e))}).replace(d,f)}",
                                    "constructor": "function t(t,n){var r;return(r=e.call(this,0)||this)._value=void 0,r._string=null,r._toString=void 0,r._toString=a.createInterpolator({output:[t,n]}),r}",
                                    "getValue": "function(){var e=this._string;return null==e?this._string=this._toString(this._value):e}",
                                    "setValue": "function(t){if(a.is.num(t)){if(!e.prototype.setValue.call(this,t))return!1;else this._string=null}else this._string=t,this._value=1;return!0}",
                                    "reset": "function(t){t&&(this._toString=a.createInterpolator({output:[this.getValue(),t]})),this._value=0,e.prototype.reset.call(this)}",
                                    "getPayload": "function(){return[this]}"
                                }
                            ],
                            "toValues": [
                                1
                            ],
                            "fromValues": [
                                0
                            ],
                            "to": "#000000b3",
                            "from": "#00000000",
                            "config": {
                                "tension": 170,
                                "friction": 26,
                                "damping": 1,
                                "mass": 1,
                                "velocity": 0,
                                "duration": 300,
                                "easing": "function(e){return e}",
                                "clamp": false
                            },
                            "immediate": false,
                            "onRest": [
                                "function(r){if(r)e(z(t));else{var a=F(n),i=F(t.get());e(H(t,o.isEqual(i,a)))}}",
                                "function(r){if(r)e(z(t));else{var a=F(n),i=F(t.get());e(H(t,o.isEqual(i,a)))}}"
                            ]
                        },
                        "_phase": "ACTIVE",
                        "_state": {
                            "pauseQueue": {
                                "toJSON": "function(){return Array.from(this)}",
                                "has": "function has() { [native code] }",
                                "add": "function add() { [native code] }",
                                "delete": "function delete() { [native code] }",
                                "clear": "function clear() { [native code] }",
                                "entries": "function entries() { [native code] }",
                                "forEach": "function forEach() { [native code] }",
                                "size": 0,
                                "values": "function values() { [native code] }",
                                "keys": "function values() { [native code] }",
                                "union": "function union() { [native code] }",
                                "intersection": "function intersection() { [native code] }",
                                "difference": "function difference() { [native code] }",
                                "symmetricDifference": "function symmetricDifference() { [native code] }",
                                "isSubsetOf": "function isSubsetOf() { [native code] }",
                                "isSupersetOf": "function isSupersetOf() { [native code] }",
                                "isDisjointFrom": "function isDisjointFrom() { [native code] }"
                            },
                            "resumeQueue": {
                                "toJSON": "function(){return Array.from(this)}",
                                "has": "function has() { [native code] }",
                                "add": "function add() { [native code] }",
                                "delete": "function delete() { [native code] }",
                                "clear": "function clear() { [native code] }",
                                "entries": "function entries() { [native code] }",
                                "forEach": "function forEach() { [native code] }",
                                "size": 0,
                                "values": "function values() { [native code] }",
                                "keys": "function values() { [native code] }",
                                "union": "function union() { [native code] }",
                                "intersection": "function intersection() { [native code] }",
                                "difference": "function difference() { [native code] }",
                                "symmetricDifference": "function symmetricDifference() { [native code] }",
                                "isSubsetOf": "function isSubsetOf() { [native code] }",
                                "isSupersetOf": "function isSupersetOf() { [native code] }",
                                "isDisjointFrom": "function isDisjointFrom() { [native code] }"
                            }
                        },
                        "_defaultProps": {},
                        "_lastCallId": 2,
                        "_lastToId": 2,
                        "constructor": "function t(t,n){var r;if((r=e.call(this)||this).key=void 0,r.animation=new S,r.queue=void 0,r._phase=Z,r._state={pauseQueue:new Set,resumeQueue:new Set},r._defaultProps={},r._lastCallId=0,r._lastToId=0,!o.is.und(t)||!o.is.und(n)){var a=o.is.obj(t)?i({},t):i(i({},n),{},{from:t});a.default=!0,r.start(a)}return r}",
                        "advance": "function(e){var t=this,n=!0,r=!1,a=this.animation,i=a.config,u=a.toValues,s=f.getPayload(a.to);if(!s){var l=o.getFluidConfig(a.to);l&&(u=o.toArray(l.get()))}return a.values.forEach(function(l,c){if(!l.done){var d=s?s[c].lastPosition:u[c],f=a.immediate,p=d;if(!f){if(p=l.lastPosition,i.tension<=0){l.done=!0;return}var h=l.elapsedTime+=e,m=a.fromValues[c],y=null!=l.v0?l.v0:l.v0=o.is.arr(i.velocity)?i.velocity[c]:i.velocity;if(o.is.und(i.duration)){if(i.decay){var v=!0===i.decay?.998:i.decay,g=Math.exp(-(1-v)*h);p=m+y/(1-v)*(1-g),f=.1>Math.abs(l.lastPosition-p),b=y*g}else{b=null==l.lastVelocity?y:l.lastVelocity;for(var b,_=i.precision||(m==d?.005:Math.min(1,.001*Math.abs(d-m))),w=i.restVelocity||_/10,x=i.clamp?0:i.bounce,D=!o.is.und(x),k=m==d?l.v0>0:m<d,M=!1,S=Math.ceil(e/1),T=0;T<S&&!(!(Math.abs(b)>w)&&(f=Math.abs(d-p)<=_));++T){;D&&(M=p==d||p>d==k)&&(b=-b*x,p=d);var E=(-(1e-6*i.tension)*(p-d)+-(.001*i.friction)*b)/i.mass;b+=1*E,p+=1*b}}}else{var L=i.progress||0;i.duration<=0?L=1:L+=(1-L)*Math.min(1,h/i.duration),b=((p=m+i.easing(L)*(d-m))-l.lastPosition)/e,f=1==L}l.lastVelocity=b,Number.isNaN(p)&&(console.warn(\"Got NaN while animating:\",t),f=!0)}s&&!s[c].done&&(f=!1),f?l.done=!0:n=!1,l.setValue(p,i.round)&&(r=!0)}}),n?this.finish():r&&this._onChange(this.get()),n}",
                        "is": "function(e){return this._phase==e}",
                        "set": "function(e){var t=this;return p.batchedUpdates(function(){if(t._focus(e),t._set(e)&&!t.is(Q))return t._onChange(t.get(),!0);t._stop()}),this}",
                        "pause": "function(){er(this,\"pause\"),!this.is(ee)&&(this._phase=ee,o.flush(this._state.pauseQueue,function(e){return e()}))}",
                        "resume": "function(){er(this,\"resume\"),this.is(ee)&&(this._start(),o.flush(this._state.resumeQueue,function(e){return e()}))}",
                        "finish": "function(e){var t=this;if(this.resume(),this.is(Q)){var n=this.animation;!n.config.decay&&o.is.und(e)&&(e=n.to),!o.is.und(e)&&this._set(e),p.batchedUpdates(function(){!n.changed&&(n.changed=!0,n.onStart&&n.onStart(t)),t._stop()})}return this}",
                        "update": "function(e){return er(this,\"update\"),(this.queue||(this.queue=[])).push(e),this}",
                        "start": "function(e,t){return n.apply(this,arguments)}",
                        "stop": "function(e){var t=this;return!this.is(et)&&(U(this._state,this._lastCallId),this._focus(this.get()),p.batchedUpdates(function(){return t._stop(e)})),this}",
                        "reset": "function(){this._update({reset:!0})}",
                        "dispose": "function(){!this.is(et)&&(this.animation&&(this.animation.onRest=[]),this.stop(),this._phase=et)}",
                        "onParentChange": "function(t){e.prototype.onParentChange.call(this,t),\"change\"==t.type?!this.is(Q)&&(this._reset(),!this.is(ee)&&this._start()):\"priority\"==t.type&&(this.priority=t.priority+1)}",
                        "_prepareNode": "function(e){var t=e.to,n=e.from,r=e.reverse,a=this.key||\"\";t=!o.is.obj(t)||o.getFluidConfig(t)?t:t[a];var i={to:t,from:n=!o.is.obj(n)||o.getFluidConfig(n)?n:n[a]};if(this.is(Z)){if(r){var u=[n,t];t=u[0],n=u[1]}n=o.getFluidValue(n);var s=this._updateNode(o.is.und(n)?o.getFluidValue(t):n);s&&!o.is.und(n)&&s.setValue(n)}return i}",
                        "_updateNode": "function(e){var t=f.getAnimated(this);if(!o.is.und(e)){var n=this._getNodeType(e);(!t||t.constructor!==n)&&f.setAnimated(this,t=n.create(e))}return t}",
                        "_getNodeType": "function(e){var t=f.getAnimated(e);return t?t.constructor:o.is.arr(e)?f.AnimatedArray:o.isAnimatedString(e)?f.AnimatedString:f.AnimatedValue}",
                        "_update": "function(e,t){var n=this,r=this._defaultProps,a=function(t){var n=O(e,t);!o.is.und(n)&&(r[t]=n),r[t]&&(e[t]=r[t])};a(\"cancel\"),a(\"pause\");var i=this._prepareNode(e);return Y(++this._lastCallId,{key:this.key,props:e,state:this._state,actions:{pause:this.pause.bind(this),resume:this.resume.bind(this),start:this._merge.bind(this,i)}}).then(function(r){if(e.loop&&r.finished&&!(t&&r.noop)){var a=ei(e);if(a)return n._update(a,!0)}return r})}",
                        "_merge": "function(e,t,n){if(t.cancel)return this.stop(!0),n(z(this));var r=this.key,a=this.animation,u=this._defaultProps,s=!o.is.und(e.to),l=!o.is.und(e.from);if(s||l){if(!(t.callId>this._lastToId))return n(z(this));this._lastToId=t.callId}var c=function(e){return o.is.und(t[e])?u[e]:t[e]},d=ea(c(\"onDelayEnd\"),r);if(d&&d(t,this),t.default)A(t,[\"pause\",\"cancel\"],u);var h=a.to,m=a.from,y=e.to,v=void 0===y?h:y,g=e.from,b=void 0===g?m:g;if(l&&!s&&(v=b),t.reverse){var _=[b,v];v=_[0],b=_[1]}var w=!o.isEqual(b,m);w&&(a.from=b);var D=!o.isEqual(v,h);D&&this._focus(v);var M=o.getFluidConfig(v),S=o.getFluidConfig(b);S&&(b=S.get());var T=o.is.arr(t.to)||o.is.fun(t.to),E=a.config,P=E.decay,O=E.velocity;t.config&&!T&&!function(e,t,n){for(var r in n&&(k(n=i({},n),t),t=i(i({},n),t)),k(e,t),Object.assign(e,t),x)null==e[r]&&(e[r]=x[r]);var a=e.mass,u=e.frequency,s=e.damping;!o.is.und(u)&&(u<.01&&(u=.01),s<0&&(s=0),e.tension=Math.pow(2*Math.PI/u,2)*a,e.friction=4*Math.PI*s*a/u)}(E,L(t.config,r),t.config!==u.config?L(u.config,r):void 0);var R=f.getAnimated(this);if(!R||o.is.und(v))return n(H(this,!0));var I=o.is.und(t.reset)?l&&!t.default:!o.is.und(b)&&C(t.reset,r),j=I?b:this.get(),Y=F(v),N=o.is.num(Y)||o.is.arr(Y)||o.isAnimatedString(Y),$=!T&&(!N||C(u.immediate||t.immediate,r));if(D){if($)R=this._updateNode(Y);else{var V=this._getNodeType(v);if(V!==R.constructor)throw Error(\"Cannot animate between \"+R.constructor.name+\" and \"+V.name+', as the \"to\" prop suggests')}}var U=R.constructor,W=!!M,G=!1;if(!W){var q=I||this.is(Z)&&w;(D||q)&&(W=!(G=o.isEqual(F(j),Y))),(!o.isEqual(E.decay,P)||!o.isEqual(E.velocity,O))&&(W=!0)}if(G&&this.is(Q)&&(a.changed&&!I?W=!0:!W&&this._stop()),!T){(W||o.getFluidConfig(h))&&(a.values=R.getPayload(),a.toValues=M?null:U==f.AnimatedString?[1]:o.toArray(Y)),a.immediate=$,a.onStart=ea(c(\"onStart\"),r),a.onChange=ea(c(\"onChange\"),r);var J=a.onRest,ee=I&&!t.onRest?J[0]||o.noop:eo(ea(c(\"onRest\"),r),this);if(W){a.onRest=[ee,eo(n,this)];var et=I?0:1;et<J.length&&p.batchedUpdates(function(){for(;et<J.length;et++)J[et]()})}else(I||t.onRest)&&(a.onRest[0]=ee)}var en=ea(c(\"onProps\"),r);if(en&&en(t,this),I&&R.setValue(j),T)n(K(t.to,t,this._state,this));else if(W)I&&(this._phase=X),this._reset(),this._start();else if(this.is(Q)&&!D)a.onRest.push(eo(n,this));else{let e=B(this,j),t=ea(c(\"onNoopRest\"),r);null!=t&&t(e),n(e)}}",
                        "_focus": "function(e){var t=this.animation;if(e!==t.to){var n=o.getFluidConfig(t.to);n&&n.removeChild(this),t.to=e;var r=0;(n=o.getFluidConfig(e))&&(n.addChild(this),G(e)&&(r=(e.priority||0)+1)),this.priority=r}}",
                        "_set": "function(e){var t=o.getFluidConfig(e);t&&(e=t.get());var n=f.getAnimated(this),r=n&&n.getValue();return n?n.setValue(e):this._updateNode(e),!o.isEqual(e,r)}",
                        "_onChange": "function(t,n){void 0===n&&(n=!1);var r=this.animation;!r.changed&&!n&&(r.changed=!0,r.onStart&&r.onStart(this)),r.onChange&&r.onChange(t,this),e.prototype._onChange.call(this,t,n)}",
                        "_reset": "function(){var t=this.animation;f.getAnimated(this).reset(t.to),!this.is(Q)&&(t.changed=!1),!t.immediate&&(t.fromValues=t.values.map(function(e){return e.lastPosition})),e.prototype._reset.call(this)}",
                        "_start": "function(){!this.is(Q)&&(this._phase=Q,e.prototype._start.call(this),p.skipAnimation?this.finish():p.frameLoop.start(this))}",
                        "_stop": "function(e){if(this.resume(),this.is(Q)){this._phase=X,this._onChange(this.get(),!0);var t=this.animation;o.each(t.values,function(e){e.done=!0});var n=t.onRest;n.length&&(t.onRest=[t.toValues?o.noop:n[0]],!t.changed&&(n[0]=o.noop),o.each(n,function(t){return t(e)}))}}",
                        "get": "function(){var e=f.getAnimated(this);return e&&e.getValue()}",
                        "to": "function(){for(var e=arguments.length,t=Array(e),n=0;n<e;n++)t[n]=arguments[n];return p.to(this,t)}",
                        "interpolate": "function(){y.deprecateInterpolate();for(var e=arguments.length,t=Array(e),n=0;n<e;n++)t[n]=arguments[n];return p.to(this,t)}",
                        "addChild": "function(e){!this._children.size&&this._attach(),this._children.add(e)}",
                        "removeChild": "function(e){this._children.delete(e),!this._children.size&&this._detach()}",
                        "_attach": "function(){}",
                        "_detach": "function(){}",
                        "_onPriorityChange": "function(e){!this.idle&&p.frameLoop.start(this),this._emit({type:\"priority\",parent:this,priority:e})}",
                        "_emit": "function(e){o.each(Array.from(this._children),function(t){t.onParentChange(e)})}",
                        "idle": false,
                        "goal": "#000000b3",
                        "velocity": 0.0033333333333333344
                    },
                    {
                        "id": 3,
                        "key": "background",
                        "_priority": 0,
                        "_children": {
                            "toJSON": "function(){return Array.from(this)}",
                            "has": "function has() { [native code] }",
                            "add": "function add() { [native code] }",
                            "delete": "function delete() { [native code] }",
                            "clear": "function clear() { [native code] }",
                            "entries": "function entries() { [native code] }",
                            "forEach": "function forEach() { [native code] }",
                            "size": 1,
                            "values": "function values() { [native code] }",
                            "keys": "function values() { [native code] }",
                            "union": "function union() { [native code] }",
                            "intersection": "function intersection() { [native code] }",
                            "difference": "function difference() { [native code] }",
                            "symmetricDifference": "function symmetricDifference() { [native code] }",
                            "isSubsetOf": "function isSubsetOf() { [native code] }",
                            "isSupersetOf": "function isSupersetOf() { [native code] }",
                            "isDisjointFrom": "function isDisjointFrom() { [native code] }"
                        },
                        "animation": {
                            "changed": true,
                            "values": [
                                {
                                    "_value": 0.21466666666664727,
                                    "done": false,
                                    "elapsedTime": 64.39999999999418,
                                    "lastPosition": 0.21466666666664727,
                                    "lastVelocity": 0.0033333333333333344,
                                    "v0": 0,
                                    "_string": "rgba(0, 0, 0, 0.15068758169933277)",
                                    "_toString": "function(e){var n=0;return t[0].replace(l,function(){return String(p[n++](e))}).replace(d,f)}",
                                    "constructor": "function t(t,n){var r;return(r=e.call(this,0)||this)._value=void 0,r._string=null,r._toString=void 0,r._toString=a.createInterpolator({output:[t,n]}),r}",
                                    "getValue": "function(){var e=this._string;return null==e?this._string=this._toString(this._value):e}",
                                    "setValue": "function(t){if(a.is.num(t)){if(!e.prototype.setValue.call(this,t))return!1;else this._string=null}else this._string=t,this._value=1;return!0}",
                                    "reset": "function(t){t&&(this._toString=a.createInterpolator({output:[this.getValue(),t]})),this._value=0,e.prototype.reset.call(this)}",
                                    "getPayload": "function(){return[this]}"
                                }
                            ],
                            "toValues": [
                                1
                            ],
                            "fromValues": [
                                0
                            ],
                            "to": "#000000b3",
                            "from": "#00000000",
                            "config": {
                                "tension": 170,
                                "friction": 26,
                                "damping": 1,
                                "mass": 1,
                                "velocity": 0,
                                "duration": 300,
                                "easing": "function(e){return e}",
                                "clamp": false
                            },
                            "immediate": false,
                            "onRest": [
                                "function(r){if(r)e(z(t));else{var a=F(n),i=F(t.get());e(H(t,o.isEqual(i,a)))}}",
                                "function(r){if(r)e(z(t));else{var a=F(n),i=F(t.get());e(H(t,o.isEqual(i,a)))}}"
                            ]
                        },
                        "_phase": "ACTIVE",
                        "_state": {
                            "pauseQueue": {
                                "toJSON": "function(){return Array.from(this)}",
                                "has": "function has() { [native code] }",
                                "add": "function add() { [native code] }",
                                "delete": "function delete() { [native code] }",
                                "clear": "function clear() { [native code] }",
                                "entries": "function entries() { [native code] }",
                                "forEach": "function forEach() { [native code] }",
                                "size": 0,
                                "values": "function values() { [native code] }",
                                "keys": "function values() { [native code] }",
                                "union": "function union() { [native code] }",
                                "intersection": "function intersection() { [native code] }",
                                "difference": "function difference() { [native code] }",
                                "symmetricDifference": "function symmetricDifference() { [native code] }",
                                "isSubsetOf": "function isSubsetOf() { [native code] }",
                                "isSupersetOf": "function isSupersetOf() { [native code] }",
                                "isDisjointFrom": "function isDisjointFrom() { [native code] }"
                            },
                            "resumeQueue": {
                                "toJSON": "function(){return Array.from(this)}",
                                "has": "function has() { [native code] }",
                                "add": "function add() { [native code] }",
                                "delete": "function delete() { [native code] }",
                                "clear": "function clear() { [native code] }",
                                "entries": "function entries() { [native code] }",
                                "forEach": "function forEach() { [native code] }",
                                "size": 0,
                                "values": "function values() { [native code] }",
                                "keys": "function values() { [native code] }",
                                "union": "function union() { [native code] }",
                                "intersection": "function intersection() { [native code] }",
                                "difference": "function difference() { [native code] }",
                                "symmetricDifference": "function symmetricDifference() { [native code] }",
                                "isSubsetOf": "function isSubsetOf() { [native code] }",
                                "isSupersetOf": "function isSupersetOf() { [native code] }",
                                "isDisjointFrom": "function isDisjointFrom() { [native code] }"
                            }
                        },
                        "_defaultProps": {},
                        "_lastCallId": 2,
                        "_lastToId": 2,
                        "constructor": "function t(t,n){var r;if((r=e.call(this)||this).key=void 0,r.animation=new S,r.queue=void 0,r._phase=Z,r._state={pauseQueue:new Set,resumeQueue:new Set},r._defaultProps={},r._lastCallId=0,r._lastToId=0,!o.is.und(t)||!o.is.und(n)){var a=o.is.obj(t)?i({},t):i(i({},n),{},{from:t});a.default=!0,r.start(a)}return r}",
                        "advance": "function(e){var t=this,n=!0,r=!1,a=this.animation,i=a.config,u=a.toValues,s=f.getPayload(a.to);if(!s){var l=o.getFluidConfig(a.to);l&&(u=o.toArray(l.get()))}return a.values.forEach(function(l,c){if(!l.done){var d=s?s[c].lastPosition:u[c],f=a.immediate,p=d;if(!f){if(p=l.lastPosition,i.tension<=0){l.done=!0;return}var h=l.elapsedTime+=e,m=a.fromValues[c],y=null!=l.v0?l.v0:l.v0=o.is.arr(i.velocity)?i.velocity[c]:i.velocity;if(o.is.und(i.duration)){if(i.decay){var v=!0===i.decay?.998:i.decay,g=Math.exp(-(1-v)*h);p=m+y/(1-v)*(1-g),f=.1>Math.abs(l.lastPosition-p),b=y*g}else{b=null==l.lastVelocity?y:l.lastVelocity;for(var b,_=i.precision||(m==d?.005:Math.min(1,.001*Math.abs(d-m))),w=i.restVelocity||_/10,x=i.clamp?0:i.bounce,D=!o.is.und(x),k=m==d?l.v0>0:m<d,M=!1,S=Math.ceil(e/1),T=0;T<S&&!(!(Math.abs(b)>w)&&(f=Math.abs(d-p)<=_));++T){;D&&(M=p==d||p>d==k)&&(b=-b*x,p=d);var E=(-(1e-6*i.tension)*(p-d)+-(.001*i.friction)*b)/i.mass;b+=1*E,p+=1*b}}}else{var L=i.progress||0;i.duration<=0?L=1:L+=(1-L)*Math.min(1,h/i.duration),b=((p=m+i.easing(L)*(d-m))-l.lastPosition)/e,f=1==L}l.lastVelocity=b,Number.isNaN(p)&&(console.warn(\"Got NaN while animating:\",t),f=!0)}s&&!s[c].done&&(f=!1),f?l.done=!0:n=!1,l.setValue(p,i.round)&&(r=!0)}}),n?this.finish():r&&this._onChange(this.get()),n}",
                        "is": "function(e){return this._phase==e}",
                        "set": "function(e){var t=this;return p.batchedUpdates(function(){if(t._focus(e),t._set(e)&&!t.is(Q))return t._onChange(t.get(),!0);t._stop()}),this}",
                        "pause": "function(){er(this,\"pause\"),!this.is(ee)&&(this._phase=ee,o.flush(this._state.pauseQueue,function(e){return e()}))}",
                        "resume": "function(){er(this,\"resume\"),this.is(ee)&&(this._start(),o.flush(this._state.resumeQueue,function(e){return e()}))}",
                        "finish": "function(e){var t=this;if(this.resume(),this.is(Q)){var n=this.animation;!n.config.decay&&o.is.und(e)&&(e=n.to),!o.is.und(e)&&this._set(e),p.batchedUpdates(function(){!n.changed&&(n.changed=!0,n.onStart&&n.onStart(t)),t._stop()})}return this}",
                        "update": "function(e){return er(this,\"update\"),(this.queue||(this.queue=[])).push(e),this}",
                        "start": "function(e,t){return n.apply(this,arguments)}",
                        "stop": "function(e){var t=this;return!this.is(et)&&(U(this._state,this._lastCallId),this._focus(this.get()),p.batchedUpdates(function(){return t._stop(e)})),this}",
                        "reset": "function(){this._update({reset:!0})}",
                        "dispose": "function(){!this.is(et)&&(this.animation&&(this.animation.onRest=[]),this.stop(),this._phase=et)}",
                        "onParentChange": "function(t){e.prototype.onParentChange.call(this,t),\"change\"==t.type?!this.is(Q)&&(this._reset(),!this.is(ee)&&this._start()):\"priority\"==t.type&&(this.priority=t.priority+1)}",
                        "_prepareNode": "function(e){var t=e.to,n=e.from,r=e.reverse,a=this.key||\"\";t=!o.is.obj(t)||o.getFluidConfig(t)?t:t[a];var i={to:t,from:n=!o.is.obj(n)||o.getFluidConfig(n)?n:n[a]};if(this.is(Z)){if(r){var u=[n,t];t=u[0],n=u[1]}n=o.getFluidValue(n);var s=this._updateNode(o.is.und(n)?o.getFluidValue(t):n);s&&!o.is.und(n)&&s.setValue(n)}return i}",
                        "_updateNode": "function(e){var t=f.getAnimated(this);if(!o.is.und(e)){var n=this._getNodeType(e);(!t||t.constructor!==n)&&f.setAnimated(this,t=n.create(e))}return t}",
                        "_getNodeType": "function(e){var t=f.getAnimated(e);return t?t.constructor:o.is.arr(e)?f.AnimatedArray:o.isAnimatedString(e)?f.AnimatedString:f.AnimatedValue}",
                        "_update": "function(e,t){var n=this,r=this._defaultProps,a=function(t){var n=O(e,t);!o.is.und(n)&&(r[t]=n),r[t]&&(e[t]=r[t])};a(\"cancel\"),a(\"pause\");var i=this._prepareNode(e);return Y(++this._lastCallId,{key:this.key,props:e,state:this._state,actions:{pause:this.pause.bind(this),resume:this.resume.bind(this),start:this._merge.bind(this,i)}}).then(function(r){if(e.loop&&r.finished&&!(t&&r.noop)){var a=ei(e);if(a)return n._update(a,!0)}return r})}",
                        "_merge": "function(e,t,n){if(t.cancel)return this.stop(!0),n(z(this));var r=this.key,a=this.animation,u=this._defaultProps,s=!o.is.und(e.to),l=!o.is.und(e.from);if(s||l){if(!(t.callId>this._lastToId))return n(z(this));this._lastToId=t.callId}var c=function(e){return o.is.und(t[e])?u[e]:t[e]},d=ea(c(\"onDelayEnd\"),r);if(d&&d(t,this),t.default)A(t,[\"pause\",\"cancel\"],u);var h=a.to,m=a.from,y=e.to,v=void 0===y?h:y,g=e.from,b=void 0===g?m:g;if(l&&!s&&(v=b),t.reverse){var _=[b,v];v=_[0],b=_[1]}var w=!o.isEqual(b,m);w&&(a.from=b);var D=!o.isEqual(v,h);D&&this._focus(v);var M=o.getFluidConfig(v),S=o.getFluidConfig(b);S&&(b=S.get());var T=o.is.arr(t.to)||o.is.fun(t.to),E=a.config,P=E.decay,O=E.velocity;t.config&&!T&&!function(e,t,n){for(var r in n&&(k(n=i({},n),t),t=i(i({},n),t)),k(e,t),Object.assign(e,t),x)null==e[r]&&(e[r]=x[r]);var a=e.mass,u=e.frequency,s=e.damping;!o.is.und(u)&&(u<.01&&(u=.01),s<0&&(s=0),e.tension=Math.pow(2*Math.PI/u,2)*a,e.friction=4*Math.PI*s*a/u)}(E,L(t.config,r),t.config!==u.config?L(u.config,r):void 0);var R=f.getAnimated(this);if(!R||o.is.und(v))return n(H(this,!0));var I=o.is.und(t.reset)?l&&!t.default:!o.is.und(b)&&C(t.reset,r),j=I?b:this.get(),Y=F(v),N=o.is.num(Y)||o.is.arr(Y)||o.isAnimatedString(Y),$=!T&&(!N||C(u.immediate||t.immediate,r));if(D){if($)R=this._updateNode(Y);else{var V=this._getNodeType(v);if(V!==R.constructor)throw Error(\"Cannot animate between \"+R.constructor.name+\" and \"+V.name+', as the \"to\" prop suggests')}}var U=R.constructor,W=!!M,G=!1;if(!W){var q=I||this.is(Z)&&w;(D||q)&&(W=!(G=o.isEqual(F(j),Y))),(!o.isEqual(E.decay,P)||!o.isEqual(E.velocity,O))&&(W=!0)}if(G&&this.is(Q)&&(a.changed&&!I?W=!0:!W&&this._stop()),!T){(W||o.getFluidConfig(h))&&(a.values=R.getPayload(),a.toValues=M?null:U==f.AnimatedString?[1]:o.toArray(Y)),a.immediate=$,a.onStart=ea(c(\"onStart\"),r),a.onChange=ea(c(\"onChange\"),r);var J=a.onRest,ee=I&&!t.onRest?J[0]||o.noop:eo(ea(c(\"onRest\"),r),this);if(W){a.onRest=[ee,eo(n,this)];var et=I?0:1;et<J.length&&p.batchedUpdates(function(){for(;et<J.length;et++)J[et]()})}else(I||t.onRest)&&(a.onRest[0]=ee)}var en=ea(c(\"onProps\"),r);if(en&&en(t,this),I&&R.setValue(j),T)n(K(t.to,t,this._state,this));else if(W)I&&(this._phase=X),this._reset(),this._start();else if(this.is(Q)&&!D)a.onRest.push(eo(n,this));else{let e=B(this,j),t=ea(c(\"onNoopRest\"),r);null!=t&&t(e),n(e)}}",
                        "_focus": "function(e){var t=this.animation;if(e!==t.to){var n=o.getFluidConfig(t.to);n&&n.removeChild(this),t.to=e;var r=0;(n=o.getFluidConfig(e))&&(n.addChild(this),G(e)&&(r=(e.priority||0)+1)),this.priority=r}}",
                        "_set": "function(e){var t=o.getFluidConfig(e);t&&(e=t.get());var n=f.getAnimated(this),r=n&&n.getValue();return n?n.setValue(e):this._updateNode(e),!o.isEqual(e,r)}",
                        "_onChange": "function(t,n){void 0===n&&(n=!1);var r=this.animation;!r.changed&&!n&&(r.changed=!0,r.onStart&&r.onStart(this)),r.onChange&&r.onChange(t,this),e.prototype._onChange.call(this,t,n)}",
                        "_reset": "function(){var t=this.animation;f.getAnimated(this).reset(t.to),!this.is(Q)&&(t.changed=!1),!t.immediate&&(t.fromValues=t.values.map(function(e){return e.lastPosition})),e.prototype._reset.call(this)}",
                        "_start": "function(){!this.is(Q)&&(this._phase=Q,e.prototype._start.call(this),p.skipAnimation?this.finish():p.frameLoop.start(this))}",
                        "_stop": "function(e){if(this.resume(),this.is(Q)){this._phase=X,this._onChange(this.get(),!0);var t=this.animation;o.each(t.values,function(e){e.done=!0});var n=t.onRest;n.length&&(t.onRest=[t.toValues?o.noop:n[0]],!t.changed&&(n[0]=o.noop),o.each(n,function(t){return t(e)}))}}",
                        "get": "function(){var e=f.getAnimated(this);return e&&e.getValue()}",
                        "to": "function(){for(var e=arguments.length,t=Array(e),n=0;n<e;n++)t[n]=arguments[n];return p.to(this,t)}",
                        "interpolate": "function(){y.deprecateInterpolate();for(var e=arguments.length,t=Array(e),n=0;n<e;n++)t[n]=arguments[n];return p.to(this,t)}",
                        "addChild": "function(e){!this._children.size&&this._attach(),this._children.add(e)}",
                        "removeChild": "function(e){this._children.delete(e),!this._children.size&&this._detach()}",
                        "_attach": "function(){}",
                        "_detach": "function(){}",
                        "_onPriorityChange": "function(e){!this.idle&&p.frameLoop.start(this),this._emit({type:\"priority\",parent:this,priority:e})}",
                        "_emit": "function(e){o.each(Array.from(this._children),function(t){t.onParentChange(e)})}",
                        "idle": false,
                        "goal": "#000000b3",
                        "velocity": 0.0033333333333333344
                    },
                    {
                        "id": 5,
                        "key": "transform",
                        "_priority": 0,
                        "_children": {
                            "toJSON": "function(){return Array.from(this)}",
                            "has": "function has() { [native code] }",
                            "add": "function add() { [native code] }",
                            "delete": "function delete() { [native code] }",
                            "clear": "function clear() { [native code] }",
                            "entries": "function entries() { [native code] }",
                            "forEach": "function forEach() { [native code] }",
                            "size": 1,
                            "values": "function values() { [native code] }",
                            "keys": "function values() { [native code] }",
                            "union": "function union() { [native code] }",
                            "intersection": "function intersection() { [native code] }",
                            "difference": "function difference() { [native code] }",
                            "symmetricDifference": "function symmetricDifference() { [native code] }",
                            "isSubsetOf": "function isSubsetOf() { [native code] }",
                            "isSupersetOf": "function isSupersetOf() { [native code] }",
                            "isDisjointFrom": "function isDisjointFrom() { [native code] }"
                        },
                        "animation": {
                            "changed": true,
                            "values": [
                                {
                                    "_value": 0.21466666666664727,
                                    "done": false,
                                    "elapsedTime": 64.39999999999418,
                                    "lastPosition": 0.21466666666664727,
                                    "lastVelocity": 0.0033333333333333344,
                                    "v0": 0,
                                    "_string": "translate3d(0, -78.53333333333526%, 0)",
                                    "_toString": "function(e){var n=0;return t[0].replace(l,function(){return String(p[n++](e))}).replace(d,f)}",
                                    "constructor": "function t(t,n){var r;return(r=e.call(this,0)||this)._value=void 0,r._string=null,r._toString=void 0,r._toString=a.createInterpolator({output:[t,n]}),r}",
                                    "getValue": "function(){var e=this._string;return null==e?this._string=this._toString(this._value):e}",
                                    "setValue": "function(t){if(a.is.num(t)){if(!e.prototype.setValue.call(this,t))return!1;else this._string=null}else this._string=t,this._value=1;return!0}",
                                    "reset": "function(t){t&&(this._toString=a.createInterpolator({output:[this.getValue(),t]})),this._value=0,e.prototype.reset.call(this)}",
                                    "getPayload": "function(){return[this]}"
                                }
                            ],
                            "toValues": [
                                1
                            ],
                            "fromValues": [
                                0
                            ],
                            "to": "translate3d(0, -0px, 0)",
                            "from": "translate3d(0, -100%, 0)",
                            "config": {
                                "tension": 280,
                                "friction": 24,
                                "damping": 1,
                                "mass": 1,
                                "velocity": 0,
                                "duration": 300,
                                "easing": "function(e){return e}",
                                "clamp": false
                            },
                            "immediate": false,
                            "onRest": [
                                "function(r){if(r)e(z(t));else{var a=F(n),i=F(t.get());e(H(t,o.isEqual(i,a)))}}",
                                "function(r){if(r)e(z(t));else{var a=F(n),i=F(t.get());e(H(t,o.isEqual(i,a)))}}"
                            ]
                        },
                        "_phase": "ACTIVE",
                        "_state": {
                            "pauseQueue": {
                                "toJSON": "function(){return Array.from(this)}",
                                "has": "function has() { [native code] }",
                                "add": "function add() { [native code] }",
                                "delete": "function delete() { [native code] }",
                                "clear": "function clear() { [native code] }",
                                "entries": "function entries() { [native code] }",
                                "forEach": "function forEach() { [native code] }",
                                "size": 0,
                                "values": "function values() { [native code] }",
                                "keys": "function values() { [native code] }",
                                "union": "function union() { [native code] }",
                                "intersection": "function intersection() { [native code] }",
                                "difference": "function difference() { [native code] }",
                                "symmetricDifference": "function symmetricDifference() { [native code] }",
                                "isSubsetOf": "function isSubsetOf() { [native code] }",
                                "isSupersetOf": "function isSupersetOf() { [native code] }",
                                "isDisjointFrom": "function isDisjointFrom() { [native code] }"
                            },
                            "resumeQueue": {
                                "toJSON": "function(){return Array.from(this)}",
                                "has": "function has() { [native code] }",
                                "add": "function add() { [native code] }",
                                "delete": "function delete() { [native code] }",
                                "clear": "function clear() { [native code] }",
                                "entries": "function entries() { [native code] }",
                                "forEach": "function forEach() { [native code] }",
                                "size": 0,
                                "values": "function values() { [native code] }",
                                "keys": "function values() { [native code] }",
                                "union": "function union() { [native code] }",
                                "intersection": "function intersection() { [native code] }",
                                "difference": "function difference() { [native code] }",
                                "symmetricDifference": "function symmetricDifference() { [native code] }",
                                "isSubsetOf": "function isSubsetOf() { [native code] }",
                                "isSupersetOf": "function isSupersetOf() { [native code] }",
                                "isDisjointFrom": "function isDisjointFrom() { [native code] }"
                            }
                        },
                        "_defaultProps": {},
                        "_lastCallId": 2,
                        "_lastToId": 2,
                        "constructor": "function t(t,n){var r;if((r=e.call(this)||this).key=void 0,r.animation=new S,r.queue=void 0,r._phase=Z,r._state={pauseQueue:new Set,resumeQueue:new Set},r._defaultProps={},r._lastCallId=0,r._lastToId=0,!o.is.und(t)||!o.is.und(n)){var a=o.is.obj(t)?i({},t):i(i({},n),{},{from:t});a.default=!0,r.start(a)}return r}",
                        "advance": "function(e){var t=this,n=!0,r=!1,a=this.animation,i=a.config,u=a.toValues,s=f.getPayload(a.to);if(!s){var l=o.getFluidConfig(a.to);l&&(u=o.toArray(l.get()))}return a.values.forEach(function(l,c){if(!l.done){var d=s?s[c].lastPosition:u[c],f=a.immediate,p=d;if(!f){if(p=l.lastPosition,i.tension<=0){l.done=!0;return}var h=l.elapsedTime+=e,m=a.fromValues[c],y=null!=l.v0?l.v0:l.v0=o.is.arr(i.velocity)?i.velocity[c]:i.velocity;if(o.is.und(i.duration)){if(i.decay){var v=!0===i.decay?.998:i.decay,g=Math.exp(-(1-v)*h);p=m+y/(1-v)*(1-g),f=.1>Math.abs(l.lastPosition-p),b=y*g}else{b=null==l.lastVelocity?y:l.lastVelocity;for(var b,_=i.precision||(m==d?.005:Math.min(1,.001*Math.abs(d-m))),w=i.restVelocity||_/10,x=i.clamp?0:i.bounce,D=!o.is.und(x),k=m==d?l.v0>0:m<d,M=!1,S=Math.ceil(e/1),T=0;T<S&&!(!(Math.abs(b)>w)&&(f=Math.abs(d-p)<=_));++T){;D&&(M=p==d||p>d==k)&&(b=-b*x,p=d);var E=(-(1e-6*i.tension)*(p-d)+-(.001*i.friction)*b)/i.mass;b+=1*E,p+=1*b}}}else{var L=i.progress||0;i.duration<=0?L=1:L+=(1-L)*Math.min(1,h/i.duration),b=((p=m+i.easing(L)*(d-m))-l.lastPosition)/e,f=1==L}l.lastVelocity=b,Number.isNaN(p)&&(console.warn(\"Got NaN while animating:\",t),f=!0)}s&&!s[c].done&&(f=!1),f?l.done=!0:n=!1,l.setValue(p,i.round)&&(r=!0)}}),n?this.finish():r&&this._onChange(this.get()),n}",
                        "is": "function(e){return this._phase==e}",
                        "set": "function(e){var t=this;return p.batchedUpdates(function(){if(t._focus(e),t._set(e)&&!t.is(Q))return t._onChange(t.get(),!0);t._stop()}),this}",
                        "pause": "function(){er(this,\"pause\"),!this.is(ee)&&(this._phase=ee,o.flush(this._state.pauseQueue,function(e){return e()}))}",
                        "resume": "function(){er(this,\"resume\"),this.is(ee)&&(this._start(),o.flush(this._state.resumeQueue,function(e){return e()}))}",
                        "finish": "function(e){var t=this;if(this.resume(),this.is(Q)){var n=this.animation;!n.config.decay&&o.is.und(e)&&(e=n.to),!o.is.und(e)&&this._set(e),p.batchedUpdates(function(){!n.changed&&(n.changed=!0,n.onStart&&n.onStart(t)),t._stop()})}return this}",
                        "update": "function(e){return er(this,\"update\"),(this.queue||(this.queue=[])).push(e),this}",
                        "start": "function(e,t){return n.apply(this,arguments)}",
                        "stop": "function(e){var t=this;return!this.is(et)&&(U(this._state,this._lastCallId),this._focus(this.get()),p.batchedUpdates(function(){return t._stop(e)})),this}",
                        "reset": "function(){this._update({reset:!0})}",
                        "dispose": "function(){!this.is(et)&&(this.animation&&(this.animation.onRest=[]),this.stop(),this._phase=et)}",
                        "onParentChange": "function(t){e.prototype.onParentChange.call(this,t),\"change\"==t.type?!this.is(Q)&&(this._reset(),!this.is(ee)&&this._start()):\"priority\"==t.type&&(this.priority=t.priority+1)}",
                        "_prepareNode": "function(e){var t=e.to,n=e.from,r=e.reverse,a=this.key||\"\";t=!o.is.obj(t)||o.getFluidConfig(t)?t:t[a];var i={to:t,from:n=!o.is.obj(n)||o.getFluidConfig(n)?n:n[a]};if(this.is(Z)){if(r){var u=[n,t];t=u[0],n=u[1]}n=o.getFluidValue(n);var s=this._updateNode(o.is.und(n)?o.getFluidValue(t):n);s&&!o.is.und(n)&&s.setValue(n)}return i}",
                        "_updateNode": "function(e){var t=f.getAnimated(this);if(!o.is.und(e)){var n=this._getNodeType(e);(!t||t.constructor!==n)&&f.setAnimated(this,t=n.create(e))}return t}",
                        "_getNodeType": "function(e){var t=f.getAnimated(e);return t?t.constructor:o.is.arr(e)?f.AnimatedArray:o.isAnimatedString(e)?f.AnimatedString:f.AnimatedValue}",
                        "_update": "function(e,t){var n=this,r=this._defaultProps,a=function(t){var n=O(e,t);!o.is.und(n)&&(r[t]=n),r[t]&&(e[t]=r[t])};a(\"cancel\"),a(\"pause\");var i=this._prepareNode(e);return Y(++this._lastCallId,{key:this.key,props:e,state:this._state,actions:{pause:this.pause.bind(this),resume:this.resume.bind(this),start:this._merge.bind(this,i)}}).then(function(r){if(e.loop&&r.finished&&!(t&&r.noop)){var a=ei(e);if(a)return n._update(a,!0)}return r})}",
                        "_merge": "function(e,t,n){if(t.cancel)return this.stop(!0),n(z(this));var r=this.key,a=this.animation,u=this._defaultProps,s=!o.is.und(e.to),l=!o.is.und(e.from);if(s||l){if(!(t.callId>this._lastToId))return n(z(this));this._lastToId=t.callId}var c=function(e){return o.is.und(t[e])?u[e]:t[e]},d=ea(c(\"onDelayEnd\"),r);if(d&&d(t,this),t.default)A(t,[\"pause\",\"cancel\"],u);var h=a.to,m=a.from,y=e.to,v=void 0===y?h:y,g=e.from,b=void 0===g?m:g;if(l&&!s&&(v=b),t.reverse){var _=[b,v];v=_[0],b=_[1]}var w=!o.isEqual(b,m);w&&(a.from=b);var D=!o.isEqual(v,h);D&&this._focus(v);var M=o.getFluidConfig(v),S=o.getFluidConfig(b);S&&(b=S.get());var T=o.is.arr(t.to)||o.is.fun(t.to),E=a.config,P=E.decay,O=E.velocity;t.config&&!T&&!function(e,t,n){for(var r in n&&(k(n=i({},n),t),t=i(i({},n),t)),k(e,t),Object.assign(e,t),x)null==e[r]&&(e[r]=x[r]);var a=e.mass,u=e.frequency,s=e.damping;!o.is.und(u)&&(u<.01&&(u=.01),s<0&&(s=0),e.tension=Math.pow(2*Math.PI/u,2)*a,e.friction=4*Math.PI*s*a/u)}(E,L(t.config,r),t.config!==u.config?L(u.config,r):void 0);var R=f.getAnimated(this);if(!R||o.is.und(v))return n(H(this,!0));var I=o.is.und(t.reset)?l&&!t.default:!o.is.und(b)&&C(t.reset,r),j=I?b:this.get(),Y=F(v),N=o.is.num(Y)||o.is.arr(Y)||o.isAnimatedString(Y),$=!T&&(!N||C(u.immediate||t.immediate,r));if(D){if($)R=this._updateNode(Y);else{var V=this._getNodeType(v);if(V!==R.constructor)throw Error(\"Cannot animate between \"+R.constructor.name+\" and \"+V.name+', as the \"to\" prop suggests')}}var U=R.constructor,W=!!M,G=!1;if(!W){var q=I||this.is(Z)&&w;(D||q)&&(W=!(G=o.isEqual(F(j),Y))),(!o.isEqual(E.decay,P)||!o.isEqual(E.velocity,O))&&(W=!0)}if(G&&this.is(Q)&&(a.changed&&!I?W=!0:!W&&this._stop()),!T){(W||o.getFluidConfig(h))&&(a.values=R.getPayload(),a.toValues=M?null:U==f.AnimatedString?[1]:o.toArray(Y)),a.immediate=$,a.onStart=ea(c(\"onStart\"),r),a.onChange=ea(c(\"onChange\"),r);var J=a.onRest,ee=I&&!t.onRest?J[0]||o.noop:eo(ea(c(\"onRest\"),r),this);if(W){a.onRest=[ee,eo(n,this)];var et=I?0:1;et<J.length&&p.batchedUpdates(function(){for(;et<J.length;et++)J[et]()})}else(I||t.onRest)&&(a.onRest[0]=ee)}var en=ea(c(\"onProps\"),r);if(en&&en(t,this),I&&R.setValue(j),T)n(K(t.to,t,this._state,this));else if(W)I&&(this._phase=X),this._reset(),this._start();else if(this.is(Q)&&!D)a.onRest.push(eo(n,this));else{let e=B(this,j),t=ea(c(\"onNoopRest\"),r);null!=t&&t(e),n(e)}}",
                        "_focus": "function(e){var t=this.animation;if(e!==t.to){var n=o.getFluidConfig(t.to);n&&n.removeChild(this),t.to=e;var r=0;(n=o.getFluidConfig(e))&&(n.addChild(this),G(e)&&(r=(e.priority||0)+1)),this.priority=r}}",
                        "_set": "function(e){var t=o.getFluidConfig(e);t&&(e=t.get());var n=f.getAnimated(this),r=n&&n.getValue();return n?n.setValue(e):this._updateNode(e),!o.isEqual(e,r)}",
                        "_onChange": "function(t,n){void 0===n&&(n=!1);var r=this.animation;!r.changed&&!n&&(r.changed=!0,r.onStart&&r.onStart(this)),r.onChange&&r.onChange(t,this),e.prototype._onChange.call(this,t,n)}",
                        "_reset": "function(){var t=this.animation;f.getAnimated(this).reset(t.to),!this.is(Q)&&(t.changed=!1),!t.immediate&&(t.fromValues=t.values.map(function(e){return e.lastPosition})),e.prototype._reset.call(this)}",
                        "_start": "function(){!this.is(Q)&&(this._phase=Q,e.prototype._start.call(this),p.skipAnimation?this.finish():p.frameLoop.start(this))}",
                        "_stop": "function(e){if(this.resume(),this.is(Q)){this._phase=X,this._onChange(this.get(),!0);var t=this.animation;o.each(t.values,function(e){e.done=!0});var n=t.onRest;n.length&&(t.onRest=[t.toValues?o.noop:n[0]],!t.changed&&(n[0]=o.noop),o.each(n,function(t){return t(e)}))}}",
                        "get": "function(){var e=f.getAnimated(this);return e&&e.getValue()}",
                        "to": "function(){for(var e=arguments.length,t=Array(e),n=0;n<e;n++)t[n]=arguments[n];return p.to(this,t)}",
                        "interpolate": "function(){y.deprecateInterpolate();for(var e=arguments.length,t=Array(e),n=0;n<e;n++)t[n]=arguments[n];return p.to(this,t)}",
                        "addChild": "function(e){!this._children.size&&this._attach(),this._children.add(e)}",
                        "removeChild": "function(e){this._children.delete(e),!this._children.size&&this._detach()}",
                        "_attach": "function(){}",
                        "_detach": "function(){}",
                        "_onPriorityChange": "function(e){!this.idle&&p.frameLoop.start(this),this._emit({type:\"priority\",parent:this,priority:e})}",
                        "_emit": "function(e){o.each(Array.from(this._children),function(t){t.onParentChange(e)})}",
                        "idle": false,
                        "goal": "translate3d(0, -0px, 0)",
                        "velocity": 0.0033333333333333344
                    },
                    {
                        "id": 6,
                        "key": "opacity",
                        "_priority": 0,
                        "_children": {
                            "toJSON": "function(){return Array.from(this)}",
                            "has": "function has() { [native code] }",
                            "add": "function add() { [native code] }",
                            "delete": "function delete() { [native code] }",
                            "clear": "function clear() { [native code] }",
                            "entries": "function entries() { [native code] }",
                            "forEach": "function forEach() { [native code] }",
                            "size": 1,
                            "values": "function values() { [native code] }",
                            "keys": "function values() { [native code] }",
                            "union": "function union() { [native code] }",
                            "intersection": "function intersection() { [native code] }",
                            "difference": "function difference() { [native code] }",
                            "symmetricDifference": "function symmetricDifference() { [native code] }",
                            "isSubsetOf": "function isSubsetOf() { [native code] }",
                            "isSupersetOf": "function isSupersetOf() { [native code] }",
                            "isDisjointFrom": "function isDisjointFrom() { [native code] }"
                        },
                        "animation": {
                            "changed": true,
                            "values": [
                                {
                                    "_value": 0.21466666666664727,
                                    "done": false,
                                    "elapsedTime": 64.39999999999418,
                                    "lastPosition": 0.21466666666664727,
                                    "lastVelocity": 0.0033333333333333344,
                                    "v0": 0,
                                    "constructor": "function t(t){var n;return(n=e.call(this)||this)._value=t,n.done=!0,n.elapsedTime=void 0,n.lastPosition=void 0,n.lastVelocity=void 0,n.v0=void 0,a.is.num(n._value)&&(n.lastPosition=n._value),n}",
                                    "getPayload": "function(){return[this]}",
                                    "getValue": "function(){return this._value}",
                                    "setValue": "function(e,t){return a.is.num(e)&&(this.lastPosition=e,t&&(e=Math.round(e/t)*t,this.done&&(this.lastPosition=e))),this._value!==e&&(this._value=e,!0)}",
                                    "reset": "function(){var e=this.done;this.done=!1,a.is.num(this._value)&&(this.elapsedTime=0,this.lastPosition=this._value,e&&(this.lastVelocity=null),this.v0=null)}"
                                }
                            ],
                            "toValues": [
                                1
                            ],
                            "fromValues": [
                                0
                            ],
                            "to": 1,
                            "from": 0,
                            "config": {
                                "tension": 280,
                                "friction": 24,
                                "damping": 1,
                                "mass": 1,
                                "velocity": 0,
                                "duration": 300,
                                "easing": "function(e){return e}",
                                "clamp": false
                            },
                            "immediate": false,
                            "onRest": [
                                "function(r){if(r)e(z(t));else{var a=F(n),i=F(t.get());e(H(t,o.isEqual(i,a)))}}",
                                "function(r){if(r)e(z(t));else{var a=F(n),i=F(t.get());e(H(t,o.isEqual(i,a)))}}"
                            ]
                        },
                        "_phase": "ACTIVE",
                        "_state": {
                            "pauseQueue": {
                                "toJSON": "function(){return Array.from(this)}",
                                "has": "function has() { [native code] }",
                                "add": "function add() { [native code] }",
                                "delete": "function delete() { [native code] }",
                                "clear": "function clear() { [native code] }",
                                "entries": "function entries() { [native code] }",
                                "forEach": "function forEach() { [native code] }",
                                "size": 0,
                                "values": "function values() { [native code] }",
                                "keys": "function values() { [native code] }",
                                "union": "function union() { [native code] }",
                                "intersection": "function intersection() { [native code] }",
                                "difference": "function difference() { [native code] }",
                                "symmetricDifference": "function symmetricDifference() { [native code] }",
                                "isSubsetOf": "function isSubsetOf() { [native code] }",
                                "isSupersetOf": "function isSupersetOf() { [native code] }",
                                "isDisjointFrom": "function isDisjointFrom() { [native code] }"
                            },
                            "resumeQueue": {
                                "toJSON": "function(){return Array.from(this)}",
                                "has": "function has() { [native code] }",
                                "add": "function add() { [native code] }",
                                "delete": "function delete() { [native code] }",
                                "clear": "function clear() { [native code] }",
                                "entries": "function entries() { [native code] }",
                                "forEach": "function forEach() { [native code] }",
                                "size": 0,
                                "values": "function values() { [native code] }",
                                "keys": "function values() { [native code] }",
                                "union": "function union() { [native code] }",
                                "intersection": "function intersection() { [native code] }",
                                "difference": "function difference() { [native code] }",
                                "symmetricDifference": "function symmetricDifference() { [native code] }",
                                "isSubsetOf": "function isSubsetOf() { [native code] }",
                                "isSupersetOf": "function isSupersetOf() { [native code] }",
                                "isDisjointFrom": "function isDisjointFrom() { [native code] }"
                            }
                        },
                        "_defaultProps": {},
                        "_lastCallId": 2,
                        "_lastToId": 2,
                        "constructor": "function t(t,n){var r;if((r=e.call(this)||this).key=void 0,r.animation=new S,r.queue=void 0,r._phase=Z,r._state={pauseQueue:new Set,resumeQueue:new Set},r._defaultProps={},r._lastCallId=0,r._lastToId=0,!o.is.und(t)||!o.is.und(n)){var a=o.is.obj(t)?i({},t):i(i({},n),{},{from:t});a.default=!0,r.start(a)}return r}",
                        "advance": "function(e){var t=this,n=!0,r=!1,a=this.animation,i=a.config,u=a.toValues,s=f.getPayload(a.to);if(!s){var l=o.getFluidConfig(a.to);l&&(u=o.toArray(l.get()))}return a.values.forEach(function(l,c){if(!l.done){var d=s?s[c].lastPosition:u[c],f=a.immediate,p=d;if(!f){if(p=l.lastPosition,i.tension<=0){l.done=!0;return}var h=l.elapsedTime+=e,m=a.fromValues[c],y=null!=l.v0?l.v0:l.v0=o.is.arr(i.velocity)?i.velocity[c]:i.velocity;if(o.is.und(i.duration)){if(i.decay){var v=!0===i.decay?.998:i.decay,g=Math.exp(-(1-v)*h);p=m+y/(1-v)*(1-g),f=.1>Math.abs(l.lastPosition-p),b=y*g}else{b=null==l.lastVelocity?y:l.lastVelocity;for(var b,_=i.precision||(m==d?.005:Math.min(1,.001*Math.abs(d-m))),w=i.restVelocity||_/10,x=i.clamp?0:i.bounce,D=!o.is.und(x),k=m==d?l.v0>0:m<d,M=!1,S=Math.ceil(e/1),T=0;T<S&&!(!(Math.abs(b)>w)&&(f=Math.abs(d-p)<=_));++T){;D&&(M=p==d||p>d==k)&&(b=-b*x,p=d);var E=(-(1e-6*i.tension)*(p-d)+-(.001*i.friction)*b)/i.mass;b+=1*E,p+=1*b}}}else{var L=i.progress||0;i.duration<=0?L=1:L+=(1-L)*Math.min(1,h/i.duration),b=((p=m+i.easing(L)*(d-m))-l.lastPosition)/e,f=1==L}l.lastVelocity=b,Number.isNaN(p)&&(console.warn(\"Got NaN while animating:\",t),f=!0)}s&&!s[c].done&&(f=!1),f?l.done=!0:n=!1,l.setValue(p,i.round)&&(r=!0)}}),n?this.finish():r&&this._onChange(this.get()),n}",
                        "is": "function(e){return this._phase==e}",
                        "set": "function(e){var t=this;return p.batchedUpdates(function(){if(t._focus(e),t._set(e)&&!t.is(Q))return t._onChange(t.get(),!0);t._stop()}),this}",
                        "pause": "function(){er(this,\"pause\"),!this.is(ee)&&(this._phase=ee,o.flush(this._state.pauseQueue,function(e){return e()}))}",
                        "resume": "function(){er(this,\"resume\"),this.is(ee)&&(this._start(),o.flush(this._state.resumeQueue,function(e){return e()}))}",
                        "finish": "function(e){var t=this;if(this.resume(),this.is(Q)){var n=this.animation;!n.config.decay&&o.is.und(e)&&(e=n.to),!o.is.und(e)&&this._set(e),p.batchedUpdates(function(){!n.changed&&(n.changed=!0,n.onStart&&n.onStart(t)),t._stop()})}return this}",
                        "update": "function(e){return er(this,\"update\"),(this.queue||(this.queue=[])).push(e),this}",
                        "start": "function(e,t){return n.apply(this,arguments)}",
                        "stop": "function(e){var t=this;return!this.is(et)&&(U(this._state,this._lastCallId),this._focus(this.get()),p.batchedUpdates(function(){return t._stop(e)})),this}",
                        "reset": "function(){this._update({reset:!0})}",
                        "dispose": "function(){!this.is(et)&&(this.animation&&(this.animation.onRest=[]),this.stop(),this._phase=et)}",
                        "onParentChange": "function(t){e.prototype.onParentChange.call(this,t),\"change\"==t.type?!this.is(Q)&&(this._reset(),!this.is(ee)&&this._start()):\"priority\"==t.type&&(this.priority=t.priority+1)}",
                        "_prepareNode": "function(e){var t=e.to,n=e.from,r=e.reverse,a=this.key||\"\";t=!o.is.obj(t)||o.getFluidConfig(t)?t:t[a];var i={to:t,from:n=!o.is.obj(n)||o.getFluidConfig(n)?n:n[a]};if(this.is(Z)){if(r){var u=[n,t];t=u[0],n=u[1]}n=o.getFluidValue(n);var s=this._updateNode(o.is.und(n)?o.getFluidValue(t):n);s&&!o.is.und(n)&&s.setValue(n)}return i}",
                        "_updateNode": "function(e){var t=f.getAnimated(this);if(!o.is.und(e)){var n=this._getNodeType(e);(!t||t.constructor!==n)&&f.setAnimated(this,t=n.create(e))}return t}",
                        "_getNodeType": "function(e){var t=f.getAnimated(e);return t?t.constructor:o.is.arr(e)?f.AnimatedArray:o.isAnimatedString(e)?f.AnimatedString:f.AnimatedValue}",
                        "_update": "function(e,t){var n=this,r=this._defaultProps,a=function(t){var n=O(e,t);!o.is.und(n)&&(r[t]=n),r[t]&&(e[t]=r[t])};a(\"cancel\"),a(\"pause\");var i=this._prepareNode(e);return Y(++this._lastCallId,{key:this.key,props:e,state:this._state,actions:{pause:this.pause.bind(this),resume:this.resume.bind(this),start:this._merge.bind(this,i)}}).then(function(r){if(e.loop&&r.finished&&!(t&&r.noop)){var a=ei(e);if(a)return n._update(a,!0)}return r})}",
                        "_merge": "function(e,t,n){if(t.cancel)return this.stop(!0),n(z(this));var r=this.key,a=this.animation,u=this._defaultProps,s=!o.is.und(e.to),l=!o.is.und(e.from);if(s||l){if(!(t.callId>this._lastToId))return n(z(this));this._lastToId=t.callId}var c=function(e){return o.is.und(t[e])?u[e]:t[e]},d=ea(c(\"onDelayEnd\"),r);if(d&&d(t,this),t.default)A(t,[\"pause\",\"cancel\"],u);var h=a.to,m=a.from,y=e.to,v=void 0===y?h:y,g=e.from,b=void 0===g?m:g;if(l&&!s&&(v=b),t.reverse){var _=[b,v];v=_[0],b=_[1]}var w=!o.isEqual(b,m);w&&(a.from=b);var D=!o.isEqual(v,h);D&&this._focus(v);var M=o.getFluidConfig(v),S=o.getFluidConfig(b);S&&(b=S.get());var T=o.is.arr(t.to)||o.is.fun(t.to),E=a.config,P=E.decay,O=E.velocity;t.config&&!T&&!function(e,t,n){for(var r in n&&(k(n=i({},n),t),t=i(i({},n),t)),k(e,t),Object.assign(e,t),x)null==e[r]&&(e[r]=x[r]);var a=e.mass,u=e.frequency,s=e.damping;!o.is.und(u)&&(u<.01&&(u=.01),s<0&&(s=0),e.tension=Math.pow(2*Math.PI/u,2)*a,e.friction=4*Math.PI*s*a/u)}(E,L(t.config,r),t.config!==u.config?L(u.config,r):void 0);var R=f.getAnimated(this);if(!R||o.is.und(v))return n(H(this,!0));var I=o.is.und(t.reset)?l&&!t.default:!o.is.und(b)&&C(t.reset,r),j=I?b:this.get(),Y=F(v),N=o.is.num(Y)||o.is.arr(Y)||o.isAnimatedString(Y),$=!T&&(!N||C(u.immediate||t.immediate,r));if(D){if($)R=this._updateNode(Y);else{var V=this._getNodeType(v);if(V!==R.constructor)throw Error(\"Cannot animate between \"+R.constructor.name+\" and \"+V.name+', as the \"to\" prop suggests')}}var U=R.constructor,W=!!M,G=!1;if(!W){var q=I||this.is(Z)&&w;(D||q)&&(W=!(G=o.isEqual(F(j),Y))),(!o.isEqual(E.decay,P)||!o.isEqual(E.velocity,O))&&(W=!0)}if(G&&this.is(Q)&&(a.changed&&!I?W=!0:!W&&this._stop()),!T){(W||o.getFluidConfig(h))&&(a.values=R.getPayload(),a.toValues=M?null:U==f.AnimatedString?[1]:o.toArray(Y)),a.immediate=$,a.onStart=ea(c(\"onStart\"),r),a.onChange=ea(c(\"onChange\"),r);var J=a.onRest,ee=I&&!t.onRest?J[0]||o.noop:eo(ea(c(\"onRest\"),r),this);if(W){a.onRest=[ee,eo(n,this)];var et=I?0:1;et<J.length&&p.batchedUpdates(function(){for(;et<J.length;et++)J[et]()})}else(I||t.onRest)&&(a.onRest[0]=ee)}var en=ea(c(\"onProps\"),r);if(en&&en(t,this),I&&R.setValue(j),T)n(K(t.to,t,this._state,this));else if(W)I&&(this._phase=X),this._reset(),this._start();else if(this.is(Q)&&!D)a.onRest.push(eo(n,this));else{let e=B(this,j),t=ea(c(\"onNoopRest\"),r);null!=t&&t(e),n(e)}}",
                        "_focus": "function(e){var t=this.animation;if(e!==t.to){var n=o.getFluidConfig(t.to);n&&n.removeChild(this),t.to=e;var r=0;(n=o.getFluidConfig(e))&&(n.addChild(this),G(e)&&(r=(e.priority||0)+1)),this.priority=r}}",
                        "_set": "function(e){var t=o.getFluidConfig(e);t&&(e=t.get());var n=f.getAnimated(this),r=n&&n.getValue();return n?n.setValue(e):this._updateNode(e),!o.isEqual(e,r)}",
                        "_onChange": "function(t,n){void 0===n&&(n=!1);var r=this.animation;!r.changed&&!n&&(r.changed=!0,r.onStart&&r.onStart(this)),r.onChange&&r.onChange(t,this),e.prototype._onChange.call(this,t,n)}",
                        "_reset": "function(){var t=this.animation;f.getAnimated(this).reset(t.to),!this.is(Q)&&(t.changed=!1),!t.immediate&&(t.fromValues=t.values.map(function(e){return e.lastPosition})),e.prototype._reset.call(this)}",
                        "_start": "function(){!this.is(Q)&&(this._phase=Q,e.prototype._start.call(this),p.skipAnimation?this.finish():p.frameLoop.start(this))}",
                        "_stop": "function(e){if(this.resume(),this.is(Q)){this._phase=X,this._onChange(this.get(),!0);var t=this.animation;o.each(t.values,function(e){e.done=!0});var n=t.onRest;n.length&&(t.onRest=[t.toValues?o.noop:n[0]],!t.changed&&(n[0]=o.noop),o.each(n,function(t){return t(e)}))}}",
                        "get": "function(){var e=f.getAnimated(this);return e&&e.getValue()}",
                        "to": "function(){for(var e=arguments.length,t=Array(e),n=0;n<e;n++)t[n]=arguments[n];return p.to(this,t)}",
                        "interpolate": "function(){y.deprecateInterpolate();for(var e=arguments.length,t=Array(e),n=0;n<e;n++)t[n]=arguments[n];return p.to(this,t)}",
                        "addChild": "function(e){!this._children.size&&this._attach(),this._children.add(e)}",
                        "removeChild": "function(e){this._children.delete(e),!this._children.size&&this._detach()}",
                        "_attach": "function(){}",
                        "_detach": "function(){}",
                        "_onPriorityChange": "function(e){!this.idle&&p.frameLoop.start(this),this._emit({type:\"priority\",parent:this,priority:e})}",
                        "_emit": "function(e){o.each(Array.from(this._children),function(t){t.onParentChange(e)})}",
                        "idle": false,
                        "goal": 1,
                        "velocity": 0.0033333333333333344
                    }
                ],
                "priority": 0,
                "startQueue": {
                    "toJSON": "function(){return Array.from(this)}",
                    "has": "function has() { [native code] }",
                    "add": "function add() { [native code] }",
                    "delete": "function delete() { [native code] }",
                    "clear": "function clear() { [native code] }",
                    "entries": "function entries() { [native code] }",
                    "forEach": "function forEach() { [native code] }",
                    "size": 0,
                    "values": "function values() { [native code] }",
                    "keys": "function values() { [native code] }",
                    "union": "function union() { [native code] }",
                    "intersection": "function intersection() { [native code] }",
                    "difference": "function difference() { [native code] }",
                    "symmetricDifference": "function symmetricDifference() { [native code] }",
                    "isSubsetOf": "function isSubsetOf() { [native code] }",
                    "isSupersetOf": "function isSupersetOf() { [native code] }",
                    "isDisjointFrom": "function isDisjointFrom() { [native code] }"
                },
                "frameQueue": {
                    "toJSON": "function(){return Array.from(this)}",
                    "has": "function has() { [native code] }",
                    "add": "function add() { [native code] }",
                    "delete": "function delete() { [native code] }",
                    "clear": "function clear() { [native code] }",
                    "entries": "function entries() { [native code] }",
                    "forEach": "function forEach() { [native code] }",
                    "size": 0,
                    "values": "function values() { [native code] }",
                    "keys": "function values() { [native code] }",
                    "union": "function union() { [native code] }",
                    "intersection": "function intersection() { [native code] }",
                    "difference": "function difference() { [native code] }",
                    "symmetricDifference": "function symmetricDifference() { [native code] }",
                    "isSubsetOf": "function isSubsetOf() { [native code] }",
                    "isSupersetOf": "function isSupersetOf() { [native code] }",
                    "isDisjointFrom": "function isDisjointFrom() { [native code] }"
                },
                "writeQueue": {
                    "toJSON": "function(){return Array.from(this)}",
                    "has": "function has() { [native code] }",
                    "add": "function add() { [native code] }",
                    "delete": "function delete() { [native code] }",
                    "clear": "function clear() { [native code] }",
                    "entries": "function entries() { [native code] }",
                    "forEach": "function forEach() { [native code] }",
                    "size": 0,
                    "values": "function values() { [native code] }",
                    "keys": "function values() { [native code] }",
                    "union": "function union() { [native code] }",
                    "intersection": "function intersection() { [native code] }",
                    "difference": "function difference() { [native code] }",
                    "symmetricDifference": "function symmetricDifference() { [native code] }",
                    "isSubsetOf": "function isSubsetOf() { [native code] }",
                    "isSupersetOf": "function isSupersetOf() { [native code] }",
                    "isDisjointFrom": "function isDisjointFrom() { [native code] }"
                },
                "timeoutQueue": [],
                "addAnimation": "e=>{let t=this.animations.indexOf(e);t<0&&(t=this.animations.findIndex(t=>t.priority>e.priority),this.animations.splice(0!=~t?t:this.animations.length,0,e))}",
                "loop": "()=>{if(0!==this.lastTime)try{this.advance()}catch(e){console.error(e)}finally{this.animations.length>0||this.startQueue.size>0||this.frameQueue.size>0||this.writeQueue.size>0||this.timeoutQueue.length>0?this.id=this._requestAnimationFrame(this.loop):(this.lastTime=0,this.id=0)}}",
                "startLoop": "()=>{!(this.lastTime>0)&&(this.lastTime=i.Globals.now(),this.id=this._requestAnimationFrame(this.loop))}",
                "setRAF": "setRAF(e,t){0!==this.id&&(this._cancelAnimationFrame(this.id),this.id=0),this._requestAnimationFrame=e,this._cancelAnimationFrame=t,this.loop()}"
            },
            "now": "function(){return performance.now()}",
            "requestAnimationFrame": "function requestAnimationFrame() { [native code] }",
            "skipAnimation": false,
            "to": "function(e,t){return new eC(e,t)}",
            "willAdvance": "function(){}"
        },
        "useForceUpdate": "function(){var e=(0,r.useState)(0)[1],t=(0,r.useRef)(!1);return a(function(){return function(){t.current=!0}}),function(){!t.current&&e({})}}",
        "useOnce": "function(e){return(0,r.useEffect)(e,[])}",
        "usePrev": "function i(e){var t=(0,r.useRef)(void 0);return(0,r.useEffect)(function(){t.current=e}),t.current}",
        "defineHidden": "function(e,t,n){return Object.defineProperty(e,t,{value:n,writable:!0,configurable:!0})}",
        "each": "function(e,t,n){i.fun(e.forEach)?e.forEach(t,n):Object.keys(e).forEach(function(r){return t.call(n,e[r],r)})}",
        "flush": "function d(e,t){if(e.size){var n=Array.from(e);e.clear(),l(n,t)}}",
        "is": {
            "arr": "function isArray() { [native code] }",
            "obj": "function(e){return!!e&&\"Object\"===e.constructor.name}",
            "fun": "function(e){return\"function\"==typeof e}",
            "str": "function(e){return\"string\"==typeof e}",
            "num": "function(e){return\"number\"==typeof e}",
            "und": "function(e){return void 0===e}"
        },
        "isAnimatedString": "function(e){return i.str(e)&&(\"#\"==e[0]||/\\d/.test(e)||!!(r.colorNames&&r.colorNames[e]))}",
        "isEqual": "function u(e,t){if(i.arr(e)){if(!i.arr(t)||e.length!==t.length)return!1;for(var n=0;n<e.length;n++)if(e[n]!==t[n])return!1;return!0}return e===t}",
        "noop": "function(){}",
        "toArray": "function(e){return i.und(e)?[]:i.arr(e)?e:[e]}",
        "FrameLoop": "function(e){void 0===e&&(e=a);var t=!0,n=!1,o=0,u=[],s=0,l=new Set,c=new Set,d=new Set,f=function(e){var t=u.indexOf(e);t<0&&(t=u.findIndex(function(t){return t.priority>e.priority}),u.splice(~t?t:u.length,0,e))},p=function(){if(!t)try{y(),e(p)}catch(e){console.error(e)}},h=function(){t&&(t=!1,0==o&&(o=r.now(),e(p)))},m=[];this.setTimeout=function(e,t){var n=r.now()+t,a=function(){var e=m.findIndex(function(e){return e.cancel==a});e>=0&&m.splice(e,1)},o=i(m,function(e){return e.time>n}),u={time:n,handler:e,cancel:a};return m.splice(o,0,u),h(),u};var y=this.advance=function(){var e=r.now();if(l.size&&(l.forEach(f),l.clear()),m.length&&r.batchedUpdates(function(){var t=i(m,function(t){return t.time>e});m.splice(0,t).forEach(function(e){return e.handler()})}),e>o){var t=Math.min(64,e-o);o=e,r.batchedUpdates(function(){u.length&&(r.willAdvance(u),u=u.filter(function(e){return s=e.priority,!e.idle&&e.advance(t),!e.idle}),s=0),c.size&&(c.forEach(function(t){return t(e)}),c.clear()),d.size&&(n=!0,d.forEach(function(t){return t(e)}),d.clear(),n=!1)})}};this.start=function(e){s>e.priority?l.add(e):(f(e),h())},this.onFrame=function(e){c.add(e),h()},this.onWrite=function(e){n?e(o):d.add(e)}}",
        "createInterpolator": "function(e,t,n){if(a.is.fun(e))return e;if(a.is.arr(e))return o({range:e,output:t,extrapolate:n});if(a.is.str(e.output[0]))return r.createStringInterpolator(e);var i=e.output,u=e.range||[0,1],s=e.extrapolateLeft||e.extrapolate||\"extend\",l=e.extrapolateRight||e.extrapolate||\"extend\",c=e.easing||function(e){return e};return function(t){var n=function(e,t){for(var n=1;n<t.length-1&&!(t[n]>=e);++n);return n-1}(t,u);return function(e,t,n,r,a,o,i,u,s){var l=s?s(e):e;if(l<t){if(\"identity\"===i)return l;\"clamp\"===i&&(l=t)}if(l>n){if(\"identity\"===u)return l;\"clamp\"===u&&(l=n)}return r===a?r:t===n?e<=t?r:a:(t===-1/0?l=-l:n===1/0?l-=t:l=(l-t)/(n-t),l=o(l),r===-1/0?l=-l:a===1/0?l+=r:l=l*(a-r)+r,l)}(t,u[n],u[n+1],i[n],i[n+1],c,s,l,e.map)}}",
        "FluidValue": "function(){u(this,this)}",
        "addFluidObserver": "function s(e,t){var n=i(e);if(n)return n.addChild(t),function(){return n.removeChild(t)}}",
        "getFluidConfig": "function i(e){if(e)return e[r]}",
        "getFluidValue": "function o(e){var t=i(e);return t?t.get():e}",
        "hasFluidValue": "function(e){return!!i(e)}",
        "setFluidConfig": "function u(e,t){Object.defineProperty(e,r,{value:t,configurable:!0})}"
    }
}