{
    "exports": {
        "default": "function(e,_,E){return null!=E&&E.forwardRef?function(e,_){return E=>{let i=\"FluxContainer(\".concat(a(E),\")\");class s extends o.Component{componentDidMount(){this.listener.attach(i)}componentWillUnmount(){this.listener.detach(),this.memoizedGetStateFromStores.clear()}render(){let{forwardedConnectStoresRef:e,childProps:_}=this.props,o=this.memoizedGetStateFromStores(_);return(0,t.jsx)(E,{ref:e,..._,...o})}constructor(...E){super(...E),this.memoizedGetStateFromStores=I(_),this.listener=new r.default(e,()=>{let e=this.memoizedGetStateFromStores.getCachedResult(this.props.childProps);if(!(null!=e&&(this.memoizedGetStateFromStores.clear(),(0,n.default)(this.memoizedGetStateFromStores(this.props.childProps),e))))this.forceUpdate()})}}s.displayName=i;let T=o.forwardRef((e,_)=>(0,t.jsx)(s,{childProps:e,forwardedConnectStoresRef:_}));return T.displayName=\"ForwardRef(\".concat(i,\")\"),T}}(e,_):function(e,_){return E=>{let i=\"FluxContainer(\".concat(a(E),\")\");class s extends o.Component{componentDidMount(){this.listener.attach(i)}componentWillUnmount(){this.listener.detach(),this.memoizedGetStateFromStores.clear()}render(){let e=this.memoizedGetStateFromStores(this.props);return(0,t.jsx)(E,{...this.props,...e})}constructor(...E){super(...E),this.memoizedGetStateFromStores=I(_),this.listener=new r.default(e,()=>{let e=this.memoizedGetStateFromStores.getCachedResult(this.props);if(!(null!=e&&(this.memoizedGetStateFromStores.clear(),(0,n.default)(this.memoizedGetStateFromStores(this.props),e))))this.forceUpdate()})}}return s.displayName=i,s}}(e,_)}"
    }
}