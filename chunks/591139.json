{
    "exports": {
        "default": "class d{constructor(e){this._subscriptions={},this._unsubscriptions={},this._unsubscribe=new i.DelayedCall(o,()=>this.flushUnsubscriptions()),this._onChange=e}reset(){this._subscriptions={},this._unsubscriptions={},this._unsubscribe.cancel()}get(e){let t=this._subscriptions[e]??{};return u.default.keys(t)}clear(e){delete this._subscriptions[e],delete this._unsubscriptions[e]}subscribe(e,t){let n=this._subscriptions[e]??{};n[t]=(n[t]??0)+1,this._subscriptions[e]=n,1===n[t]&&this._onChange(e,this.get(e)),this.checkForLeaks(e,t)}isSubscribed(e,t){return null!=this._subscriptions[e]&&null!=this._subscriptions[e][t]}isSubscribedToAnyMember(e){return this.get(e).length>0}unsubscribe(e,t){if(!this.isSubscribed(e,t))return;let n=this._unsubscriptions[e]??{};n[t]=(n[t]??0)+1,this._unsubscriptions[e]=n,1===n[t]&&this._unsubscribe.delay(!1)}checkForLeaks(e,t){let n=this._subscriptions[e]?.[t]??0,a=n-(this._unsubscriptions[e]?.[t]??0);a>5&&new r.default(\"GuildMemberSubscriptions\").warn(`GuildMemberSubscriptions.subscribe(...): Potential reference leak! (${a} subscriptions)`)}flushUnsubscriptions(){!l().isEmpty(this._unsubscriptions)&&(l().forEach(this._unsubscriptions,(e,t)=>{let n=this._subscriptions[t];l().forEach(e,(e,t)=>{n[t]=(n[t]??0)-e,n[t]<=0&&delete n[t]}),l().isEmpty(n)&&delete this._subscriptions[t],this._onChange(t,this.get(t))}),this._unsubscriptions={})}}"
    }
}