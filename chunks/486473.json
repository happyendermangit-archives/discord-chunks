{
    "exports": {
        "archiveSubscriptionListing": "async function p(e,t,n){let s=await l.archiveGuildRoleSubscriptionListing(e,t,n);i.default.dispatch({type:\"GUILD_ROLE_SUBSCRIPTIONS_UPDATE_LISTING\",listing:s})}",
        "createSubscriptionGroupListing": "async function m(e,t){let n=await l.createGuildRoleSubscriptionGroupListing(e,t);return i.default.dispatch({type:\"GUILD_ROLE_SUBSCRIPTIONS_UPDATE_GROUP_LISTING\",listing:n}),n}",
        "createSubscriptionListing": "async function I(e){let{guildId:t,groupListingId:n,data:s,analyticsContext:r,onBeforeDispatchNewListing:a}=e,d=await l.createGuildRoleSubscriptionListing(t,n,s);return u.default.track(f.AnalyticEvents.ROLE_SUBSCRIPTION_LISTING_CREATED,{role_subscription_listing_id:d.id,role_subscription_group_listing_id:n,template_name:r.templateCategory,has_change_from_template:r.hasChangeFromTemplate,...(0,o.collectGuildAnalyticsMetadata)(t)}),await y(t,n,{includeArchivedListings:!0}),a?.(d),i.default.dispatch({type:\"GUILD_ROLE_SUBSCRIPTIONS_UPDATE_LISTING\",listing:d}),d}",
        "deleteSubscriptionListing": "async function E(e,t,n){await l.deleteGuildRoleSubscriptionListing(e,t,n),i.default.dispatch({type:\"GUILD_ROLE_SUBSCRIPTIONS_DELETE_LISTING\",listingId:n})}",
        "fetchAllSubscriptionListingsDataForGuild": "async function g(e){let{includeSoftDeleted:t=!0,countryCode:n}=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};i.default.dispatch({type:\"GUILD_ROLE_SUBSCRIPTIONS_FETCH_LISTINGS\",guildId:e});try{let[s,a,o]=await Promise.all([l.getGuildRoleSubscriptionGroupListingsForGuild(e,{includeSoftDeleted:t,countryCode:n}),l.getGuildRoleSubscriptionsSettings(e),l.getGuildRoleSubscriptionTrials(e),(0,r.fetchSubscriptions)()]);i.default.dispatch({type:\"GUILD_ROLE_SUBSCRIPTIONS_FETCH_LISTINGS_SUCCESS\",guildId:e,groupListings:s,settings:a,subscriptionTrials:o})}catch(t){i.default.dispatch({type:\"GUILD_ROLE_SUBSCRIPTIONS_FETCH_LISTINGS_FAILURE\",guildId:e})}}",
        "fetchMonetizationRestrictions": "async function S(e){let{signal:t}=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=!1;for(let r=0;r<3;r++)try{if(t?.aborted){i.default.dispatch({type:\"GUILD_ROLE_SUBSCRIPTIONS_FETCH_RESTRICTIONS_ABORTED\",guildId:e});return}i.default.dispatch({type:\"GUILD_ROLE_SUBSCRIPTIONS_FETCH_RESTRICTIONS\",guildId:e});let{restrictions:s}=await l.getGuildMonetizationRestrictions(e,{signal:t});i.default.dispatch({type:\"GUILD_ROLE_SUBSCRIPTIONS_FETCH_RESTRICTIONS_SUCCESS\",guildId:e,restrictions:s??[]}),n=!0;break}catch(e){await (0,s.sleep)((r+1)*d.default.Millis.SECOND)}!n&&i.default.dispatch({type:\"GUILD_ROLE_SUBSCRIPTIONS_FETCH_RESTRICTIONS_FAILURE\",guildId:e})}",
        "fetchSubscriptionListingForPlan": "async function h(e){i.default.dispatch({type:\"GUILD_ROLE_SUBSCRIPTIONS_FETCH_LISTING_FOR_PLAN\",planId:e});let t=await l.getGuildRoleSubscriptionGroupForSubscriptionPlan(e);for(let n of(i.default.dispatch({type:\"GUILD_ROLE_SUBSCRIPTIONS_FETCH_LISTING_FOR_PLAN_SUCCESS\",groupListing:t}),t.subscription_listings??[]))n.subscription_plans[0].id===e&&await a.fetchSubscriptionPlansForSKU(n.id,void 0,void 0,!0)}",
        "fetchSubscriptionsSettings": "async function _(e){let t=await l.getGuildRoleSubscriptionsSettings(e);i.default.dispatch({type:\"GUILD_ROLE_SUBSCRIPTIONS_UPDATE_SUBSCRIPTIONS_SETTINGS\",settings:t})}",
        "updateSubscriptionListing": "async function T(e){let{guildId:t,listingId:n,groupListingId:s,data:r}=e,a=await l.updateGuildRoleSubscriptionListing(t,s,n,r);return i.default.dispatch({type:\"GUILD_ROLE_SUBSCRIPTIONS_UPDATE_LISTING\",listing:a}),await y(t,s,{includeArchivedListings:!0}),a}",
        "updateSubscriptionTrial": "async function v(e,t,n){let s=await l.updateGuildRoleSubscriptionsTrial(e,t,n);i.default.dispatch({type:\"GUILD_ROLE_SUBSCRIPTIONS_UPDATE_SUBSCRIPTION_TRIAL\",subscriptionTrial:s})}",
        "updateSubscriptionsSettings": "async function c(e,t){let n=await l.updateGuildRoleSubscriptionsSettings(e,t);i.default.dispatch({type:\"GUILD_ROLE_SUBSCRIPTIONS_UPDATE_SUBSCRIPTIONS_SETTINGS\",settings:n})}"
    }
}