{
    "exports": {
        "default": {
            "pending": {
                "toJSON": "function(){return Array.from(this)}",
                "get": "function get() { [native code] }",
                "set": "function set() { [native code] }",
                "has": "function has() { [native code] }",
                "delete": "function delete() { [native code] }",
                "clear": "function clear() { [native code] }",
                "entries": "function entries() { [native code] }",
                "forEach": "function forEach() { [native code] }",
                "keys": "function keys() { [native code] }",
                "size": 0,
                "values": "function values() { [native code] }"
            },
            "committed": {
                "toJSON": "function(){return Array.from(this)}",
                "get": "function get() { [native code] }",
                "set": "function set() { [native code] }",
                "has": "function has() { [native code] }",
                "delete": "function delete() { [native code] }",
                "clear": "function clear() { [native code] }",
                "entries": "function entries() { [native code] }",
                "forEach": "function forEach() { [native code] }",
                "keys": "function keys() { [native code] }",
                "size": 0,
                "values": "function values() { [native code] }"
            },
            "actions": {
                "BACKGROUND_SYNC": "(e,t)=>this.handleBackgroundSync(e,t)",
                "CHANNEL_CREATE": "(e,t)=>this.handleChannelCreate(e,t)",
                "CHANNEL_DELETE": "(e,t)=>this.handleChannelDelete(e,t)",
                "CHANNEL_UPDATES": "(e,t)=>this.handleChannelUpdates(e,t)",
                "CONNECTION_OPEN": "(e,t)=>this.handleConnectionOpen(e,t)",
                "GUILD_CREATE": "(e,t)=>this.handleGuildCreate(e,t)",
                "GUILD_DELETE": "(e,t)=>this.handleGuildDelete(e,t)",
                "GUILD_EMOJIS_UPDATE": "(e,t)=>this.handleGuildEmojisUpdate(e,t)",
                "GUILD_ROLE_CREATE": "(e,t)=>this.handleGuildRoleChange(e,t)",
                "GUILD_ROLE_DELETE": "(e,t)=>this.handleGuildRoleDelete(e,t)",
                "GUILD_ROLE_UPDATE": "(e,t)=>this.handleGuildRoleChange(e,t)",
                "GUILD_STICKERS_UPDATE": "(e,t)=>this.handleGuildStickersUpdate(e,t)",
                "GUILD_UPDATE": "(e,t)=>this.handleGuildUpdate(e,t)"
            },
            "getCommittedVersions": "async getCommittedVersions(){try{let e=r.default.guildVersions();if(null==e)return{};let t=(await e.getMany()).map(e=>[e.id,e.version]);return Object.fromEntries(t??[])}catch(e){return a.warn(\"couldn't load guild versions\",e),{}}}",
            "remove": "remove(e,t){this.deleteWith(e),this.commit(t)}",
            "handleBackgroundSync": "handleBackgroundSync(e,t){for(let n of e.guilds)\"unavailable\"!==n.data_mode&&this.updateWith(n.id,[n]),null==i.default.getGuild(n.id)&&this.remove(n.id,t);this.commit(t)}",
            "handleConnectionOpen": "handleConnectionOpen(e,t){for(let t of(this.reset(),e.guilds))this.updateWith(t.id,[t]);this.commit(t)}",
            "handleGuildCreate": "handleGuildCreate(e,t){let n=e.guild,s=e.guild.id;this.updateWith(s,[n]),this.updateWith(s,n.emojis),this.updateWith(s,n.stickers),this.updateWith(s,n.channels),this.updateWith(s,n.channelUpdates?.writes),this.updateWith(s,Array.isArray(n.roles)?n.roles:Object.values(n.roles)),this.commit(t)}",
            "handleGuildUpdate": "handleGuildUpdate(e,t){let n=e.guild,s=e.guild.id;this.updateWith(s,[n]),this.updateWith(s,n.emojis),this.updateWith(s,n.stickers),this.updateWith(s,Array.isArray(n.roles)?n.roles:Object.values(n.roles)),this.commit(t)}",
            "handleGuildDelete": "handleGuildDelete(e,t){this.deleteWith(e.guild.id),this.commit(t)}",
            "handleGuildRoleChange": "handleGuildRoleChange(e,t){this.updateWith(e.guildId,[e.role]),this.commit(t)}",
            "handleGuildRoleDelete": "handleGuildRoleDelete(e,t){this.updateWith(e.guildId,[{version:e.version}]),this.commit(t)}",
            "handleGuildEmojisUpdate": "handleGuildEmojisUpdate(e,t){this.updateWith(e.guildId,e.emojis),this.commit(t)}",
            "handleGuildStickersUpdate": "handleGuildStickersUpdate(e,t){this.updateWith(e.guildId,e.stickers),this.commit(t)}",
            "handleChannelCreate": "handleChannelCreate(e,t){null!=e.channel.guild_id&&this.updateWith(e.channel.guild_id,[e.channel]),this.commit(t)}",
            "handleChannelUpdates": "handleChannelUpdates(e,t){for(let t of e.channels)null!=t.guild_id&&this.updateWith(t.guild_id,[t]);this.commit(t)}",
            "handleChannelDelete": "handleChannelDelete(e,t){null!=e.channel.guild_id&&this.updateWith(e.channel.guild_id,[e.channel]),this.commit(t)}",
            "resetInMemoryState": "resetInMemoryState(){this.reset()}",
            "reset": "reset(){this.committed=new Map,this.pending=new Map}",
            "deleteWith": "deleteWith(e){this.pending.set(e,null)}",
            "updateWith": "updateWith(e,t){if(null!=t){let n=Math.max(this.committed.get(e)??0,this.pending.get(e)??0),s=this.computeLatestVersion(n,t);s>n&&this.pending.set(e,s)}}",
            "computeLatestVersion": "computeLatestVersion(e,t){let n=e;for(let e of t)n=Math.max(n,e.version??0);return n}",
            "commit": "commit(e){if(this.pending.size>0){let t=r.default.guildVersionsTransaction(e);for(let[e,n]of this.pending)null!=n?(t.put({id:e,version:n}),this.committed.set(e,n)):(t.delete(e),this.committed.delete(e));this.pending.clear()}}"
        }
    }
}