{
    "exports": {
        "BrowserTracing": "class d{__init(){this.name=\"BrowserTracing\"}__init2(){this._hasSetTracePropagationTargets=!1}constructor(t){d.prototype.__init.call(this),d.prototype.__init2.call(this),(0,r.addTracingExtensions)(),(\"undefined\"==typeof __SENTRY_DEBUG__||__SENTRY_DEBUG__)&&(this._hasSetTracePropagationTargets=!!(t&&(t.tracePropagationTargets||t.tracingOrigins))),this.options={...c,...t},void 0!==this.options._experiments.enableLongTask&&(this.options.enableLongTask=this.options._experiments.enableLongTask),t&&!t.tracePropagationTargets&&t.tracingOrigins&&(this.options.tracePropagationTargets=t.tracingOrigins),this._collectWebVitals=(0,s.startTrackingWebVitals)(),this.options.enableLongTask&&(0,s.startTrackingLongTasks)(),this.options._experiments.enableInteractions&&(0,s.startTrackingInteractions)()}setupOnce(t,e){this._getCurrentHub=e;let n=e().getClient(),r=n&&n.getOptions(),{routingInstrumentation:s,startTransactionOnLocationChange:l,startTransactionOnPageLoad:u,markBackgroundTransactions:c,traceFetch:d,traceXHR:h,shouldCreateSpanForRequest:f,enableHTTPTimings:p,_experiments:_}=this.options,g=r&&r.tracePropagationTargets,m=g||this.options.tracePropagationTargets;(\"undefined\"==typeof __SENTRY_DEBUG__||__SENTRY_DEBUG__)&&this._hasSetTracePropagationTargets&&g&&i.logger.warn(\"[Tracing] The `tracePropagationTargets` option was set in the BrowserTracing integration and top level `Sentry.init`. The top level `Sentry.init` value is being used.\"),s(t=>{let n=this._createRouteTransaction(t);return this.options._experiments.onStartRouteTransaction&&this.options._experiments.onStartRouteTransaction(n,t,e),n},u,l),c&&(0,a.registerBackgroundTabDetection)(),_.enableInteractions&&this._registerInteractionListener(),(0,o.instrumentOutgoingRequests)({traceFetch:d,traceXHR:h,tracePropagationTargets:m,shouldCreateSpanForRequest:f,enableHTTPTimings:p})}_createRouteTransaction(t){if(!this._getCurrentHub){(\"undefined\"==typeof __SENTRY_DEBUG__||__SENTRY_DEBUG__)&&i.logger.warn(`[Tracing] Did not create ${t.op} transaction because _getCurrentHub is invalid.`);return}let e=this._getCurrentHub(),{beforeNavigate:n,idleTimeout:a,finalTimeout:o,heartbeatInterval:l}=this.options,c=\"pageload\"===t.op,d=c?h(\"sentry-trace\"):\"\",f=c?h(\"baggage\"):\"\",{traceparentData:p,dynamicSamplingContext:_,propagationContext:g}=(0,i.tracingContextFromHeaders)(d,f),m={...t,...p,metadata:{...t.metadata,dynamicSamplingContext:p&&!_?{}:_},trimEnd:!0},y=\"function\"==typeof n?n(m):m,v=void 0===y?{...m,sampled:!1}:y;v.metadata=v.name!==m.name?{...v.metadata,source:\"custom\"}:v.metadata,this._latestRouteName=v.name,this._latestRouteSource=v.metadata&&v.metadata.source,!1===v.sampled&&(\"undefined\"==typeof __SENTRY_DEBUG__||__SENTRY_DEBUG__)&&i.logger.log(`[Tracing] Will not send ${v.op} transaction because of beforeNavigate.`),(\"undefined\"==typeof __SENTRY_DEBUG__||__SENTRY_DEBUG__)&&i.logger.log(`[Tracing] Starting ${v.op} transaction on scope`);let{location:E}=u.WINDOW,b=(0,r.startIdleTransaction)(e,v,a,o,!0,{location:E},l),S=e.getScope();return c&&p?S.setPropagationContext(g):S.setPropagationContext({traceId:b.traceId,spanId:b.spanId,parentSpanId:b.parentSpanId,sampled:!!b.sampled}),b.registerBeforeFinishCallback(t=>{this._collectWebVitals(),(0,s.addPerformanceEntries)(t)}),b}_registerInteractionListener(){let t;let e=()=>{let{idleTimeout:e,finalTimeout:n,heartbeatInterval:a}=this.options,s=\"ui.action.click\",o=(0,r.getActiveTransaction)();if(o&&o.op&&[\"navigation\",\"pageload\"].includes(o.op)){(\"undefined\"==typeof __SENTRY_DEBUG__||__SENTRY_DEBUG__)&&i.logger.warn(`[Tracing] Did not create ${s} transaction because a pageload or navigation transaction is in progress.`);return}if(t&&(t.setFinishReason(\"interactionInterrupted\"),t.finish(),t=void 0),!this._getCurrentHub){(\"undefined\"==typeof __SENTRY_DEBUG__||__SENTRY_DEBUG__)&&i.logger.warn(`[Tracing] Did not create ${s} transaction because _getCurrentHub is invalid.`);return}if(!this._latestRouteName){(\"undefined\"==typeof __SENTRY_DEBUG__||__SENTRY_DEBUG__)&&i.logger.warn(`[Tracing] Did not create ${s} transaction because _latestRouteName is missing.`);return}let l=this._getCurrentHub(),{location:c}=u.WINDOW,d={name:this._latestRouteName,op:s,trimEnd:!0,metadata:{source:this._latestRouteSource||\"url\"}};t=(0,r.startIdleTransaction)(l,d,e,n,!0,{location:c},a)};[\"click\"].forEach(t=>{addEventListener(t,e,{once:!1,capture:!0})})}}"
    }
}