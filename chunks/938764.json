{
    "exports": {
        "default": "class m extends a.PureComponent{static #e=this.defaultProps={minValue:0,maxValue:100,handleSize:16};componentDidMount(){this.updateMediaBar()}componentDidUpdate(e){(this.props.value!==e.value||this.props.muted!==e.muted)&&this.updateMediaBar()}updateMediaBar(){let{muted:e,value:t,maxValue:n}=this.props,i=this._mediaBar.current;null!=i&&(e?i.setGrabber(0):i.setGrabber(t/n))}render(){let{iconClassName:e,className:t,sliderWrapperClassName:n,sliderClassName:a,currentWindow:s,muted:m,minValue:h,maxValue:E,value:_,onVolumeShow:I,onVolumeHide:C}=this.props,{hovered:y,focused:S,dragging:g}=this.state,x=u.default;return m||_===h?x=d.default:_<E/2&&(x=c.default),(0,i.jsxs)(\"div\",{className:l()(t,p.container),onMouseEnter:()=>{clearTimeout(this._hoverTimeout),this.setState({hovered:!0}),I?.()},onMouseLeave:()=>{clearTimeout(this._hoverTimeout),this._hoverTimeout=setTimeout(()=>{this.setState({hovered:!1}),C?.()},150)},onFocus:()=>this.setState({focused:!0}),onBlur:()=>this.setState({focused:!1}),onKeyDown:this.handleKeyDown,children:[(0,i.jsx)(\"div\",{className:l()(p.volumeButtonSlider,n,{[p.sliderVisible]:y||S||g}),onMouseEnter:()=>{clearTimeout(this._hoverTimeout),this.setState({hovered:!0})},onMouseLeave:()=>{clearTimeout(this._hoverTimeout),this._hoverTimeout=setTimeout(()=>this.setState({hovered:!1}),150)},children:(0,i.jsx)(o.default,{sliderClassName:a,type:o.default.Types.VOLUME,value:_/E,onDrag:this.handleValueChange,onDragStart:this.handleDragStart,onDragEnd:this.handleDragEnd,currentWindow:s,ref:this._mediaBar})}),(0,i.jsx)(r.Button,{className:p.volumeButton,\"aria-label\":f.default.Messages.CONTROL_VOLUME,size:r.Button.Sizes.NONE,look:r.Button.Looks.BLANK,onClick:this.handleToggleMute,children:(0,i.jsx)(x,{className:e})})]})}constructor(...e){super(...e),this._mediaBar=a.createRef(),this.state={hovered:!1,focused:!1,dragging:!1},this.handleValueChange=e=>{let{maxValue:t,onValueChange:n}=this.props;n?.(e*t)},this.handleToggleMute=()=>{let{onToggleMute:e}=this.props;e?.()},this.handleKeyDown=e=>{let{minValue:t,value:n,maxValue:i,onValueChange:a}=this.props,s=.05*(i-t);switch(e.key){case\"ArrowUp\":e.stopPropagation(),e.preventDefault(),a?.(Math.min(i,n+s));break;case\"ArrowDown\":e.stopPropagation(),e.preventDefault(),a?.(Math.max(t,n-s))}},this.handleDragStart=()=>{this.setState({dragging:!0})},this.handleDragEnd=()=>{this.setState({dragging:!1})},this.blur=()=>{this.setState({focused:!1})}}}"
    }
}