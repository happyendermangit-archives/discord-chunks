{
    "exports": {
        "default": "class u extends i.Component{componentDidMount(){if(this.props.active){let e=this.getVisibilityObserver();e.observe(this),this.isVisible=e.isVisible(this),this.props.onChange(this.isVisible)}}componentDidUpdate(e){let t=this.getVisibilityObserver(),n=t.isVisible(this);this.props.active&&n!==this.isVisible&&this.props.onChange(n),!e.active&&this.props.active?t.observe(this):e.active&&!this.props.active&&t.unobserve(this),this.isVisible=n}componentWillUnmount(){this.getVisibilityObserver().unobserve(this)}getVisibilityObserverId(){let{rootMargin:e,threshold:t}=this.props;return\"\".concat(this.elementId,\" \").concat(e,\" \").concat(t)}getVisibilityObserver(){let e=this.getVisibilityObserverId(),t=o.get(e);if(!t)throw Error(\"Visibility sensor with id \".concat(e,\" not found.\"));return t}render(){return i.Children.only(this.props.children)}constructor(e){super(e),this.isVisible=!1;let{root:t,rootMargin:n,threshold:i}=e;t?a.has(t)?this.elementId=a.get(t)||\"\":a.set(t,(0,s.v4)()):this.elementId=l;let u=this.getVisibilityObserverId();!o.has(u)&&o.set(u,new r.default({root:t,rootMargin:n,threshold:i}))}}"
    }
}