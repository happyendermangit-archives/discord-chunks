{
    "exports": {
        "autoMigrateToNewSystem": "function B(){let e=Object.values(A.default.getGuilds()),t={};for(let n of e){let e=(O.default.getAllSettings().userGuildSettings[n.id]??{}).flags??0;e=(0,C.setFlag)(e,G.GuildNotificationSettingsFlags.UNREADS_ALL_MESSAGES,!0),e=(0,C.setFlag)(e,G.GuildNotificationSettingsFlags.UNREADS_ONLY_MENTIONS,!1),t[n.id]={flags:e}}F(t),R.default.track(U.AnalyticEvents.NOTIFICATION_MIGRATION_COMPLETED,{auto_migrated:!0,num_unread_guids_after:e.filter(e=>S.default.hasUnread(e.id)).length})}",
        "hasGoodCandidateServers": "function b(e,t){return Object.values(A.default.getGuilds()).some(n=>{let[i]=c.default.hasConsented(U.Consents.PERSONALIZATION)?(0,f.guessGuildModeWithRemoteData)(n,M.defaultThresholds,e,t,!1):(0,f.guessGuildModeWithLocalData)(n,e);return i===M.Mode.UseGreyDot})}",
        "revertToOldSystem": "async function Y(){s.default.set(\"turnedOffNewNotifications\",!0),R.default.track(U.AnalyticEvents.NOTIFICATION_MIGRATION_OPTOUT,{num_guilds_with_new_setting:Object.values(A.default.getGuilds()).filter(e=>O.default.resolveGuildUnreadSetting(e)===g.UnreadSetting.ONLY_MENTIONS).length});let e=await (0,m.listSnapshots)(),t=o().sortBy(e,e=>new Date(e.recorded_at).getTime());if(t.length>0){let e=t[t.length-1];await new Promise(t=>E.default.show({title:\"Please Confirm\",body:`This will turn off the new notification system and restore your notification settings to a backup created on ${new Date(e.recorded_at).toLocaleDateString()}`,onConfirm:t,cancelText:\"Cancel\",onCancel:()=>{}})),await (0,m.restoreSnapshot)(e.id),await l.default.setAccountFlag(P.AccountNotificationFlags.USE_NEW_NOTIFICATIONS,!1)}else await l.default.setAccountFlag(P.AccountNotificationFlags.USE_NEW_NOTIFICATIONS,!1)}",
        "transformUsageData": "function W(e){if(null==e)return[];let t=o().keyBy(e.voice_joins??[],\"channel_id\"),n=o().keyBy(e.message_sends??[],\"channel_id\");return(e.channel_opens??[]).map(e=>{let i=t[e.channel_id]??{},r=n[e.channel_id]??{};return{channel_id:e.channel_id,num_year_opens:Number(e.year_opens??0),num_month_opens:Number(e.one_month_opens??0),num_three_month_opens:Number(e.three_month_opens??0),num_six_month_opens:Number(e.six_month_opens??0),num_messages:Number(r?.num_messages??0),num_year_voice_joins:Number(i?.year_opens??0),num_month_voice_joins:Number(i?.one_month_opens??0),num_three_month_voice_joins:Number(i?.three_month_opens??0),num_six_month_voice_joins:Number(i?.six_month_opens??0)}}).filter(h.isNotNullish)}",
        "useGuildMigrationSteps": "function v(e,t){let[n,r]=i.useState(M.defaultThresholds),[s,_]=i.useState({});(0,T.useFrecencySettings)();let E=(0,a.useStateFromStoresArray)([A.default],()=>Object.values(A.default.getGuilds())),l=i.useCallback(()=>{let i={};for(let r of E)i[r.id]=function(e,t,n,i,r){let[o,a,s]=c.default.hasConsented(U.Consents.PERSONALIZATION)?(0,f.guessGuildModeWithRemoteData)(e,t,n,i,!0):(0,f.guessGuildModeWithLocalData)(e,n),_=n.filter(t=>t.guild_id===e.id)[0]??{},E=(0,p.default)(e,r??o,_,i,t);return{guildId:e.id,mode:o,debugReason:s,actions:E,overrideMode:r,messagePain:_.messages===M.PainLevel.High,visitsALot:a,muted:O.default.isMuted(e.id)&&!O.default.isTemporarilyMuted(e.id)}}(r,n,e,t,s[r.id]);return i},[E,n,e,t,s]),[u,I]=i.useState(()=>l());return i.useEffect(()=>I(l()),[l]),{guildPlans:u,overrideGuild:i.useCallback((e,t)=>{_(n=>({...n,[e]:t}))},[]),setThresholds:r,getDebug:()=>(function(e,t){let n=t.reduce((e,t)=>e+Number(t.num_year_opens??0),0),i=t.reduce((e,t)=>e+Number(t.num_month_opens??0),0),r=N.default.getFlattenedGuildIds(),a=o().sortBy(Object.values(e),e=>{let t=r.indexOf(e.guildId);return -1===t?r.length:t}),s=[[\"Use Grey Dot\",new Set([M.Mode.UseGreyDot])],[\"Keep As Is\",new Set([M.Mode.KeepAsIs])]].map(e=>{let[t,n]=e,i=a.filter(e=>n.has(e.overrideMode??e.mode)).map(e=>{let t=A.default.getGuild(e.guildId),n=e.actions.map(e=>`- ${e.label}${e.debug??\"\"}`).join(\"\\n\");return`### ${t.name}\n**Reasoning**: ${e.debugReason}**ActionPlan**:\n${n}`});return`# ${t}\n\n${i.join(\"\\n\\n\")}`});return`\n# Basic Stats\n- Total channel visits (yr): ${n}\n- Total channel visits (month): ${i}\n\n${s.join(\"\\n\\n\")}`})(Object.values(u),t)}}",
        "useSaveSettings": "function w(e){let[t,n]=i.useState(!1),[r,o]=i.useState(!1),a=i.useCallback(async t=>{if(r)throw Error(\"Already submitted notifications migration\");n(!0);try{await H(t,e),o(!0)}finally{n(!1)}},[r,e]);return{submitting:t,submitted:r,saveSettings:a}}"
    }
}