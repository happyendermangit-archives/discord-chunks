{
    "exports": {
        "setAwaitOnline": "function o(e){a=e}",
        "importWithRetry": "async function u(e){let{createPromise:t,webpackId:i}=e,r=500,s=0;for(;;)try{return await t()}catch(e){if(console.log(e),i in n.c)throw console.log(\"Module was found in webpack cache so it has loaded from the network and webpack will not retry\"),e;if(s>=50)throw e;await l(r),await a(),r=Math.min(5e3,2*r),s++}}",
        "makeLazy": "function c(e){let{createPromise:t,webpackId:n,renderLoader:a,name:o,memo:l=!1}=e,c=r.lazy(()=>u({createPromise:t,webpackId:n})),d=e=>(0,i.jsx)(r.Suspense,{fallback:null!=a?a():s()(),children:(0,i.jsx)(c,{...e})});return l&&(d=r.memo(d)),d.displayName=\"Suspense(\".concat(o||\"Unknown\",\")\"),d}",
        "LazyLibrary": "function d(e){let{createPromise:t,webpackId:n,render:s,renderFallback:a}=e,[o,l]=r.useState(null);return r.useEffect(()=>{u({createPromise:t,webpackId:n}).then(e=>{let{default:t}=e;return l(t)})},[]),(0,i.jsx)(i.Fragment,{children:null==o?a():s(o)})}"
    }
}