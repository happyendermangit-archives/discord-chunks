{
    "exports": {
        "default": "class I{static initialize(){l=!0,E.forEach(e=>e.initializeIfNeeded()),null!=i&&i()}static #e=this.initialized=u;static destroy(){E.length=0,_.default.destroy()}static getAll(){return E}constructor(e,t,n){this._changeCallbacks=new s.default,this._reactChangeCallbacks=new s.default,this._isInitialized=!1,this.addChangeListener=this._changeCallbacks.add,this.addConditionalChangeListener=this._changeCallbacks.addConditional,this.removeChangeListener=this._changeCallbacks.remove,this.addReactChangeListener=this._reactChangeCallbacks.add,this.removeReactChangeListener=this._reactChangeCallbacks.remove,this._dispatcher=e,this._dispatchToken=this._dispatcher.createToken(),this.registerActionHandlers(t??{},n),E.push(this),l&&this.initializeIfNeeded()}registerActionHandlers(e,t){this._dispatcher.register(this.getName(),e,e=>{(this._changeCallbacks.hasAny()||this._reactChangeCallbacks.hasAny())&&(_.default.markChanged(this),_.default.getIsPaused()&&null!=this._mustEmitChanges&&this._mustEmitChanges(e)&&_.default.resume(!1))},t,this._dispatchToken)}getName(){return this.constructor.displayName??this.constructor.name}initializeIfNeeded(){if(!this._isInitialized){let e=Date.now();this.initialize(),this._isInitialized=!0;let t=Date.now()-e;t>5&&a.default.mark(\"\\uD83E\\uDDA5\",this.getName()+\".initialize()\",t)}}initialize(){}syncWith(e,t,n){var i,r;let o;this.waitFor(...e);let a=0,s=()=>{a!==_.default.getChangeSentinel()&&(a=_.default.getChangeSentinel(),!1!==t()&&this.emitChange())};i=n??0,r=s,o=null,s=0===i?function(){clearImmediate(o),o=setImmediate(r)}:function(){null==o&&(o=setTimeout(()=>{try{r()}finally{o=null}},i))},e.forEach(e=>e.addChangeListener(s))}waitFor(){for(var e=arguments.length,t=Array(e),n=0;n<e;n++)t[n]=arguments[n];let i=t.map((e,t)=>(o()(null!=e,`Store.waitFor(...) called with null Store at index ${t} for store ${this.getName()}`),null!=e._dispatcher)?(o()(e._dispatcher===this._dispatcher,\"Stores belong to two separate dispatchers.\"),e.getDispatchToken()):null);this._dispatcher.addDependencies(this.getDispatchToken(),i.filter(e=>null!=e))}emitChange(){_.default.markChanged(this)}getDispatchToken(){return this._dispatchToken}mustEmitChanges(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:()=>!0;this._mustEmitChanges=e}}"
    }
}