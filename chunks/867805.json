{
    "exports": {
        "DIVERSITY_SURROGATES": [
            "🏻",
            "🏼",
            "🏽",
            "🏾",
            "🏿"
        ],
        "default": {
            "getDefaultDiversitySurrogate": "function(){return d}",
            "setDefaultDiversitySurrogate": "function(e){d=null!=e&&\"\"!==e?e:null}",
            "getCategories": "function(){return Object.keys(u)}",
            "getByName": "function(e){return Object.prototype.hasOwnProperty.call(l,e)?l[e]:null}",
            "getByCategory": "function(e){return u[e]}",
            "translateInlineEmojiToSurrogates": "function(e){return e.replace(E,(e,t)=>P(t,e))}",
            "maybeTranslateSurrogatesToInlineEmoji": "function(e){if(!y.test(e))return null;let t=O(e,!0).map(e=>\"text\"===e.type?e.text:e.emojiName).join(\"\");return t===e?null:t}",
            "findInlineEmojisFromSurrogates": "function O(e,t){var n;if(!0!==t&&!y.test(e))return[{type:\"text\",text:e}];let s=\"\",i=[],r=null!==(n=e.match(T))&&void 0!==n?n:[];for(let e=0;e<r.length;e++){let t=r[e];if(null!=s&&\"\"!==s){if(t===A)t=s+t,s=\"\";else if(N.test(t)){s+=t;continue}else i.push(I(s)),s=\"\"}else if(t===D){s=t;continue}let n=I(t);if(i.length>0){let e=i[i.length-1];if(\"text\"===n.type&&\"text\"===e.type){e.text+=n.text;continue}}i.push(n)}return null!=s&&\"\"!==s&&i.push(I(s)),i}",
            "translateSurrogatesToInlineEmoji": "function(e){return O(e).map(e=>\"text\"===e.type?e.text:e.emojiName).join(\"\")}",
            "convertNameToSurrogate": "function P(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:\"\";return Object.prototype.hasOwnProperty.call(f,e)?f[e]:t}",
            "convertSurrogateToName": "function(e){let t=!(arguments.length>1)||void 0===arguments[1]||arguments[1],n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:\"\",s=n;return Object.prototype.hasOwnProperty.call(_,e)&&(s=_[e]),t?\":\".concat(s,\":\"):s}",
            "convertShortcutToName": "function(e){let t=!(arguments.length>1)||void 0===arguments[1]||arguments[1],n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:\"\",s=n;return Object.prototype.hasOwnProperty.call(p,e)&&(s=p[e]),t?\":\".concat(s,\":\"):s}",
            "forEach": "e=>i.each(c,e)",
            "all": "()=>c",
            "numDiversitySprites": 292,
            "numNonDiversitySprites": 1604,
            "EMOJI_NAME_RE": {
                "exec": "function exec() { [native code] }",
                "dotAll": false,
                "flags": "",
                "global": false,
                "hasIndices": false,
                "ignoreCase": false,
                "multiline": false,
                "source": "^:([^\\s:]+?(?:::skin-tone-\\d)?):",
                "sticky": false,
                "unicode": false,
                "compile": "function compile() { [native code] }",
                "test": "function test() { [native code] }",
                "unicodeSets": false
            },
            "EMOJI_NAME_AND_DIVERSITY_RE": {
                "exec": "function exec() { [native code] }",
                "dotAll": false,
                "flags": "",
                "global": false,
                "hasIndices": false,
                "ignoreCase": false,
                "multiline": false,
                "source": "^:([^\\s:]+?(?:::skin-tone-\\d)?):",
                "sticky": false,
                "unicode": false,
                "compile": "function compile() { [native code] }",
                "test": "function test() { [native code] }",
                "unicodeSets": false
            },
            "EMOJI_SHORTCUT_RE": {
                "exec": "function exec() { [native code] }",
                "dotAll": false,
                "flags": "",
                "global": false,
                "hasIndices": false,
                "ignoreCase": false,
                "multiline": false,
                "source": "^(>:\\(|>:\\-\\(|>=\\(|>=\\-\\(|:\"\\)|:\\-\"\\)|=\"\\)|=\\-\"\\)|<\\/3|<\\\\3|:\\-\\\\|:\\-\\/|=\\-\\\\|=\\-\\/|:'\\(|:'\\-\\(|:,\\(|:,\\-\\(|='\\(|='\\-\\(|=,\\(|=,\\-\\(|:\\(|:\\-\\(|=\\(|=\\-\\(|<3|♡|\\]:\\(|\\]:\\-\\(|\\]=\\(|\\]=\\-\\(|o:\\)|O:\\)|o:\\-\\)|O:\\-\\)|0:\\)|0:\\-\\)|o=\\)|O=\\)|o=\\-\\)|O=\\-\\)|0=\\)|0=\\-\\)|:'D|:'\\-D|:,D|:,\\-D|='D|='\\-D|=,D|=,\\-D|:\\*|:\\-\\*|=\\*|=\\-\\*|x\\-\\)|X\\-\\)|:\\||:\\-\\||=\\||=\\-\\||:o|:\\-o|:O|:\\-O|=o|=\\-o|=O|=\\-O|:@|:\\-@|=@|=\\-@|:D|:\\-D|=D|=\\-D|:'\\)|:'\\-\\)|:,\\)|:,\\-\\)|='\\)|='\\-\\)|=,\\)|=,\\-\\)|:\\)|:\\-\\)|=\\)|=\\-\\)|\\]:\\)|\\]:\\-\\)|\\]=\\)|\\]=\\-\\)|:,'\\(|:,'\\-\\(|;\\(|;\\-\\(|=,'\\(|=,'\\-\\(|:P|:\\-P|=P|=\\-P|8\\-\\)|B\\-\\)|,:\\(|,:\\-\\(|,=\\(|,=\\-\\(|,:\\)|,:\\-\\)|,=\\)|,=\\-\\)|:s|:\\-S|:z|:\\-Z|:\\$|:\\-\\$|=s|=\\-S|=z|=\\-Z|=\\$|=\\-\\$|;\\)|;\\-\\))",
                "sticky": false,
                "unicode": false,
                "compile": "function compile() { [native code] }",
                "test": "function test() { [native code] }",
                "unicodeSets": false
            },
            "hasSurrogates": "function(e){return i.toArray(e).some(e=>null!=_[e])}"
        }
    }
}