{
    "exports": {
        "useGuildOnboardingSettingsAvailable": "function _(e){let t=(0,i.useStateFromStores)([o.default],()=>o.default.getGuild(e)),n=!!(null==t?void 0:t.hasFeature(E.GuildFeatures.COMMUNITY)),r=l.default.can(E.Permissions.MANAGE_GUILD,t),s=l.default.can(E.Permissions.MANAGE_ROLES,t);return n&&r&&s}",
        "isGuildOnboardingSettingsAvailable": "function S(e){let t=o.default.getGuild(e),n=!!(null==t?void 0:t.hasFeature(E.GuildFeatures.COMMUNITY)),i=l.default.can(E.Permissions.MANAGE_GUILD,t),r=l.default.can(E.Permissions.MANAGE_ROLES,t);return n&&i&&r}",
        "isBlockedByOnboarding": "function m(e,t){var n;if(null==e||!e.hasFeature(E.GuildFeatures.GUILD_ONBOARDING)||null==t||null==t.joinedAt||new Date(t.joinedAt)<h)return!1;let i=null!==(n=t.flags)&&void 0!==n?n:0;return u.hasFlag(i,p.GuildMemberFlags.STARTED_ONBOARDING)&&!u.hasFlag(i,p.GuildMemberFlags.COMPLETED_ONBOARDING)}",
        "getChannelCoverageForOnboarding": "function g(e,t,n){let i=a.default.getChannels(e);return T(t,n,i[0,a.GUILD_SELECTABLE_CHANNELS_KEY].map(e=>{let{channel:t}=e;return t}))}",
        "useChannelCoverageForOnboarding": "function I(e,t,n){let r=(0,i.useStateFromStores)([a.default],()=>a.default.getChannels(e));return T(t,n,r[0,a.GUILD_SELECTABLE_CHANNELS_KEY].map(e=>{let{channel:t}=e;return t}))}",
        "isChattableChannelId": "function C(e){let t=s.default.getChannel(e);return v(t)}",
        "isChattableChannel": "function v(e){return!!(null!=e&&(0,f.canChannelBeDefault)(e.guild_id,e.id))&&(e.isForumChannel()?d.default.canEveryoneRole(E.Permissions.SEND_MESSAGES_IN_THREADS,e):d.default.canEveryoneRole(E.Permissions.SEND_MESSAGES,e))}",
        "useIsChattableChannel": "function A(e){let t=(0,i.useStateFromStores)([s.default],()=>s.default.getChannel(e));return(0,c.isNotNullish)(t)&&v(t)}",
        "getMinimumSetOfDefaultChannelIds": "function R(e,t,n){let i=arguments.length>3&&void 0!==arguments[3]?arguments[3]:()=>!0,r=O(e,t).map(e=>e.id).filter(i);return n.forEach(t=>{var n,s;if(!t.required)return;let a=O(e,null!==(s=null===(n=t.options[0])||void 0===n?void 0:n.channelIds)&&void 0!==s?s:[]).map(e=>e.id),o=t.options.reduce((t,n)=>{if(null==n.channelIds)return[];let s=O(e,n.channelIds),a=s.map(e=>e.id).filter(e=>i(e)&&!r.includes(e));return a.length<t.length?a:t},a);r.push(...o)}),r}",
        "getChattableDefaultChannels": "function D(e,t){let n=O(e,t),i=a.default.getChannels(e),r=i[a.GUILD_SELECTABLE_CHANNELS_KEY],s=N(n.map(e=>{let{id:t}=e;return t}),r);return[s,n]}",
        "useChattableDefaultChannels": "function y(e,t){let n=function(e,t){let n=(0,i.useStateFromStores)([a.default],()=>a.default.getChannels(e)),r=n[a.GUILD_SELECTABLE_CHANNELS_KEY];return r.filter(e=>{let{channel:n}=e;return(0,f.canChannelBeDefault)(n.guild_id,n.id)&&(t.includes(n.id)&&!n.isCategory()||!n.isThread()&&null!=n.parent_id&&t.includes(n.parent_id))}).map(e=>{let{channel:t}=e;return t})}(e,t),r=(0,i.useStateFromStores)([a.default],()=>a.default.getChannels(e)),s=r[a.GUILD_SELECTABLE_CHANNELS_KEY],o=N(n.map(e=>{let{id:t}=e;return t}),s);return[o,n]}",
        "getSelectedRoleIds": "function P(e){return new Set(e.map(e=>e.roleIds).flat().filter(c.isNotNullish))}",
        "getSelectedChannelIds": "function L(e){return new Set(e.map(e=>e.channelIds).flat().filter(c.isNotNullish))}"
    }
}