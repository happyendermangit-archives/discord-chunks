{
    "exports": {
        "HistoryUtils": {
            "isMerging": "e=>s.get(e)??!0",
            "isSaving": "e=>a.get(e)??!0",
            "withoutMerging": "withoutMerging(e,t){let n=this.isMerging(e);s.set(e,!1);try{t()}finally{s.set(e,n)}}",
            "withoutSaving": "withoutSaving(e,t){let n=this.isSaving(e);a.set(e,!1);try{t()}finally{a.set(e,n)}}",
            "withSingleEntry": "(e,t)=>r(e,\"other\",!1,t)",
            "withMergedEntry": "(e,t)=>r(e,\"other\",!0,t)",
            "currentEntry": "e=>e.history.stack.length>0?e.history.stack[e.history.index]:null",
            "insertOrMergeEntry": "insertOrMergeEntry(e,t){let n=!(arguments.length>2)||void 0===arguments[2]||arguments[2],i=l.currentEntry(e);l.isMerging(e)&&i?.mergeable?this.mergeEntry(e,n):this.insertEntry(e,t,n)}",
            "insertEntry": "insertEntry(e,t){let n=!(arguments.length>2)||void 0===arguments[2]||arguments[2],a=arguments.length>3?arguments[3]:void 0,s=arguments.length>4?arguments[4]:void 0;s=s??e.selection,a=a??i.EditorUtils.richValue(e);let{history:r}=e,o=l.currentEntry(e);for(null!=o&&(o.mergeable=!1),r.stack.length>0&&(r.stack.length=r.index+1);r.stack.length>=250;)r.stack.shift();r.stack.push({type:t,mergeable:n,createdAt:Date.now(),value:a,selection:s}),r.index=r.stack.length-1}",
            "mergeEntry": "mergeEntry(e){let t=!(arguments.length>1)||void 0===arguments[1]||arguments[1],{selection:n}=e,a=i.EditorUtils.richValue(e),s=l.currentEntry(e);null!=s&&(s.value=a,s.selection=n,!t&&(s.mergeable=!1))}"
        }
    }
}