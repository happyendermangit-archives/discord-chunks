{
    "exports": {
        "PROFILE_MAP": {
            "toJSON": "function(){return Array.from(this)}",
            "get": "function get() { [native code] }",
            "set": "function set() { [native code] }",
            "has": "function has() { [native code] }",
            "delete": "function delete() { [native code] }",
            "clear": "function clear() { [native code] }",
            "entries": "function entries() { [native code] }",
            "forEach": "function forEach() { [native code] }",
            "keys": "function keys() { [native code] }",
            "size": 0,
            "values": "function values() { [native code] }"
        },
        "addProfileToMap": "function b(t,e){if(E.set(t,e),E.size>30){let t=E.keys().next().value;E.delete(t)}}",
        "addProfilesToEnvelope": "function _(t,e){if(!e.length)return t;for(let n of e)t[1].push([{type:\"profile\"},n]);return t}",
        "createProfilingEvent": "function v(t,e,n){var r;return((r=e).samples.length<2?((\"undefined\"==typeof __SENTRY_DEBUG__||__SENTRY_DEBUG__)&&a.logger.log(\"[Profiling] Discarding profile because it contains less than 2 samples\"),!1):!!r.frames.length||((\"undefined\"==typeof __SENTRY_DEBUG__||__SENTRY_DEBUG__)&&a.logger.log(\"[Profiling] Discarding profile because it contains no frames\"),!1))?function(t,e,n){if(\"transaction\"!==t.type)throw TypeError(\"Profiling events may only be attached to transactions, this should never occur.\");if(null==e)throw TypeError(`Cannot construct profiling event envelope without a valid profile. Got ${e} instead.`);let r=function(t){let e=t&&t.contexts&&t.contexts.trace&&t.contexts.trace.trace_id;return(\"string\"==typeof e&&32!==e.length&&(\"undefined\"==typeof __SENTRY_DEBUG__||__SENTRY_DEBUG__)&&a.logger.log(`[Profiling] Invalid traceId: ${e} on profiled event`),\"string\"!=typeof e)?\"\":e}(t),p=function(t){return\"thread_metadata\"in t?t:function(t){let e;let n=0,r={samples:[],stacks:[],frames:[],thread_metadata:{[o]:{name:\"main\"}}};if(!t.samples.length)return r;let i=t.samples[0].timestamp,s=\"number\"==typeof performance.timeOrigin?performance.timeOrigin:a.browserPerformanceTimeOrigin||0,l=s-(a.browserPerformanceTimeOrigin||s);for(let a=0;a<t.samples.length;a++){let s=t.samples[a];if(void 0===s.stackId){void 0===e&&(e=n,r.stacks[e]=[],n++),r.samples[a]={elapsed_since_start_ns:((s.timestamp+l-i)*1e6).toFixed(0),stack_id:e,thread_id:o};continue}let u=t.stacks[s.stackId],c=[];for(;u;){c.push(u.frameId);let e=t.frames[u.frameId];void 0===r.frames[u.frameId]&&(r.frames[u.frameId]={function:e.name,abs_path:\"number\"==typeof e.resourceId?t.resources[e.resourceId]:void 0,lineno:e.line,colno:e.column}),u=void 0===u.parentId?void 0:t.stacks[u.parentId]}let d={elapsed_since_start_ns:((s.timestamp+l-i)*1e6).toFixed(0),stack_id:n,thread_id:o};r.stacks[n]=c,r.samples[a]=d,n++}return r}(t)}(e),_=\"number\"==typeof t.start_timestamp?1e3*t.start_timestamp:Date.now(),g=\"number\"==typeof t.timestamp?1e3*t.timestamp:Date.now();return{event_id:n,timestamp:new Date(_).toISOString(),platform:\"javascript\",version:\"1\",release:t.release||\"\",environment:t.environment||i.DEFAULT_ENVIRONMENT,runtime:{name:\"javascript\",version:s.WINDOW.navigator.userAgent},os:{name:l,version:u,build_number:d},device:{locale:f,model:h,manufacturer:d,architecture:c,is_emulator:!1},debug_meta:{images:function(t){let e;let n=a.GLOBAL_OBJ._sentryDebugIds;if(!n)return[];let r=(0,i.getCurrentHub)();if(!r)return[];let s=r.getClient();if(!s)return[];let o=s.getOptions();if(!o)return[];let l=o.stackParser;if(!l)return[];let u=m.get(l);u?e=u:(e=new Map,m.set(l,e));let c=Object.keys(n).reduce((t,r)=>{let i;let a=e.get(r);a?i=a:(i=l(r),e.set(r,i));for(let e=i.length-1;e>=0;e--){let a=i[e],s=a&&a.filename;if(a&&s){t[s]=n[r];break}}return t},{}),d=[];for(let e of t)e&&c[e]&&d.push({type:\"sourcemap\",code_file:e,debug_id:c[e]});return d}(e.resources)},profile:p,transactions:[{name:t.transaction||\"\",id:t.event_id||(0,a.uuid4)(),trace_id:r,active_thread_id:o,relative_start_ns:\"0\",relative_end_ns:((g-_)*1e6).toFixed(0)}]}}(n,e,t):null}",
        "findProfiledTransactionsFromEnvelope": "function g(t){let e=[];return(0,a.forEachEnvelopeItem)(t,(t,n)=>{if(\"transaction\"===n)for(let n=1;n<t.length;n++){let r=t[n];r&&r.contexts&&r.contexts.profile&&r.contexts.profile.profile_id&&e.push(t[n])}}),e}",
        "isValidSampleRate": "function y(t){return\"number\"!=typeof t&&\"boolean\"!=typeof t||\"number\"==typeof t&&isNaN(t)?((\"undefined\"==typeof __SENTRY_DEBUG__||__SENTRY_DEBUG__)&&a.logger.warn(`[Profiling] Invalid sample rate. Sample rate must be a boolean or a number between 0 and 1. Got ${JSON.stringify(t)} of type ${JSON.stringify(typeof t)}.`),!1):!0===t||!1===t||!(t<0)&&!(t>1)||((\"undefined\"==typeof __SENTRY_DEBUG__||__SENTRY_DEBUG__)&&a.logger.warn(`[Profiling] Invalid sample rate. Sample rate must be between 0 and 1. Got ${t}.`),!1)}"
    }
}