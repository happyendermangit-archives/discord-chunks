{
    "exports": {
        "DIVERSITY_SURROGATES": [
            "🏻",
            "🏼",
            "🏽",
            "🏾",
            "🏿"
        ],
        "default": {
            "getDefaultDiversitySurrogate": "function(){return u}",
            "setDefaultDiversitySurrogate": "function(e){u=null!=e&&\"\"!==e?e:null}",
            "getCategories": "function(){return Object.keys(d)}",
            "getByName": "function(e){return Object.prototype.hasOwnProperty.call(l,e)?l[e]:null}",
            "getByCategory": "function(e){return d[e]}",
            "translateInlineEmojiToSurrogates": "function(e){return e.replace(p,(e,t)=>R(t,e))}",
            "maybeTranslateSurrogatesToInlineEmoji": "function(e){if(!y.test(e))return null;let t=O(e,!0).map(e=>\"text\"===e.type?e.text:e.emojiName).join(\"\");return t===e?null:t}",
            "findInlineEmojisFromSurrogates": "function O(e,t){if(!0!==t&&!y.test(e))return[{type:\"text\",text:e}];let n=\"\",s=[],i=e.match(I)??[];for(let e=0;e<i.length;e++){let t=i[e];if(null!=n&&\"\"!==n){if(t===A)t=n+t,n=\"\";else if(D.test(t)){n+=t;continue}else s.push(C(n)),n=\"\"}else if(t===N){n=t;continue}let r=C(t);if(s.length>0){let e=s[s.length-1];if(\"text\"===r.type&&\"text\"===e.type){e.text+=r.text;continue}}s.push(r)}return null!=n&&\"\"!==n&&s.push(C(n)),s}",
            "translateSurrogatesToInlineEmoji": "function(e){return O(e).map(e=>\"text\"===e.type?e.text:e.emojiName).join(\"\")}",
            "convertNameToSurrogate": "function R(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:\"\";return Object.prototype.hasOwnProperty.call(f,e)?f[e]:t}",
            "convertSurrogateToName": "function(e){let t=!(arguments.length>1)||void 0===arguments[1]||arguments[1],n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:\"\",s=n;return Object.prototype.hasOwnProperty.call(_,e)&&(s=_[e]),t?`:${s}:`:s}",
            "convertShortcutToName": "function(e){let t=!(arguments.length>1)||void 0===arguments[1]||arguments[1],n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:\"\",s=n;return Object.prototype.hasOwnProperty.call(v,e)&&(s=v[e]),t?`:${s}:`:s}",
            "forEach": "e=>i().each(c,e)",
            "all": "()=>c",
            "numDiversitySprites": 292,
            "numNonDiversitySprites": 1604,
            "EMOJI_NAME_RE": {
                "exec": "function exec() { [native code] }",
                "dotAll": false,
                "flags": "",
                "global": false,
                "hasIndices": false,
                "ignoreCase": false,
                "multiline": false,
                "source": "^:([^\\s:]+?(?:::skin-tone-\\d)?):",
                "sticky": false,
                "unicode": false,
                "compile": "function compile() { [native code] }",
                "test": "function test() { [native code] }",
                "unicodeSets": false
            },
            "EMOJI_NAME_AND_DIVERSITY_RE": {
                "exec": "function exec() { [native code] }",
                "dotAll": false,
                "flags": "",
                "global": false,
                "hasIndices": false,
                "ignoreCase": false,
                "multiline": false,
                "source": "^:([^\\s:]+?(?:::skin-tone-\\d)?):",
                "sticky": false,
                "unicode": false,
                "compile": "function compile() { [native code] }",
                "test": "function test() { [native code] }",
                "unicodeSets": false
            },
            "EMOJI_SHORTCUT_RE": {
                "exec": "function exec() { [native code] }",
                "dotAll": false,
                "flags": "",
                "global": false,
                "hasIndices": false,
                "ignoreCase": false,
                "multiline": false,
                "source": "^(>:\\(|>:\\-\\(|>=\\(|>=\\-\\(|:\"\\)|:\\-\"\\)|=\"\\)|=\\-\"\\)|<\\/3|<\\\\3|:\\-\\\\|:\\-\\/|=\\-\\\\|=\\-\\/|:'\\(|:'\\-\\(|:,\\(|:,\\-\\(|='\\(|='\\-\\(|=,\\(|=,\\-\\(|:\\(|:\\-\\(|=\\(|=\\-\\(|<3|♡|\\]:\\(|\\]:\\-\\(|\\]=\\(|\\]=\\-\\(|o:\\)|O:\\)|o:\\-\\)|O:\\-\\)|0:\\)|0:\\-\\)|o=\\)|O=\\)|o=\\-\\)|O=\\-\\)|0=\\)|0=\\-\\)|:'D|:'\\-D|:,D|:,\\-D|='D|='\\-D|=,D|=,\\-D|:\\*|:\\-\\*|=\\*|=\\-\\*|x\\-\\)|X\\-\\)|:\\||:\\-\\||=\\||=\\-\\||:o|:\\-o|:O|:\\-O|=o|=\\-o|=O|=\\-O|:@|:\\-@|=@|=\\-@|:D|:\\-D|=D|=\\-D|:'\\)|:'\\-\\)|:,\\)|:,\\-\\)|='\\)|='\\-\\)|=,\\)|=,\\-\\)|:\\)|:\\-\\)|=\\)|=\\-\\)|\\]:\\)|\\]:\\-\\)|\\]=\\)|\\]=\\-\\)|:,'\\(|:,'\\-\\(|;\\(|;\\-\\(|=,'\\(|=,'\\-\\(|:P|:\\-P|=P|=\\-P|8\\-\\)|B\\-\\)|,:\\(|,:\\-\\(|,=\\(|,=\\-\\(|,:\\)|,:\\-\\)|,=\\)|,=\\-\\)|:s|:\\-S|:z|:\\-Z|:\\$|:\\-\\$|=s|=\\-S|=z|=\\-Z|=\\$|=\\-\\$|;\\)|;\\-\\))",
                "sticky": false,
                "unicode": false,
                "compile": "function compile() { [native code] }",
                "test": "function test() { [native code] }",
                "unicodeSets": false
            },
            "hasSurrogates": "function(e){return i().toArray(e).some(e=>null!=_[e])}"
        }
    }
}