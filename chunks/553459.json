{
    "exports": {
        "default": "class u extends s.default{constructor(e,t=\"POST\",n){super(e,t,n)}async uploadFiles(e,t){let{addFilesTo:n}=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};super.upload({name:o.default.Messages.ATTACHMENT_PROCESSING},t,e);let i=new AbortController;try{if(this.files=e,this._aborted)return;if(this._handleStart(()=>i.abort()),!await this.compressAndCheckFileSize())return;this.setUploadingTextForUI(),await (0,s.stageAttachmentFiles)(this.files,!0,this._recomputeProgress.bind(this))}catch(e){this._handleException(e)}try{return await this._createMessage(i.signal,t,n)}catch(e){if(this._raiseEndpointErrors)throw e;this._handleException(e)}}async _createMessage(e,t,n){let s;let o=[];this.files.forEach((e,t)=>{let n=(0,r.getAttachmentPayload)(e,t);e.item.platform===l.UploadPlatform.WEB&&o.push({...n})}),s=null!=n&&null!=t?this._addAttachmentsToPayload(t,n,o):{...t,attachments:o};let u={url:this._url,body:s,signal:e},d=\"POST\"===this._method?i.default.post:i.default.patch;try{let e=await d(u);return this._handleComplete(e.body),e.body}catch(e){if(this._raiseEndpointErrors)throw new a.APIError(e);this._handleError({code:e?.body?.code,body:e?.body})}}}"
    }
}