{
    "exports": {
        "default": {
            "addGame": "addGame(t){l.default.dispatch({type:\"RUNNING_GAME_ADD_OVERRIDE\",pid:t})}",
            "toggleOverlay": "toggleOverlay(t,e){let n=s.default.getGameByName(t.name);if(null!=n){let t=E.default.getActiveLibraryApplication(n.id);if(null!=t){let e=I.toggleFlag(t.getFlags(),y.LibraryApplicationFlags.OVERLAY_DISABLED);T.updateFlags(t.id,t.branchId,e);return}}l.default.dispatch({type:\"RUNNING_GAME_TOGGLE_OVERLAY\",game:t,newEnabledValue:e})}",
            "toggleDetection": "toggleDetection(t){l.default.dispatch({type:\"RUNNING_GAME_TOGGLE_DETECTION\",game:t})}",
            "editName": "editName(t,e){l.default.dispatch({type:\"RUNNING_GAME_EDIT_NAME\",game:t,newName:e})}",
            "identifyGame": "(t,e)=>(0,d.default)().then(e=>new Promise((n,a)=>{if(null==e){a(Error(\"Game utils module not loaded\"));return}e.identifyGame(t,(e,i)=>{if(0!==e){a(Error(\"Error \".concat(e,\" when fetching info on \").concat(t)));return}if(null==i.icon||\"\"===i.icon||null==i.name||\"\"===i.name){a(Error(\"Did not find data on \".concat(t)));return}l.default.dispatch({type:\"GAME_ICON_UPDATE\",gameName:i.name,icon:\"data:image/png;base64,\".concat(i.icon)}),n(i)})}))",
            "getDetectableGames": "getDetectableGames(){!s.default.fetching&&null==s.default.lastFetched&&l.default.wait(()=>{l.default.dispatch({type:\"GAMES_DATABASE_FETCH\"}),i.default.get({url:y.Endpoints.APPLICATIONS_DETECTABLE,headers:{\"If-None-Match\":s.default.detectableGamesEtag},retries:1,oldFormErrors:!0}).then(t=>{let{body:e,headers:{etag:n}}=t;l.default.dispatch({type:\"GAMES_DATABASE_UPDATE\",games:e,etag:n})},t=>{let{status:e}=t;304===e?l.default.dispatch({type:\"GAMES_DATABASE_UPDATE\",games:[],etag:s.default.detectableGamesEtag}):l.default.dispatch({type:\"GAMES_DATABASE_FETCH_FAIL\"})})})}",
            "reportUnverifiedGame": "reportUnverifiedGame(t){let{name:e,iconHash:n,publisher:a,distributor:r,sku:u,executableName:o}=t,c=(0,d.cleanExecutablePath)(o);if(null!=c){var s,E;i.default.post({url:y.Endpoints.UNVERIFIED_APPLICATIONS,body:{name:e,os:(0,A.getPlatformName)(),icon:n,distributor_application:(s=r,E=u,null==s||\"\"===s?null:{distributor:s,sku:E}),executable:c,publisher:a,report_version:3},retries:1,oldFormErrors:!0}).then(t=>{let{body:{name:e,hash:n,missing_data:a}}=t;l.default.dispatch({type:\"UNVERIFIED_GAME_UPDATE\",name:e,hash:n,missingData:a})})}}",
            "uploadIcon": "uploadIcon(t,e,n){i.default.post({url:y.Endpoints.UNVERIFIED_APPLICATIONS_ICONS,body:{application_name:t,application_hash:e,icon:n},retries:1,oldFormErrors:!0})}",
            "deleteEntry": "deleteEntry(t){l.default.dispatch({type:\"RUNNING_GAME_DELETE_ENTRY\",game:t})}",
            "launch": "function S(t,e,n){let d=arguments.length>3&&void 0!==arguments[3]&&arguments[3],s=arguments.length>4&&void 0!==arguments[4]?arguments[4]:[];if(d)return null==n?Promise.reject(Error(\"Invalid channel ID\")):((0,r.startEmbeddedActivity)(n,t,s),Promise.resolve());if(c.default.isConnected(t))return Promise.resolve();let I=null;if(null==e){let n=E.default.getActiveLibraryApplication(t);e=null!=n?n.branchId:t}if(p.default.isLaunchable(t,e)){var A;let n=p.default.getState(t,e),l=E.default.getActiveLaunchOptionId(t,e);if(null==n)throw Error(\"Missing dispatch game when launching\");let r=E.default.getLibraryApplication(t,e);if(null==r)throw Error(\"Missing library application when launching\");I=(A=t,i.default.post({url:y.Endpoints.OAUTH2_AUTHORIZE,query:{client_id:A,response_type:\"token\",scope:[y.OAuth2Scopes.IDENTIFY].join(\" \")},retries:3,body:{authorize:!0},oldFormErrors:!0}).then(t=>{let e=t.body.location.split(/#|\\?/),n=a.parse(e[e.length-1]);if(\"invalid_request\"===n.error)return null;if(null!=n.error){var i;throw Error(\"OAuth2 Error: \".concat(n.error,\": \").concat(null!==(i=n.error_description)&&void 0!==i?i:\"unknown error\"))}return n.access_token},t=>{if(404===t.status)return null;throw t})).then(t=>f.default.launchDispatchApplication(n,t,o.default.locale,r.getBranchName(),l))}else{let e=u.default.getApplication(t);I=null!=e?f.default.launch(e):f.default.launchGame(t)}let _=Error(\"game not found\");return null!=I?(l.default.dispatch({type:\"LIBRARY_APPLICATION_ACTIVE_BRANCH_UPDATE\",applicationId:t,branchId:e}),l.default.dispatch({type:\"GAME_LAUNCH_START\",applicationId:t}),I.then(e=>{l.default.dispatch({type:\"GAME_LAUNCH_SUCCESS\",applicationId:t,pids:e})}).catch(e=>{C.default.show(y.NoticeTypes.LAUNCH_GAME_FAILURE,N.default.Messages.GAME_LAUNCH_FAILED_LAUNCH_TARGET_NOT_FOUND),l.default.dispatch({type:\"GAME_LAUNCH_FAIL\",applicationId:t,error:_})})):(l.default.dispatch({type:\"GAME_LAUNCH_FAIL\",applicationId:t,error:_}),Promise.reject(_))}",
            "join": "async join(t){let{userId:e,sessionId:n,applicationId:a,channelId:i,messageId:r,intent:u=h.ActivityIntent.PLAY,embedded:d=!1}=t;if(__OVERLAY__)return l.default.dispatch({type:\"OVERLAY_JOIN_GAME\",userId:e,sessionId:n,applicationId:a,channelId:i,messageId:r}),Promise.resolve(!0);l.default.dispatch({type:\"ACTIVITY_JOIN_LOADING\",applicationId:a});try{let t=await _.default.getJoinSecret(e,n,a,i,r);return D({applicationId:a,secret:t,channelId:i,intent:u,embedded:d}),!0}catch(t){return l.default.dispatch({type:\"ACTIVITY_JOIN_FAILED\",applicationId:a}),!1}}",
            "joinWithSecret": "function D(t){let{applicationId:e,secret:n,channelId:a,intent:i=h.ActivityIntent.PLAY,embedded:r=!1,analyticsLocations:u=[]}=t;S(e,null,a,r,u).then(()=>f.default.waitConnected(e)).then(()=>Promise.race([f.default.waitSubscribed(e,y.RPCEvents.ACTIVITY_JOIN)])).then(()=>{l.default.dispatch({type:\"ACTIVITY_JOIN\",applicationId:e,secret:n,intent:i,embedded:r})}).catch(()=>l.default.dispatch({type:\"ACTIVITY_JOIN_FAILED\",applicationId:e}))}"
        }
    }
}